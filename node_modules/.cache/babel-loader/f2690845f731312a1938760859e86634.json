{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFilterableColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { GridPreferencePanelsValue } from '../preferencesPanel/gridPreferencePanelsValue';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { gridFilterModelSelector } from './gridFilterSelector';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { GRID_ROOT_GROUP_ID, gridRowTreeSelector } from '../rows';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel, cleanFilterItem, passFilterLogic } from './gridFilterUtils';\nimport { isDeepEqual } from '../../../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const filterStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$filterModel, _props$initialState, _props$initialState$f;\n\n  const filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$f = _props$initialState.filter) == null ? void 0 : _props$initialState$f.filterModel) != null ? _ref : getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: {\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),\n      visibleRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    }\n  });\n};\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\n\nexport const useGridFilter = (apiRef, props) => {\n  var _props$initialState3, _props$initialState3$, _props$slotProps2;\n\n  const logger = useGridLogger(apiRef, 'useGridFilter');\n  apiRef.current.registerControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: 'filterModelChange'\n  });\n  const updateFilteredRows = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);\n      const isRowMatchingFilters = props.filterMode === 'client' ? buildAggregatedFilterApplier(filterModel, apiRef) : null;\n      const filteringResult = apiRef.current.applyStrategyProcessor('filtering', {\n        isRowMatchingFilters,\n        filterModel: filterModel != null ? filterModel : getDefaultGridFilterModel()\n      });\n      return _extends({}, state, {\n        filter: _extends({}, state.filter, filteringResult)\n      });\n    });\n    apiRef.current.publishEvent('filteredRowsSet');\n  }, [props.filterMode, apiRef]);\n  const addColumnMenuItem = React.useCallback((columnMenuItems, colDef) => {\n    if (colDef == null || colDef.filterable === false || props.disableColumnFilter) {\n      return columnMenuItems;\n    }\n\n    return [...columnMenuItems, 'columnMenuFilterItem'];\n  }, [props.disableColumnFilter]);\n  /**\n   * API METHODS\n   */\n\n  const applyFilters = React.useCallback(() => {\n    updateFilteredRows();\n    apiRef.current.forceUpdate();\n  }, [apiRef, updateFilteredRows]);\n  const upsertFilterItem = React.useCallback(item => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = [...filterModel.items];\n    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItem');\n  }, [apiRef]);\n  const upsertFilterItems = React.useCallback(items => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const existingItems = [...filterModel.items];\n    items.forEach(item => {\n      const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n\n      if (itemIndex === -1) {\n        existingItems.push(item);\n      } else {\n        existingItems[itemIndex] = item;\n      }\n    });\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItems');\n  }, [apiRef]);\n  const deleteFilterItem = React.useCallback(itemToDelete => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);\n\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'deleteFilterItem');\n  }, [apiRef]);\n  const showFilterPanel = React.useCallback(targetColumnField => {\n    logger.debug('Displaying filter panel');\n\n    if (targetColumnField) {\n      const filterModel = gridFilterModelSelector(apiRef);\n      const filterItemsWithValue = filterModel.items.filter(item => {\n        var _column$filterOperato;\n\n        if (item.value !== undefined) {\n          // Some filters like `isAnyOf` support array as `item.value`.\n          // If array is empty, we want to remove it from the filter model.\n          if (Array.isArray(item.value) && item.value.length === 0) {\n            return false;\n          }\n\n          return true;\n        }\n\n        const column = apiRef.current.getColumn(item.field);\n        const filterOperator = (_column$filterOperato = column.filterOperators) == null ? void 0 : _column$filterOperato.find(operator => operator.value === item.operator);\n        const requiresFilterValue = typeof (filterOperator == null ? void 0 : filterOperator.requiresFilterValue) === 'undefined' ? true : filterOperator == null ? void 0 : filterOperator.requiresFilterValue; // Operators like `isEmpty` don't have and don't require `item.value`.\n        // So we don't want to remove them from the filter model if `item.value === undefined`.\n        // See https://github.com/mui/mui-x/issues/5402\n\n        if (requiresFilterValue) {\n          return false;\n        }\n\n        return true;\n      });\n      let newFilterItems;\n      const filterItemOnTarget = filterItemsWithValue.find(item => item.field === targetColumnField);\n      const targetColumn = apiRef.current.getColumn(targetColumnField);\n\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [cleanFilterItem({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      } else {\n        newFilterItems = [...filterItemsWithValue, cleanFilterItem({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      }\n\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const hideFilterPanel = React.useCallback(() => {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  const setFilterLogicOperator = React.useCallback(logicOperator => {\n    const filterModel = gridFilterModelSelector(apiRef);\n\n    if (filterModel.logicOperator === logicOperator) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      logicOperator\n    }), 'changeLogicOperator');\n  }, [apiRef]);\n  const setQuickFilterValues = React.useCallback(values => {\n    const filterModel = gridFilterModelSelector(apiRef);\n\n    if (isDeepEqual(filterModel.quickFilterValues, values)) {\n      return;\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      quickFilterValues: [...values]\n    }));\n  }, [apiRef]);\n  const setFilterModel = React.useCallback((model, reason) => {\n    const currentModel = gridFilterModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.updateControlState('filter', mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef), reason);\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const filterApi = {\n    setFilterLogicOperator,\n    unstable_applyFilters: applyFilters,\n    deleteFilterItem,\n    upsertFilterItem,\n    upsertFilterItems,\n    setFilterModel,\n    showFilterPanel,\n    hideFilterPanel,\n    setQuickFilterValues\n  };\n  useGridApiMethod(apiRef, filterApi, 'public');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState2, _props$initialState2$;\n\n    const filterModelToExport = gridFilterModelSelector(apiRef);\n    const shouldExportFilterModel = // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels || // Always export if the model is controlled\n    props.filterModel != null || // Always export if the model has been initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.filter) == null ? void 0 : _props$initialState2$.filterModel) != null || // Export if the model is not equal to the default value\n    !isDeepEqual(filterModelToExport, getDefaultGridFilterModel());\n\n    if (!shouldExportFilterModel) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef, props.filterModel, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.filter) == null ? void 0 : _props$initialState3$.filterModel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;\n\n    if (filterModel == null) {\n      return params;\n    }\n\n    apiRef.current.updateControlState('filter', mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef), 'restoreState');\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.filters) {\n      var _props$slotProps;\n\n      const FilterPanel = props.slots.filterPanel;\n      return /*#__PURE__*/_jsx(FilterPanel, _extends({}, (_props$slotProps = props.slotProps) == null ? void 0 : _props$slotProps.filterPanel));\n    }\n\n    return initialValue;\n  }, [props.slots.filterPanel, (_props$slotProps2 = props.slotProps) == null ? void 0 : _props$slotProps2.filterPanel]);\n  const flatFilteringMethod = React.useCallback(params => {\n    if (props.filterMode === 'client' && params.isRowMatchingFilters) {\n      const tree = gridRowTreeSelector(apiRef);\n      const rowIds = tree[GRID_ROOT_GROUP_ID].children;\n      const filteredRowsLookup = {};\n\n      for (let i = 0; i < rowIds.length; i += 1) {\n        const rowId = rowIds[i];\n        let isRowPassing;\n\n        if (typeof rowId === 'string' && rowId.startsWith('auto-generated-group-footer')) {\n          isRowPassing = true;\n        } else {\n          const {\n            passingFilterItems,\n            passingQuickFilterValues\n          } = params.isRowMatchingFilters(rowId);\n          isRowPassing = passFilterLogic([passingFilterItems], [passingQuickFilterValues], params.filterModel, apiRef);\n        }\n\n        filteredRowsLookup[rowId] = isRowPassing;\n      }\n\n      return {\n        filteredRowsLookup,\n        // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` are equals since no row is collapsed.\n        visibleRowsLookup: filteredRowsLookup,\n        filteredDescendantCountLookup: {}\n      };\n    }\n\n    return {\n      visibleRowsLookup: {},\n      filteredRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItem);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n  /**\n   * EVENTS\n   */\n\n  const handleColumnsChange = React.useCallback(() => {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    const filterModel = gridFilterModelSelector(apiRef);\n    const filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);\n    const newFilterItems = filterModel.items.filter(item => item.field && filterableColumnsLookup[item.field]);\n\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]); // Do not call `apiRef.current.forceUpdate` to avoid re-render before updating the sorted rows.\n  // Otherwise, the state is not consistent during the render\n\n  useGridApiEventHandler(apiRef, 'rowsSet', updateFilteredRows);\n  useGridApiEventHandler(apiRef, 'rowExpansionChange', apiRef.current.unstable_applyFilters);\n  useGridApiEventHandler(apiRef, 'columnsChange', handleColumnsChange);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(() => {\n    apiRef.current.unstable_applyFilters();\n  });\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/node_modules/@mui/x-data-grid/hooks/features/filter/useGridFilter.js"],"names":["_extends","React","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridFilterableColumnLookupSelector","GridPreferencePanelsValue","getDefaultGridFilterModel","gridFilterModelSelector","useFirstRender","GRID_ROOT_GROUP_ID","gridRowTreeSelector","useGridRegisterPipeProcessor","GRID_DEFAULT_STRATEGY","useGridRegisterStrategyProcessor","buildAggregatedFilterApplier","sanitizeFilterModel","mergeStateWithFilterModel","cleanFilterItem","passFilterLogic","isDeepEqual","jsx","_jsx","filterStateInitializer","state","props","apiRef","_ref","_props$filterModel","_props$initialState","_props$initialState$f","filterModel","initialState","filter","disableMultipleColumnsFiltering","visibleRowsLookup","filteredDescendantCountLookup","useGridFilter","_props$initialState3","_props$initialState3$","_props$slotProps2","logger","current","registerControlState","stateId","propModel","propOnChange","onFilterModelChange","stateSelector","changeEvent","updateFilteredRows","useCallback","setState","instanceId","isRowMatchingFilters","filterMode","filteringResult","applyStrategyProcessor","publishEvent","addColumnMenuItem","columnMenuItems","colDef","filterable","disableColumnFilter","applyFilters","forceUpdate","upsertFilterItem","item","items","itemIndex","findIndex","filterItem","id","push","setFilterModel","upsertFilterItems","existingItems","forEach","deleteFilterItem","itemToDelete","length","showFilterPanel","targetColumnField","debug","filterItemsWithValue","_column$filterOperato","value","undefined","Array","isArray","column","getColumn","field","filterOperator","filterOperators","find","operator","requiresFilterValue","newFilterItems","filterItemOnTarget","targetColumn","showPreferences","filters","hideFilterPanel","hidePreferences","setFilterLogicOperator","logicOperator","setQuickFilterValues","values","quickFilterValues","model","reason","currentModel","updateControlState","unstable_applyFilters","filterApi","stateExportPreProcessing","prevState","context","_props$initialState2","_props$initialState2$","filterModelToExport","shouldExportFilterModel","exportOnlyDirtyModels","stateRestorePreProcessing","params","_context$stateToResto","stateToRestore","callbacks","preferencePanelPreProcessing","initialValue","_props$slotProps","FilterPanel","slots","filterPanel","slotProps","flatFilteringMethod","tree","rowIds","children","filteredRowsLookup","i","rowId","isRowPassing","startsWith","passingFilterItems","passingQuickFilterValues","handleColumnsChange","filterableColumnsLookup","handleStrategyProcessorChange","methodName","useEffect"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridFilterableColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { GridPreferencePanelsValue } from '../preferencesPanel/gridPreferencePanelsValue';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { gridFilterModelSelector } from './gridFilterSelector';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { GRID_ROOT_GROUP_ID, gridRowTreeSelector } from '../rows';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel, cleanFilterItem, passFilterLogic } from './gridFilterUtils';\nimport { isDeepEqual } from '../../../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const filterStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$filterModel, _props$initialState, _props$initialState$f;\n  const filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$f = _props$initialState.filter) == null ? void 0 : _props$initialState$f.filterModel) != null ? _ref : getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: {\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),\n      visibleRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    }\n  });\n};\n\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\nexport const useGridFilter = (apiRef, props) => {\n  var _props$initialState3, _props$initialState3$, _props$slotProps2;\n  const logger = useGridLogger(apiRef, 'useGridFilter');\n  apiRef.current.registerControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: 'filterModelChange'\n  });\n  const updateFilteredRows = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);\n      const isRowMatchingFilters = props.filterMode === 'client' ? buildAggregatedFilterApplier(filterModel, apiRef) : null;\n      const filteringResult = apiRef.current.applyStrategyProcessor('filtering', {\n        isRowMatchingFilters,\n        filterModel: filterModel != null ? filterModel : getDefaultGridFilterModel()\n      });\n      return _extends({}, state, {\n        filter: _extends({}, state.filter, filteringResult)\n      });\n    });\n    apiRef.current.publishEvent('filteredRowsSet');\n  }, [props.filterMode, apiRef]);\n  const addColumnMenuItem = React.useCallback((columnMenuItems, colDef) => {\n    if (colDef == null || colDef.filterable === false || props.disableColumnFilter) {\n      return columnMenuItems;\n    }\n    return [...columnMenuItems, 'columnMenuFilterItem'];\n  }, [props.disableColumnFilter]);\n\n  /**\n   * API METHODS\n   */\n  const applyFilters = React.useCallback(() => {\n    updateFilteredRows();\n    apiRef.current.forceUpdate();\n  }, [apiRef, updateFilteredRows]);\n  const upsertFilterItem = React.useCallback(item => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = [...filterModel.items];\n    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItem');\n  }, [apiRef]);\n  const upsertFilterItems = React.useCallback(items => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const existingItems = [...filterModel.items];\n    items.forEach(item => {\n      const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n      if (itemIndex === -1) {\n        existingItems.push(item);\n      } else {\n        existingItems[itemIndex] = item;\n      }\n    });\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItems');\n  }, [apiRef]);\n  const deleteFilterItem = React.useCallback(itemToDelete => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'deleteFilterItem');\n  }, [apiRef]);\n  const showFilterPanel = React.useCallback(targetColumnField => {\n    logger.debug('Displaying filter panel');\n    if (targetColumnField) {\n      const filterModel = gridFilterModelSelector(apiRef);\n      const filterItemsWithValue = filterModel.items.filter(item => {\n        var _column$filterOperato;\n        if (item.value !== undefined) {\n          // Some filters like `isAnyOf` support array as `item.value`.\n          // If array is empty, we want to remove it from the filter model.\n          if (Array.isArray(item.value) && item.value.length === 0) {\n            return false;\n          }\n          return true;\n        }\n        const column = apiRef.current.getColumn(item.field);\n        const filterOperator = (_column$filterOperato = column.filterOperators) == null ? void 0 : _column$filterOperato.find(operator => operator.value === item.operator);\n        const requiresFilterValue = typeof (filterOperator == null ? void 0 : filterOperator.requiresFilterValue) === 'undefined' ? true : filterOperator == null ? void 0 : filterOperator.requiresFilterValue;\n\n        // Operators like `isEmpty` don't have and don't require `item.value`.\n        // So we don't want to remove them from the filter model if `item.value === undefined`.\n        // See https://github.com/mui/mui-x/issues/5402\n        if (requiresFilterValue) {\n          return false;\n        }\n        return true;\n      });\n      let newFilterItems;\n      const filterItemOnTarget = filterItemsWithValue.find(item => item.field === targetColumnField);\n      const targetColumn = apiRef.current.getColumn(targetColumnField);\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [cleanFilterItem({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      } else {\n        newFilterItems = [...filterItemsWithValue, cleanFilterItem({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      }\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const hideFilterPanel = React.useCallback(() => {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  const setFilterLogicOperator = React.useCallback(logicOperator => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    if (filterModel.logicOperator === logicOperator) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      logicOperator\n    }), 'changeLogicOperator');\n  }, [apiRef]);\n  const setQuickFilterValues = React.useCallback(values => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    if (isDeepEqual(filterModel.quickFilterValues, values)) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      quickFilterValues: [...values]\n    }));\n  }, [apiRef]);\n  const setFilterModel = React.useCallback((model, reason) => {\n    const currentModel = gridFilterModelSelector(apiRef);\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.updateControlState('filter', mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef), reason);\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const filterApi = {\n    setFilterLogicOperator,\n    unstable_applyFilters: applyFilters,\n    deleteFilterItem,\n    upsertFilterItem,\n    upsertFilterItems,\n    setFilterModel,\n    showFilterPanel,\n    hideFilterPanel,\n    setQuickFilterValues\n  };\n  useGridApiMethod(apiRef, filterApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState2, _props$initialState2$;\n    const filterModelToExport = gridFilterModelSelector(apiRef);\n    const shouldExportFilterModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.filterModel != null ||\n    // Always export if the model has been initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.filter) == null ? void 0 : _props$initialState2$.filterModel) != null ||\n    // Export if the model is not equal to the default value\n    !isDeepEqual(filterModelToExport, getDefaultGridFilterModel());\n    if (!shouldExportFilterModel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef, props.filterModel, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.filter) == null ? void 0 : _props$initialState3$.filterModel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n    const filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;\n    if (filterModel == null) {\n      return params;\n    }\n    apiRef.current.updateControlState('filter', mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef), 'restoreState');\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.filters) {\n      var _props$slotProps;\n      const FilterPanel = props.slots.filterPanel;\n      return /*#__PURE__*/_jsx(FilterPanel, _extends({}, (_props$slotProps = props.slotProps) == null ? void 0 : _props$slotProps.filterPanel));\n    }\n    return initialValue;\n  }, [props.slots.filterPanel, (_props$slotProps2 = props.slotProps) == null ? void 0 : _props$slotProps2.filterPanel]);\n  const flatFilteringMethod = React.useCallback(params => {\n    if (props.filterMode === 'client' && params.isRowMatchingFilters) {\n      const tree = gridRowTreeSelector(apiRef);\n      const rowIds = tree[GRID_ROOT_GROUP_ID].children;\n      const filteredRowsLookup = {};\n      for (let i = 0; i < rowIds.length; i += 1) {\n        const rowId = rowIds[i];\n        let isRowPassing;\n        if (typeof rowId === 'string' && rowId.startsWith('auto-generated-group-footer')) {\n          isRowPassing = true;\n        } else {\n          const {\n            passingFilterItems,\n            passingQuickFilterValues\n          } = params.isRowMatchingFilters(rowId);\n          isRowPassing = passFilterLogic([passingFilterItems], [passingQuickFilterValues], params.filterModel, apiRef);\n        }\n        filteredRowsLookup[rowId] = isRowPassing;\n      }\n      return {\n        filteredRowsLookup,\n        // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` are equals since no row is collapsed.\n        visibleRowsLookup: filteredRowsLookup,\n        filteredDescendantCountLookup: {}\n      };\n    }\n    return {\n      visibleRowsLookup: {},\n      filteredRowsLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItem);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n\n  /**\n   * EVENTS\n   */\n  const handleColumnsChange = React.useCallback(() => {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    const filterModel = gridFilterModelSelector(apiRef);\n    const filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);\n    const newFilterItems = filterModel.items.filter(item => item.field && filterableColumnsLookup[item.field]);\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]);\n\n  // Do not call `apiRef.current.forceUpdate` to avoid re-render before updating the sorted rows.\n  // Otherwise, the state is not consistent during the render\n  useGridApiEventHandler(apiRef, 'rowsSet', updateFilteredRows);\n  useGridApiEventHandler(apiRef, 'rowExpansionChange', apiRef.current.unstable_applyFilters);\n  useGridApiEventHandler(apiRef, 'columnsChange', handleColumnsChange);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n\n  /**\n   * 1ST RENDER\n   */\n  useFirstRender(() => {\n    apiRef.current.unstable_applyFilters();\n  });\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};"]},"metadata":{},"sourceType":"module"}