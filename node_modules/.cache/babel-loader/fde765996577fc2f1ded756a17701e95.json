{"ast":null,"code":"import { GridFilterInputValue } from '../components/panel/filterPanel/GridFilterInputValue';\nimport { escapeRegExp } from '../utils/utils';\nimport { GridFilterInputMultipleValue } from '../components/panel/filterPanel/GridFilterInputMultipleValue';\nexport const getGridStringQuickFilterFn = value => {\n  if (!value) {\n    return null;\n  }\n\n  const filterRegex = new RegExp(escapeRegExp(value), 'i');\n  return ({\n    formattedValue: columnValue\n  }) => {\n    return columnValue != null ? filterRegex.test(columnValue.toString()) : false;\n  };\n};\nexport const getGridStringOperators = (disableTrim = false) => [{\n  value: 'contains',\n  getApplyFilterFn: filterItem => {\n    if (!filterItem.value) {\n      return null;\n    }\n\n    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n    const filterRegex = new RegExp(escapeRegExp(filterItemValue), 'i');\n    return ({\n      value\n    }) => {\n      return value != null ? filterRegex.test(value.toString()) : false;\n    };\n  },\n  InputComponent: GridFilterInputValue\n}, {\n  value: 'equals',\n  getApplyFilterFn: filterItem => {\n    if (!filterItem.value) {\n      return null;\n    }\n\n    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n    const collator = new Intl.Collator(undefined, {\n      sensitivity: 'base',\n      usage: 'search'\n    });\n    return ({\n      value\n    }) => {\n      return value != null ? collator.compare(filterItemValue, value.toString()) === 0 : false;\n    };\n  },\n  InputComponent: GridFilterInputValue\n}, {\n  value: 'startsWith',\n  getApplyFilterFn: filterItem => {\n    if (!filterItem.value) {\n      return null;\n    }\n\n    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n    const filterRegex = new RegExp(`^${escapeRegExp(filterItemValue)}.*$`, 'i');\n    return ({\n      value\n    }) => {\n      return value != null ? filterRegex.test(value.toString()) : false;\n    };\n  },\n  InputComponent: GridFilterInputValue\n}, {\n  value: 'endsWith',\n  getApplyFilterFn: filterItem => {\n    if (!filterItem.value) {\n      return null;\n    }\n\n    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n    const filterRegex = new RegExp(`.*${escapeRegExp(filterItemValue)}$`, 'i');\n    return ({\n      value\n    }) => {\n      return value != null ? filterRegex.test(value.toString()) : false;\n    };\n  },\n  InputComponent: GridFilterInputValue\n}, {\n  value: 'isEmpty',\n  getApplyFilterFn: () => {\n    return ({\n      value\n    }) => {\n      return value === '' || value == null;\n    };\n  },\n  requiresFilterValue: false\n}, {\n  value: 'isNotEmpty',\n  getApplyFilterFn: () => {\n    return ({\n      value\n    }) => {\n      return value !== '' && value != null;\n    };\n  },\n  requiresFilterValue: false\n}, {\n  value: 'isAnyOf',\n  getApplyFilterFn: filterItem => {\n    if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {\n      return null;\n    }\n\n    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.map(val => val.trim());\n    const collator = new Intl.Collator(undefined, {\n      sensitivity: 'base',\n      usage: 'search'\n    });\n    return ({\n      value\n    }) => value != null ? filterItemValue.some(filterValue => {\n      return collator.compare(filterValue, value.toString() || '') === 0;\n    }) : false;\n  },\n  InputComponent: GridFilterInputMultipleValue\n}];","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/node_modules/@mui/x-data-grid/colDef/gridStringOperators.js"],"names":["GridFilterInputValue","escapeRegExp","GridFilterInputMultipleValue","getGridStringQuickFilterFn","value","filterRegex","RegExp","formattedValue","columnValue","test","toString","getGridStringOperators","disableTrim","getApplyFilterFn","filterItem","filterItemValue","trim","InputComponent","collator","Intl","Collator","undefined","sensitivity","usage","compare","requiresFilterValue","Array","isArray","length","map","val","some","filterValue"],"mappings":"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","sourcesContent":["import { GridFilterInputValue } from '../components/panel/filterPanel/GridFilterInputValue';\nimport { escapeRegExp } from '../utils/utils';\nimport { GridFilterInputMultipleValue } from '../components/panel/filterPanel/GridFilterInputMultipleValue';\nexport const getGridStringQuickFilterFn = value => {\n  if (!value) {\n    return null;\n  }\n  const filterRegex = new RegExp(escapeRegExp(value), 'i');\n  return ({\n    formattedValue: columnValue\n  }) => {\n    return columnValue != null ? filterRegex.test(columnValue.toString()) : false;\n  };\n};\nexport const getGridStringOperators = (disableTrim = false) => [{\n  value: 'contains',\n  getApplyFilterFn: filterItem => {\n    if (!filterItem.value) {\n      return null;\n    }\n    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n    const filterRegex = new RegExp(escapeRegExp(filterItemValue), 'i');\n    return ({\n      value\n    }) => {\n      return value != null ? filterRegex.test(value.toString()) : false;\n    };\n  },\n  InputComponent: GridFilterInputValue\n}, {\n  value: 'equals',\n  getApplyFilterFn: filterItem => {\n    if (!filterItem.value) {\n      return null;\n    }\n    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n    const collator = new Intl.Collator(undefined, {\n      sensitivity: 'base',\n      usage: 'search'\n    });\n    return ({\n      value\n    }) => {\n      return value != null ? collator.compare(filterItemValue, value.toString()) === 0 : false;\n    };\n  },\n  InputComponent: GridFilterInputValue\n}, {\n  value: 'startsWith',\n  getApplyFilterFn: filterItem => {\n    if (!filterItem.value) {\n      return null;\n    }\n    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n    const filterRegex = new RegExp(`^${escapeRegExp(filterItemValue)}.*$`, 'i');\n    return ({\n      value\n    }) => {\n      return value != null ? filterRegex.test(value.toString()) : false;\n    };\n  },\n  InputComponent: GridFilterInputValue\n}, {\n  value: 'endsWith',\n  getApplyFilterFn: filterItem => {\n    if (!filterItem.value) {\n      return null;\n    }\n    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();\n    const filterRegex = new RegExp(`.*${escapeRegExp(filterItemValue)}$`, 'i');\n    return ({\n      value\n    }) => {\n      return value != null ? filterRegex.test(value.toString()) : false;\n    };\n  },\n  InputComponent: GridFilterInputValue\n}, {\n  value: 'isEmpty',\n  getApplyFilterFn: () => {\n    return ({\n      value\n    }) => {\n      return value === '' || value == null;\n    };\n  },\n  requiresFilterValue: false\n}, {\n  value: 'isNotEmpty',\n  getApplyFilterFn: () => {\n    return ({\n      value\n    }) => {\n      return value !== '' && value != null;\n    };\n  },\n  requiresFilterValue: false\n}, {\n  value: 'isAnyOf',\n  getApplyFilterFn: filterItem => {\n    if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {\n      return null;\n    }\n    const filterItemValue = disableTrim ? filterItem.value : filterItem.value.map(val => val.trim());\n    const collator = new Intl.Collator(undefined, {\n      sensitivity: 'base',\n      usage: 'search'\n    });\n    return ({\n      value\n    }) => value != null ? filterItemValue.some(filterValue => {\n      return collator.compare(filterValue, value.toString() || '') === 0;\n    }) : false;\n  },\n  InputComponent: GridFilterInputMultipleValue\n}];"]},"metadata":{},"sourceType":"module"}