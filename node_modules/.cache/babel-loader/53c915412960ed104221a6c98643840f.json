{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"style\"],\n      _excluded2 = [\"style\"],\n      _excluded3 = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { useTheme } from '@mui/material/styles';\nimport { defaultMemoize } from 'reselect';\nimport { useGridPrivateApiContext } from '../../utils/useGridPrivateApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../rowSelection/gridRowSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils';\nimport { getMinimalContentHeight } from '../rows/gridRowsUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\"; // Uses binary search to avoid looping through all possible positions\n\nexport function binarySearch(offset, positions, sliceStart = 0, sliceEnd = positions.length) {\n  if (positions.length <= 0) {\n    return -1;\n  }\n\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? binarySearch(offset, positions, sliceStart, pivot) : binarySearch(offset, positions, pivot + 1, sliceEnd);\n}\n\nfunction exponentialSearch(offset, positions, index) {\n  let interval = 1;\n\n  while (index < positions.length && Math.abs(positions[index]) < offset) {\n    index += interval;\n    interval *= 2;\n  }\n\n  return binarySearch(offset, positions, Math.floor(index / 2), Math.min(index, positions.length));\n}\n\nexport const getRenderableIndexes = ({\n  firstIndex,\n  lastIndex,\n  buffer,\n  minFirstIndex,\n  maxLastIndex\n}) => {\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\n\nconst areRenderContextsEqual = (context1, context2) => {\n  if (context1 === context2) {\n    return true;\n  }\n\n  return context1.firstRowIndex === context2.firstRowIndex && context1.lastRowIndex === context2.lastRowIndex && context1.firstColumnIndex === context2.firstColumnIndex && context1.lastColumnIndex === context2.lastColumnIndex;\n};\n\nexport const useGridVirtualScroller = props => {\n  var _currentPage$range3, _currentPage$range4;\n\n  const apiRef = useGridPrivateApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const {\n    ref,\n    disableVirtualization,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const theme = useTheme();\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerDimensions, setContainerDimensions] = React.useState({\n    width: null,\n    height: null\n  });\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  const rowStyleCache = React.useRef({});\n  const prevGetRowProps = React.useRef();\n  const prevRootRowStyle = React.useRef();\n  const getRenderedColumnsRef = React.useRef(defaultMemoize((columns, firstColumnToRender, lastColumnToRender) => {\n    return columns.slice(firstColumnToRender, lastColumnToRender);\n  }));\n  const getNearestIndexToRender = React.useCallback(offset => {\n    var _currentPage$range, _currentPage$range2;\n\n    const lastMeasuredIndexRelativeToAllRows = apiRef.current.getLastMeasuredRowIndex();\n    let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;\n\n    if ((_currentPage$range = currentPage.range) != null && _currentPage$range.lastRowIndex && !allRowsMeasured) {\n      // Check if all rows in this page are already measured\n      allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= currentPage.range.lastRowIndex;\n    }\n\n    const lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (((_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.firstRowIndex) || 0), 0, rowsMeta.positions.length);\n\n    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {\n      // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n      // were measured, then use a binary search because it's faster.\n      return binarySearch(offset, rowsMeta.positions);\n    } // Otherwise, use an exponential search.\n    // If rows have \"auto\" as height, their positions will be based on estimated heights.\n    // In this case, we can skip several steps until we find a position higher than the offset.\n    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n\n\n    return exponentialSearch(offset, rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage);\n  }, [apiRef, (_currentPage$range3 = currentPage.range) == null ? void 0 : _currentPage$range3.firstRowIndex, (_currentPage$range4 = currentPage.range) == null ? void 0 : _currentPage$range4.lastRowIndex, rowsMeta.positions]);\n  const computeRenderContext = React.useCallback(() => {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n\n    const {\n      top,\n      left\n    } = scrollPosition.current; // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n\n    const firstRowIndex = Math.min(getNearestIndexToRender(top), rowsMeta.positions.length - 1);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top + containerDimensions.height);\n    let hasRowWithAutoHeight = false;\n    let firstColumnIndex = 0;\n    let lastColumnIndex = columnPositions.length;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: firstRowIndex,\n      lastIndex: lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n\n    for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n      const row = currentPage.rows[i];\n      hasRowWithAutoHeight = apiRef.current.rowHasAutoHeight(row.id);\n    }\n\n    if (!hasRowWithAutoHeight) {\n      firstColumnIndex = binarySearch(Math.abs(left), columnPositions);\n      lastColumnIndex = binarySearch(Math.abs(left) + containerDimensions.width, columnPositions);\n    }\n\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [disableVirtualization, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerDimensions]);\n  useEnhancedEffect(() => {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  useEnhancedEffect(() => {\n    setContainerDimensions({\n      width: rootRef.current.clientWidth,\n      height: rootRef.current.clientHeight\n    });\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(() => {\n    if (rootRef.current) {\n      setContainerDimensions({\n        width: rootRef.current.clientWidth,\n        height: rootRef.current.clientHeight\n      });\n    }\n  }, []);\n  useGridApiEventHandler(apiRef, 'debouncedResize', handleResize);\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const [initialFirstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const direction = theme.direction === 'ltr' ? 1 : -1;\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = direction * gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer, theme.direction]);\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    if (prevRenderContext.current && areRenderContextsEqual(nextRenderContext, prevRenderContext.current)) {\n      updateRenderZonePosition(nextRenderContext);\n      return;\n    }\n\n    setRenderContext(nextRenderContext);\n    updateRenderZonePosition(nextRenderContext);\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    apiRef.current.publishEvent('renderedRowsIntervalChange', {\n      firstRowToRender,\n      lastRowToRender\n    });\n    prevRenderContext.current = nextRenderContext;\n  }, [apiRef, setRenderContext, prevRenderContext, currentPage.rows.length, rootProps.rowBuffer, updateRenderZonePosition]);\n  useEnhancedEffect(() => {\n    if (containerDimensions.width == null) {\n      return;\n    }\n\n    const initialRenderContext = computeRenderContext();\n    updateRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('scrollPositionChange', params);\n  }, [apiRef, computeRenderContext, containerDimensions.width, updateRenderContext]);\n\n  const handleScroll = event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft; // On iOS and macOS, negative offsets are possible when swiping past the start\n\n    if (!prevRenderContext.current || scrollTop < 0) {\n      return;\n    }\n\n    if (theme.direction === 'ltr') {\n      if (scrollLeft < 0) {\n        return;\n      }\n    }\n\n    if (theme.direction === 'rtl') {\n      if (scrollLeft > 0) {\n        return;\n      }\n    } // When virtualization is disabled, the context never changes during scroll\n\n\n    const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth;\n    apiRef.current.publishEvent('scrollPositionChange', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(() => {\n        updateRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  };\n\n  const handleWheel = event => {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  };\n\n  const handleTouchMove = event => {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  };\n\n  const getRows = (params = {\n    renderContext\n  }) => {\n    var _rootProps$slotProps;\n\n    const {\n      onRowRender,\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerDimensions.width,\n      rowIndexOffset = 0,\n      position = 'center'\n    } = params;\n\n    if (!nextRenderContext || availableSpace == null) {\n      return null;\n    }\n\n    const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const renderedRows = [];\n\n    if (params.rows) {\n      params.rows.forEach(row => {\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      });\n    } else {\n      if (!currentPage.range) {\n        return null;\n      }\n\n      for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n        const row = currentPage.rows[i];\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n\n    const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const renderedColumns = getRenderedColumnsRef.current(visibleColumns, firstColumnToRender, lastColumnToRender);\n\n    const _ref = ((_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.row) || {},\n          {\n      style: rootRowStyle\n    } = _ref,\n          rootRowProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n    const invalidatesCachedRowStyle = prevGetRowProps.current !== getRowProps || prevRootRowStyle.current !== rootRowStyle;\n\n    if (invalidatesCachedRowStyle) {\n      rowStyleCache.current = {};\n    }\n\n    const rows = [];\n\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _currentPage$range5;\n\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const lastVisibleRowIndex = firstRowToRender + i === currentPage.rows.length - 1;\n      const baseRowHeight = !apiRef.current.rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      let isSelected;\n\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else {\n        isSelected = apiRef.current.isRowSelectable(id);\n      }\n\n      if (onRowRender) {\n        onRowRender(id);\n      }\n\n      const focusedCell = cellFocus !== null && cellFocus.id === id ? cellFocus.field : null;\n      let tabbableCell = null;\n\n      if (cellTabIndex !== null && cellTabIndex.id === id) {\n        const cellParams = apiRef.current.getCellParams(id, cellTabIndex.field);\n        tabbableCell = cellParams.cellMode === 'view' ? cellTabIndex.field : null;\n      }\n\n      const _ref2 = typeof getRowProps === 'function' && getRowProps(id, model) || {},\n            {\n        style: rowStyle\n      } = _ref2,\n            rowProps = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n\n      if (!rowStyleCache.current[id]) {\n        const style = _extends({}, rowStyle, rootRowStyle);\n\n        rowStyleCache.current[id] = style;\n      }\n\n      rows.push( /*#__PURE__*/_jsx(rootProps.slots.row, _extends({\n        row: model,\n        rowId: id,\n        rowHeight: baseRowHeight,\n        focusedCell: focusedCell,\n        tabbableCell: tabbableCell,\n        renderedColumns: renderedColumns,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: rowIndexOffset + ((currentPage == null ? void 0 : (_currentPage$range5 = currentPage.range) == null ? void 0 : _currentPage$range5.firstRowIndex) || 0) + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex,\n        position: position\n      }, rowProps, rootRowProps, {\n        style: rowStyleCache.current[id]\n      }), id));\n    }\n\n    prevGetRowProps.current = getRowProps;\n    prevRootRowStyle.current = rootRowStyle;\n    return rows;\n  };\n\n  const needsHorizontalScrollbar = containerDimensions.width && columnsTotalWidth >= containerDimensions.width;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n    return size;\n  }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, needsHorizontalScrollbar]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n\n  if (rootProps.autoHeight && currentPage.rows.length === 0) {\n    contentSize.height = getMinimalContentHeight(apiRef, rootProps.rowHeight); // Give room to show the overlay when there no rows.\n  }\n\n  const rootStyle = {};\n\n  if (!needsHorizontalScrollbar) {\n    rootStyle.overflowX = 'hidden';\n  }\n\n  if (rootProps.autoHeight) {\n    rootStyle.overflowY = 'hidden';\n  }\n\n  const getRenderContext = React.useCallback(() => {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.register('private', {\n    getRenderContext\n  });\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: (_ref3 = {}) => {\n      let {\n        style = {}\n      } = _ref3,\n          other = _objectWithoutPropertiesLoose(_ref3, _excluded3);\n\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        onWheel: handleWheel,\n        onTouchMove: handleTouchMove,\n        style: _extends({}, style, rootStyle)\n      }, other);\n    },\n    getContentProps: ({\n      style = {}\n    } = {}) => ({\n      style: _extends({}, style, contentSize)\n    }),\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef\n    })\n  };\n};","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualScroller.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","_excluded2","_excluded3","React","ReactDOM","unstable_useForkRef","useForkRef","unstable_useEnhancedEffect","useEnhancedEffect","useTheme","defaultMemoize","useGridPrivateApiContext","useGridRootProps","useGridSelector","gridVisibleColumnDefinitionsSelector","gridColumnsTotalWidthSelector","gridColumnPositionsSelector","gridFocusCellSelector","gridTabIndexCellSelector","useGridVisibleRows","useGridApiEventHandler","clamp","selectedIdsLookupSelector","gridRowsMetaSelector","getFirstNonSpannedColumnToRender","getMinimalContentHeight","jsx","_jsx","binarySearch","offset","positions","sliceStart","sliceEnd","length","pivot","Math","floor","itemOffset","exponentialSearch","index","interval","abs","min","getRenderableIndexes","firstIndex","lastIndex","buffer","minFirstIndex","maxLastIndex","areRenderContextsEqual","context1","context2","firstRowIndex","lastRowIndex","firstColumnIndex","lastColumnIndex","useGridVirtualScroller","props","_currentPage$range3","_currentPage$range4","apiRef","rootProps","visibleColumns","ref","disableVirtualization","onRenderZonePositioning","renderZoneMinColumnIndex","renderZoneMaxColumnIndex","getRowProps","theme","columnPositions","columnsTotalWidth","cellFocus","cellTabIndex","rowsMeta","selectedRowsLookup","currentPage","renderZoneRef","useRef","rootRef","handleRef","renderContext","setRenderContext","useState","prevRenderContext","scrollPosition","top","left","containerDimensions","setContainerDimensions","width","height","prevTotalWidth","rowStyleCache","prevGetRowProps","prevRootRowStyle","getRenderedColumnsRef","columns","firstColumnToRender","lastColumnToRender","slice","getNearestIndexToRender","useCallback","_currentPage$range","_currentPage$range2","lastMeasuredIndexRelativeToAllRows","current","getLastMeasuredRowIndex","allRowsMeasured","Infinity","range","lastMeasuredIndexRelativeToCurrentPage","computeRenderContext","rows","autoHeight","hasRowWithAutoHeight","firstRowToRender","lastRowToRender","rowBuffer","i","row","rowHasAutoHeight","id","style","transform","scrollLeft","scrollTop","clientWidth","clientHeight","currentPageTotalHeight","handleResize","updateRenderZonePosition","nextRenderContext","initialFirstColumnToRender","columnBuffer","visibleRows","direction","state","updateRenderContext","publishEvent","initialRenderContext","params","handleScroll","event","currentTarget","topRowsScrolledSincePreviousRender","bottomRowsScrolledSincePreviousRender","topColumnsScrolledSincePreviousRender","bottomColumnsScrolledSincePreviousRender","shouldSetState","rowThreshold","columnThreshold","flushSync","handleWheel","handleTouchMove","getRows","_rootProps$slotProps","onRowRender","minFirstColumn","maxLastColumn","availableSpace","rowIndexOffset","position","renderedRows","forEach","push","calculateColSpan","rowId","renderedColumns","_ref","slotProps","rootRowStyle","rootRowProps","invalidatesCachedRowStyle","_currentPage$range5","model","lastVisibleRowIndex","baseRowHeight","unstable_getRowHeight","isSelected","isRowSelectable","focusedCell","field","tabbableCell","cellParams","getCellParams","cellMode","_ref2","rowStyle","rowProps","slots","rowHeight","selected","containerWidth","isLastVisible","needsHorizontalScrollbar","contentSize","useMemo","max","shouldExtendContent","size","minHeight","useEffect","rootStyle","overflowX","overflowY","getRenderContext","register","getRootProps","_ref3","other","onScroll","onWheel","onTouchMove","getContentProps","getRenderZoneProps"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"style\"],\n  _excluded2 = [\"style\"],\n  _excluded3 = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { useTheme } from '@mui/material/styles';\nimport { defaultMemoize } from 'reselect';\nimport { useGridPrivateApiContext } from '../../utils/useGridPrivateApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../rowSelection/gridRowSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils';\nimport { getMinimalContentHeight } from '../rows/gridRowsUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// Uses binary search to avoid looping through all possible positions\nexport function binarySearch(offset, positions, sliceStart = 0, sliceEnd = positions.length) {\n  if (positions.length <= 0) {\n    return -1;\n  }\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? binarySearch(offset, positions, sliceStart, pivot) : binarySearch(offset, positions, pivot + 1, sliceEnd);\n}\nfunction exponentialSearch(offset, positions, index) {\n  let interval = 1;\n  while (index < positions.length && Math.abs(positions[index]) < offset) {\n    index += interval;\n    interval *= 2;\n  }\n  return binarySearch(offset, positions, Math.floor(index / 2), Math.min(index, positions.length));\n}\nexport const getRenderableIndexes = ({\n  firstIndex,\n  lastIndex,\n  buffer,\n  minFirstIndex,\n  maxLastIndex\n}) => {\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\nconst areRenderContextsEqual = (context1, context2) => {\n  if (context1 === context2) {\n    return true;\n  }\n  return context1.firstRowIndex === context2.firstRowIndex && context1.lastRowIndex === context2.lastRowIndex && context1.firstColumnIndex === context2.firstColumnIndex && context1.lastColumnIndex === context2.lastColumnIndex;\n};\nexport const useGridVirtualScroller = props => {\n  var _currentPage$range3, _currentPage$range4;\n  const apiRef = useGridPrivateApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const {\n    ref,\n    disableVirtualization,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const theme = useTheme();\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerDimensions, setContainerDimensions] = React.useState({\n    width: null,\n    height: null\n  });\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  const rowStyleCache = React.useRef({});\n  const prevGetRowProps = React.useRef();\n  const prevRootRowStyle = React.useRef();\n  const getRenderedColumnsRef = React.useRef(defaultMemoize((columns, firstColumnToRender, lastColumnToRender) => {\n    return columns.slice(firstColumnToRender, lastColumnToRender);\n  }));\n  const getNearestIndexToRender = React.useCallback(offset => {\n    var _currentPage$range, _currentPage$range2;\n    const lastMeasuredIndexRelativeToAllRows = apiRef.current.getLastMeasuredRowIndex();\n    let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;\n    if ((_currentPage$range = currentPage.range) != null && _currentPage$range.lastRowIndex && !allRowsMeasured) {\n      // Check if all rows in this page are already measured\n      allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= currentPage.range.lastRowIndex;\n    }\n    const lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (((_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.firstRowIndex) || 0), 0, rowsMeta.positions.length);\n    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {\n      // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n      // were measured, then use a binary search because it's faster.\n      return binarySearch(offset, rowsMeta.positions);\n    }\n\n    // Otherwise, use an exponential search.\n    // If rows have \"auto\" as height, their positions will be based on estimated heights.\n    // In this case, we can skip several steps until we find a position higher than the offset.\n    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n    return exponentialSearch(offset, rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage);\n  }, [apiRef, (_currentPage$range3 = currentPage.range) == null ? void 0 : _currentPage$range3.firstRowIndex, (_currentPage$range4 = currentPage.range) == null ? void 0 : _currentPage$range4.lastRowIndex, rowsMeta.positions]);\n  const computeRenderContext = React.useCallback(() => {\n    if (disableVirtualization) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n\n    // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n    const firstRowIndex = Math.min(getNearestIndexToRender(top), rowsMeta.positions.length - 1);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top + containerDimensions.height);\n    let hasRowWithAutoHeight = false;\n    let firstColumnIndex = 0;\n    let lastColumnIndex = columnPositions.length;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: firstRowIndex,\n      lastIndex: lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n      const row = currentPage.rows[i];\n      hasRowWithAutoHeight = apiRef.current.rowHasAutoHeight(row.id);\n    }\n    if (!hasRowWithAutoHeight) {\n      firstColumnIndex = binarySearch(Math.abs(left), columnPositions);\n      lastColumnIndex = binarySearch(Math.abs(left) + containerDimensions.width, columnPositions);\n    }\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [disableVirtualization, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerDimensions]);\n  useEnhancedEffect(() => {\n    if (disableVirtualization) {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    } else {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    }\n  }, [disableVirtualization]);\n  useEnhancedEffect(() => {\n    setContainerDimensions({\n      width: rootRef.current.clientWidth,\n      height: rootRef.current.clientHeight\n    });\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(() => {\n    if (rootRef.current) {\n      setContainerDimensions({\n        width: rootRef.current.clientWidth,\n        height: rootRef.current.clientHeight\n      });\n    }\n  }, []);\n  useGridApiEventHandler(apiRef, 'debouncedResize', handleResize);\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const [initialFirstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const direction = theme.direction === 'ltr' ? 1 : -1;\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = direction * gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer, theme.direction]);\n  const updateRenderContext = React.useCallback(nextRenderContext => {\n    if (prevRenderContext.current && areRenderContextsEqual(nextRenderContext, prevRenderContext.current)) {\n      updateRenderZonePosition(nextRenderContext);\n      return;\n    }\n    setRenderContext(nextRenderContext);\n    updateRenderZonePosition(nextRenderContext);\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    apiRef.current.publishEvent('renderedRowsIntervalChange', {\n      firstRowToRender,\n      lastRowToRender\n    });\n    prevRenderContext.current = nextRenderContext;\n  }, [apiRef, setRenderContext, prevRenderContext, currentPage.rows.length, rootProps.rowBuffer, updateRenderZonePosition]);\n  useEnhancedEffect(() => {\n    if (containerDimensions.width == null) {\n      return;\n    }\n    const initialRenderContext = computeRenderContext();\n    updateRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('scrollPositionChange', params);\n  }, [apiRef, computeRenderContext, containerDimensions.width, updateRenderContext]);\n  const handleScroll = event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft;\n\n    // On iOS and macOS, negative offsets are possible when swiping past the start\n    if (!prevRenderContext.current || scrollTop < 0) {\n      return;\n    }\n    if (theme.direction === 'ltr') {\n      if (scrollLeft < 0) {\n        return;\n      }\n    }\n    if (theme.direction === 'rtl') {\n      if (scrollLeft > 0) {\n        return;\n      }\n    }\n\n    // When virtualization is disabled, the context never changes during scroll\n    const nextRenderContext = disableVirtualization ? prevRenderContext.current : computeRenderContext();\n    const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth;\n    apiRef.current.publishEvent('scrollPositionChange', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(() => {\n        updateRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  };\n  const handleWheel = event => {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  };\n  const handleTouchMove = event => {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  };\n  const getRows = (params = {\n    renderContext\n  }) => {\n    var _rootProps$slotProps;\n    const {\n      onRowRender,\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerDimensions.width,\n      rowIndexOffset = 0,\n      position = 'center'\n    } = params;\n    if (!nextRenderContext || availableSpace == null) {\n      return null;\n    }\n    const rowBuffer = !disableVirtualization ? rootProps.rowBuffer : 0;\n    const columnBuffer = !disableVirtualization ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const renderedRows = [];\n    if (params.rows) {\n      params.rows.forEach(row => {\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      });\n    } else {\n      if (!currentPage.range) {\n        return null;\n      }\n      for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n        const row = currentPage.rows[i];\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n    const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const renderedColumns = getRenderedColumnsRef.current(visibleColumns, firstColumnToRender, lastColumnToRender);\n    const _ref = ((_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.row) || {},\n      {\n        style: rootRowStyle\n      } = _ref,\n      rootRowProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const invalidatesCachedRowStyle = prevGetRowProps.current !== getRowProps || prevRootRowStyle.current !== rootRowStyle;\n    if (invalidatesCachedRowStyle) {\n      rowStyleCache.current = {};\n    }\n    const rows = [];\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _currentPage$range5;\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const lastVisibleRowIndex = firstRowToRender + i === currentPage.rows.length - 1;\n      const baseRowHeight = !apiRef.current.rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      let isSelected;\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else {\n        isSelected = apiRef.current.isRowSelectable(id);\n      }\n      if (onRowRender) {\n        onRowRender(id);\n      }\n      const focusedCell = cellFocus !== null && cellFocus.id === id ? cellFocus.field : null;\n      let tabbableCell = null;\n      if (cellTabIndex !== null && cellTabIndex.id === id) {\n        const cellParams = apiRef.current.getCellParams(id, cellTabIndex.field);\n        tabbableCell = cellParams.cellMode === 'view' ? cellTabIndex.field : null;\n      }\n      const _ref2 = typeof getRowProps === 'function' && getRowProps(id, model) || {},\n        {\n          style: rowStyle\n        } = _ref2,\n        rowProps = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n      if (!rowStyleCache.current[id]) {\n        const style = _extends({}, rowStyle, rootRowStyle);\n        rowStyleCache.current[id] = style;\n      }\n      rows.push( /*#__PURE__*/_jsx(rootProps.slots.row, _extends({\n        row: model,\n        rowId: id,\n        rowHeight: baseRowHeight,\n        focusedCell: focusedCell,\n        tabbableCell: tabbableCell,\n        renderedColumns: renderedColumns,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: rowIndexOffset + ((currentPage == null ? void 0 : (_currentPage$range5 = currentPage.range) == null ? void 0 : _currentPage$range5.firstRowIndex) || 0) + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex,\n        position: position\n      }, rowProps, rootRowProps, {\n        style: rowStyleCache.current[id]\n      }), id));\n    }\n    prevGetRowProps.current = getRowProps;\n    prevRootRowStyle.current = rootRowStyle;\n    return rows;\n  };\n  const needsHorizontalScrollbar = containerDimensions.width && columnsTotalWidth >= containerDimensions.width;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n    return size;\n  }, [rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, needsHorizontalScrollbar]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n  if (rootProps.autoHeight && currentPage.rows.length === 0) {\n    contentSize.height = getMinimalContentHeight(apiRef, rootProps.rowHeight); // Give room to show the overlay when there no rows.\n  }\n\n  const rootStyle = {};\n  if (!needsHorizontalScrollbar) {\n    rootStyle.overflowX = 'hidden';\n  }\n  if (rootProps.autoHeight) {\n    rootStyle.overflowY = 'hidden';\n  }\n  const getRenderContext = React.useCallback(() => {\n    return prevRenderContext.current;\n  }, []);\n  apiRef.current.register('private', {\n    getRenderContext\n  });\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: (_ref3 = {}) => {\n      let {\n          style = {}\n        } = _ref3,\n        other = _objectWithoutPropertiesLoose(_ref3, _excluded3);\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        onWheel: handleWheel,\n        onTouchMove: handleTouchMove,\n        style: _extends({}, style, rootStyle)\n      }, other);\n    },\n    getContentProps: ({\n      style = {}\n    } = {}) => ({\n      style: _extends({}, style, contentSize)\n    }),\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef\n    })\n  };\n};"]},"metadata":{},"sourceType":"module"}