{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument } from '@mui/utils';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridExpandedRowCountSelector } from '../filter/gridFilterSelector';\nimport { gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector } from '../columns/gridColumnsSelector';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getColumnsToExport } from './utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GridPrintExportMenuItem } from '../../../components/toolbar/GridToolbarExport';\nimport { getTotalHeaderHeight } from '../columns/gridColumnsUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction raf() {\n  return new Promise(resolve => {\n    requestAnimationFrame(() => {\n      resolve();\n    });\n  });\n}\n\nfunction buildPrintWindow(title) {\n  const iframeEl = document.createElement('iframe');\n  iframeEl.style.position = 'absolute';\n  iframeEl.style.width = '0px';\n  iframeEl.style.height = '0px';\n  iframeEl.title = title || document.title;\n  return iframeEl;\n}\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridParamsApi (method)\n */\n\n\nexport const useGridPrintExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridPrintExport');\n  const doc = React.useRef(null);\n  const previousGridState = React.useRef(null);\n  const previousColumnVisibility = React.useRef({});\n  React.useEffect(() => {\n    doc.current = ownerDocument(apiRef.current.rootElementRef.current);\n  }, [apiRef]); // Returns a promise because updateColumns triggers state update and\n  // the new state needs to be in place before the grid can be sized correctly\n\n  const updateGridColumnsForPrint = React.useCallback((fields, allColumns) => new Promise(resolve => {\n    // TODO remove unused Promise\n    if (!fields && !allColumns) {\n      resolve();\n      return;\n    }\n\n    const exportedColumnFields = getColumnsToExport({\n      apiRef,\n      options: {\n        fields,\n        allColumns\n      }\n    }).map(column => column.field);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const newColumnVisibilityModel = {};\n    columns.forEach(column => {\n      newColumnVisibilityModel[column.field] = exportedColumnFields.includes(column.field);\n    });\n    apiRef.current.setColumnVisibilityModel(newColumnVisibilityModel);\n    resolve();\n  }), [apiRef]);\n  const handlePrintWindowLoad = React.useCallback((printWindow, options) => {\n    var _querySelector, _querySelector2;\n\n    const normalizeOptions = _extends({\n      copyStyles: true,\n      hideToolbar: false,\n      hideFooter: false\n    }, options);\n\n    const printDoc = printWindow.contentDocument;\n\n    if (!printDoc) {\n      return;\n    }\n\n    const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n    const gridRootElement = apiRef.current.rootElementRef.current;\n    const gridClone = gridRootElement.cloneNode(true); // Allow to overflow to not hide the border of the last row\n\n    const gridMain = gridClone.querySelector(`.${gridClasses.main}`);\n    gridMain.style.overflow = 'visible'; // See https://support.google.com/chrome/thread/191619088?hl=en&msgid=193009642\n\n    gridClone.style.contain = 'size';\n    const columnHeaders = gridClone.querySelector(`.${gridClasses.columnHeaders}`);\n    const columnHeadersInner = columnHeaders.querySelector(`.${gridClasses.columnHeadersInner}`);\n    columnHeadersInner.style.width = '100%';\n    let gridToolbarElementHeight = ((_querySelector = gridRootElement.querySelector(`.${gridClasses.toolbarContainer}`)) == null ? void 0 : _querySelector.offsetHeight) || 0;\n    let gridFooterElementHeight = ((_querySelector2 = gridRootElement.querySelector(`.${gridClasses.footerContainer}`)) == null ? void 0 : _querySelector2.offsetHeight) || 0;\n\n    if (normalizeOptions.hideToolbar) {\n      var _gridClone$querySelec;\n\n      (_gridClone$querySelec = gridClone.querySelector(`.${gridClasses.toolbarContainer}`)) == null ? void 0 : _gridClone$querySelec.remove();\n      gridToolbarElementHeight = 0;\n    }\n\n    if (normalizeOptions.hideFooter) {\n      var _gridClone$querySelec2;\n\n      (_gridClone$querySelec2 = gridClone.querySelector(`.${gridClasses.footerContainer}`)) == null ? void 0 : _gridClone$querySelec2.remove();\n      gridFooterElementHeight = 0;\n    } // Expand container height to accommodate all rows\n\n\n    gridClone.style.height = `${rowsMeta.currentPageTotalHeight + getTotalHeaderHeight(apiRef, props.columnHeaderHeight) + gridToolbarElementHeight + gridFooterElementHeight}px`; // The height above does not include grid border width, so we need to exclude it\n\n    gridClone.style.boxSizing = 'content-box'; // printDoc.body.appendChild(gridClone); should be enough but a clone isolation bug in Safari\n    // prevents us to do it\n\n    const container = document.createElement('div');\n    container.appendChild(gridClone);\n    printDoc.body.innerHTML = container.innerHTML;\n    const defaultPageStyle = typeof normalizeOptions.pageStyle === 'function' ? normalizeOptions.pageStyle() : normalizeOptions.pageStyle;\n\n    if (typeof defaultPageStyle === 'string') {\n      // TODO custom styles should always win\n      const styleElement = printDoc.createElement('style');\n      styleElement.appendChild(printDoc.createTextNode(defaultPageStyle));\n      printDoc.head.appendChild(styleElement);\n    }\n\n    if (normalizeOptions.bodyClassName) {\n      printDoc.body.classList.add(...normalizeOptions.bodyClassName.split(' '));\n    }\n\n    if (normalizeOptions.copyStyles) {\n      const rootCandidate = gridRootElement.getRootNode();\n      const root = rootCandidate.constructor.name === 'ShadowRoot' ? rootCandidate : doc.current;\n      const headStyleElements = root.querySelectorAll(\"style, link[rel='stylesheet']\");\n\n      for (let i = 0; i < headStyleElements.length; i += 1) {\n        const node = headStyleElements[i];\n\n        if (node.tagName === 'STYLE') {\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n          const sheet = node.sheet;\n\n          if (sheet) {\n            let styleCSS = ''; // NOTE: for-of is not supported by IE\n\n            for (let j = 0; j < sheet.cssRules.length; j += 1) {\n              if (typeof sheet.cssRules[j].cssText === 'string') {\n                styleCSS += `${sheet.cssRules[j].cssText}\\r\\n`;\n              }\n            }\n\n            newHeadStyleElements.appendChild(printDoc.createTextNode(styleCSS));\n            printDoc.head.appendChild(newHeadStyleElements);\n          }\n        } else if (node.getAttribute('href')) {\n          // If `href` tag is empty, avoid loading these links\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n\n          for (let j = 0; j < node.attributes.length; j += 1) {\n            const attr = node.attributes[j];\n\n            if (attr) {\n              newHeadStyleElements.setAttribute(attr.nodeName, attr.nodeValue || '');\n            }\n          }\n\n          printDoc.head.appendChild(newHeadStyleElements);\n        }\n      }\n    } // Trigger print\n\n\n    if (process.env.NODE_ENV !== 'test') {\n      printWindow.contentWindow.print();\n    }\n  }, [apiRef, doc, props.columnHeaderHeight]);\n  const handlePrintWindowAfterPrint = React.useCallback(printWindow => {\n    var _previousGridState$cu, _previousGridState$cu2; // Remove the print iframe\n\n\n    doc.current.body.removeChild(printWindow); // Revert grid to previous state\n\n    apiRef.current.restoreState(previousGridState.current || {});\n\n    if (!((_previousGridState$cu = previousGridState.current) != null && (_previousGridState$cu2 = _previousGridState$cu.columns) != null && _previousGridState$cu2.columnVisibilityModel)) {\n      // if the apiRef.current.exportState(); did not exported the column visibility, we update it\n      apiRef.current.setColumnVisibilityModel(previousColumnVisibility.current);\n    }\n\n    apiRef.current.unstable_enableVirtualization(); // Clear local state\n\n    previousGridState.current = null;\n    previousColumnVisibility.current = {};\n  }, [apiRef]);\n  const exportDataAsPrint = React.useCallback(async options => {\n    logger.debug(`Export data as Print`);\n\n    if (!apiRef.current.rootElementRef.current) {\n      throw new Error('MUI: No grid root element available.');\n    }\n\n    previousGridState.current = apiRef.current.exportState(); // It appends that the visibility model is not exported, especially if columnVisibility is not controlled\n\n    previousColumnVisibility.current = gridColumnVisibilityModelSelector(apiRef);\n\n    if (props.pagination) {\n      const visibleRowCount = gridExpandedRowCountSelector(apiRef);\n      apiRef.current.setPageSize(visibleRowCount);\n    }\n\n    await updateGridColumnsForPrint(options == null ? void 0 : options.fields, options == null ? void 0 : options.allColumns);\n    apiRef.current.unstable_disableVirtualization();\n    await raf(); // wait for the state changes to take action\n\n    const printWindow = buildPrintWindow(options == null ? void 0 : options.fileName);\n\n    if (process.env.NODE_ENV === 'test') {\n      doc.current.body.appendChild(printWindow); // In test env, run the all pipeline without waiting for loading\n\n      handlePrintWindowLoad(printWindow, options);\n      handlePrintWindowAfterPrint(printWindow);\n    } else {\n      printWindow.onload = () => {\n        handlePrintWindowLoad(printWindow, options);\n        const mediaQueryList = printWindow.contentWindow.matchMedia('print');\n        mediaQueryList.addEventListener('change', mql => {\n          const isAfterPrint = mql.matches === false;\n\n          if (isAfterPrint) {\n            handlePrintWindowAfterPrint(printWindow);\n          }\n        });\n      };\n\n      doc.current.body.appendChild(printWindow);\n    }\n  }, [props, logger, apiRef, handlePrintWindowLoad, handlePrintWindowAfterPrint, updateGridColumnsForPrint]);\n  const printExportApi = {\n    exportDataAsPrint\n  };\n  useGridApiMethod(apiRef, printExportApi, 'public');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    var _options$printOptions;\n\n    if ((_options$printOptions = options.printOptions) != null && _options$printOptions.disableToolbarButton) {\n      return initialValue;\n    }\n\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridPrintExportMenuItem, {\n        options: options.printOptions\n      }),\n      componentName: 'printExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/node_modules/@mui/x-data-grid/hooks/features/export/useGridPrintExport.js"],"names":["_extends","React","unstable_ownerDocument","ownerDocument","useGridLogger","gridExpandedRowCountSelector","gridColumnDefinitionsSelector","gridColumnVisibilityModelSelector","gridClasses","useGridApiMethod","gridRowsMetaSelector","getColumnsToExport","useGridRegisterPipeProcessor","GridPrintExportMenuItem","getTotalHeaderHeight","jsx","_jsx","raf","Promise","resolve","requestAnimationFrame","buildPrintWindow","title","iframeEl","document","createElement","style","position","width","height","useGridPrintExport","apiRef","props","logger","doc","useRef","previousGridState","previousColumnVisibility","useEffect","current","rootElementRef","updateGridColumnsForPrint","useCallback","fields","allColumns","exportedColumnFields","options","map","column","field","columns","newColumnVisibilityModel","forEach","includes","setColumnVisibilityModel","handlePrintWindowLoad","printWindow","_querySelector","_querySelector2","normalizeOptions","copyStyles","hideToolbar","hideFooter","printDoc","contentDocument","rowsMeta","state","gridRootElement","gridClone","cloneNode","gridMain","querySelector","main","overflow","contain","columnHeaders","columnHeadersInner","gridToolbarElementHeight","toolbarContainer","offsetHeight","gridFooterElementHeight","footerContainer","_gridClone$querySelec","remove","_gridClone$querySelec2","currentPageTotalHeight","columnHeaderHeight","boxSizing","container","appendChild","body","innerHTML","defaultPageStyle","pageStyle","styleElement","createTextNode","head","bodyClassName","classList","add","split","rootCandidate","getRootNode","root","constructor","name","headStyleElements","querySelectorAll","i","length","node","tagName","newHeadStyleElements","sheet","styleCSS","j","cssRules","cssText","getAttribute","attributes","attr","setAttribute","nodeName","nodeValue","process","env","NODE_ENV","contentWindow","print","handlePrintWindowAfterPrint","_previousGridState$cu","_previousGridState$cu2","removeChild","restoreState","columnVisibilityModel","unstable_enableVirtualization","exportDataAsPrint","debug","Error","exportState","pagination","visibleRowCount","setPageSize","unstable_disableVirtualization","fileName","onload","mediaQueryList","matchMedia","addEventListener","mql","isAfterPrint","matches","printExportApi","addExportMenuButtons","initialValue","_options$printOptions","printOptions","disableToolbarButton","component","componentName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument } from '@mui/utils';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridExpandedRowCountSelector } from '../filter/gridFilterSelector';\nimport { gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector } from '../columns/gridColumnsSelector';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getColumnsToExport } from './utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GridPrintExportMenuItem } from '../../../components/toolbar/GridToolbarExport';\nimport { getTotalHeaderHeight } from '../columns/gridColumnsUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction raf() {\n  return new Promise(resolve => {\n    requestAnimationFrame(() => {\n      resolve();\n    });\n  });\n}\nfunction buildPrintWindow(title) {\n  const iframeEl = document.createElement('iframe');\n  iframeEl.style.position = 'absolute';\n  iframeEl.style.width = '0px';\n  iframeEl.style.height = '0px';\n  iframeEl.title = title || document.title;\n  return iframeEl;\n}\n\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridParamsApi (method)\n */\nexport const useGridPrintExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridPrintExport');\n  const doc = React.useRef(null);\n  const previousGridState = React.useRef(null);\n  const previousColumnVisibility = React.useRef({});\n  React.useEffect(() => {\n    doc.current = ownerDocument(apiRef.current.rootElementRef.current);\n  }, [apiRef]);\n\n  // Returns a promise because updateColumns triggers state update and\n  // the new state needs to be in place before the grid can be sized correctly\n  const updateGridColumnsForPrint = React.useCallback((fields, allColumns) => new Promise(resolve => {\n    // TODO remove unused Promise\n    if (!fields && !allColumns) {\n      resolve();\n      return;\n    }\n    const exportedColumnFields = getColumnsToExport({\n      apiRef,\n      options: {\n        fields,\n        allColumns\n      }\n    }).map(column => column.field);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const newColumnVisibilityModel = {};\n    columns.forEach(column => {\n      newColumnVisibilityModel[column.field] = exportedColumnFields.includes(column.field);\n    });\n    apiRef.current.setColumnVisibilityModel(newColumnVisibilityModel);\n    resolve();\n  }), [apiRef]);\n  const handlePrintWindowLoad = React.useCallback((printWindow, options) => {\n    var _querySelector, _querySelector2;\n    const normalizeOptions = _extends({\n      copyStyles: true,\n      hideToolbar: false,\n      hideFooter: false\n    }, options);\n    const printDoc = printWindow.contentDocument;\n    if (!printDoc) {\n      return;\n    }\n    const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n    const gridRootElement = apiRef.current.rootElementRef.current;\n    const gridClone = gridRootElement.cloneNode(true);\n\n    // Allow to overflow to not hide the border of the last row\n    const gridMain = gridClone.querySelector(`.${gridClasses.main}`);\n    gridMain.style.overflow = 'visible';\n\n    // See https://support.google.com/chrome/thread/191619088?hl=en&msgid=193009642\n    gridClone.style.contain = 'size';\n    const columnHeaders = gridClone.querySelector(`.${gridClasses.columnHeaders}`);\n    const columnHeadersInner = columnHeaders.querySelector(`.${gridClasses.columnHeadersInner}`);\n    columnHeadersInner.style.width = '100%';\n    let gridToolbarElementHeight = ((_querySelector = gridRootElement.querySelector(`.${gridClasses.toolbarContainer}`)) == null ? void 0 : _querySelector.offsetHeight) || 0;\n    let gridFooterElementHeight = ((_querySelector2 = gridRootElement.querySelector(`.${gridClasses.footerContainer}`)) == null ? void 0 : _querySelector2.offsetHeight) || 0;\n    if (normalizeOptions.hideToolbar) {\n      var _gridClone$querySelec;\n      (_gridClone$querySelec = gridClone.querySelector(`.${gridClasses.toolbarContainer}`)) == null ? void 0 : _gridClone$querySelec.remove();\n      gridToolbarElementHeight = 0;\n    }\n    if (normalizeOptions.hideFooter) {\n      var _gridClone$querySelec2;\n      (_gridClone$querySelec2 = gridClone.querySelector(`.${gridClasses.footerContainer}`)) == null ? void 0 : _gridClone$querySelec2.remove();\n      gridFooterElementHeight = 0;\n    }\n\n    // Expand container height to accommodate all rows\n    gridClone.style.height = `${rowsMeta.currentPageTotalHeight + getTotalHeaderHeight(apiRef, props.columnHeaderHeight) + gridToolbarElementHeight + gridFooterElementHeight}px`;\n    // The height above does not include grid border width, so we need to exclude it\n    gridClone.style.boxSizing = 'content-box';\n\n    // printDoc.body.appendChild(gridClone); should be enough but a clone isolation bug in Safari\n    // prevents us to do it\n    const container = document.createElement('div');\n    container.appendChild(gridClone);\n    printDoc.body.innerHTML = container.innerHTML;\n    const defaultPageStyle = typeof normalizeOptions.pageStyle === 'function' ? normalizeOptions.pageStyle() : normalizeOptions.pageStyle;\n    if (typeof defaultPageStyle === 'string') {\n      // TODO custom styles should always win\n      const styleElement = printDoc.createElement('style');\n      styleElement.appendChild(printDoc.createTextNode(defaultPageStyle));\n      printDoc.head.appendChild(styleElement);\n    }\n    if (normalizeOptions.bodyClassName) {\n      printDoc.body.classList.add(...normalizeOptions.bodyClassName.split(' '));\n    }\n    if (normalizeOptions.copyStyles) {\n      const rootCandidate = gridRootElement.getRootNode();\n      const root = rootCandidate.constructor.name === 'ShadowRoot' ? rootCandidate : doc.current;\n      const headStyleElements = root.querySelectorAll(\"style, link[rel='stylesheet']\");\n      for (let i = 0; i < headStyleElements.length; i += 1) {\n        const node = headStyleElements[i];\n        if (node.tagName === 'STYLE') {\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n          const sheet = node.sheet;\n          if (sheet) {\n            let styleCSS = '';\n            // NOTE: for-of is not supported by IE\n            for (let j = 0; j < sheet.cssRules.length; j += 1) {\n              if (typeof sheet.cssRules[j].cssText === 'string') {\n                styleCSS += `${sheet.cssRules[j].cssText}\\r\\n`;\n              }\n            }\n            newHeadStyleElements.appendChild(printDoc.createTextNode(styleCSS));\n            printDoc.head.appendChild(newHeadStyleElements);\n          }\n        } else if (node.getAttribute('href')) {\n          // If `href` tag is empty, avoid loading these links\n\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n          for (let j = 0; j < node.attributes.length; j += 1) {\n            const attr = node.attributes[j];\n            if (attr) {\n              newHeadStyleElements.setAttribute(attr.nodeName, attr.nodeValue || '');\n            }\n          }\n          printDoc.head.appendChild(newHeadStyleElements);\n        }\n      }\n    }\n\n    // Trigger print\n    if (process.env.NODE_ENV !== 'test') {\n      printWindow.contentWindow.print();\n    }\n  }, [apiRef, doc, props.columnHeaderHeight]);\n  const handlePrintWindowAfterPrint = React.useCallback(printWindow => {\n    var _previousGridState$cu, _previousGridState$cu2;\n    // Remove the print iframe\n    doc.current.body.removeChild(printWindow);\n\n    // Revert grid to previous state\n    apiRef.current.restoreState(previousGridState.current || {});\n    if (!((_previousGridState$cu = previousGridState.current) != null && (_previousGridState$cu2 = _previousGridState$cu.columns) != null && _previousGridState$cu2.columnVisibilityModel)) {\n      // if the apiRef.current.exportState(); did not exported the column visibility, we update it\n      apiRef.current.setColumnVisibilityModel(previousColumnVisibility.current);\n    }\n    apiRef.current.unstable_enableVirtualization();\n\n    // Clear local state\n    previousGridState.current = null;\n    previousColumnVisibility.current = {};\n  }, [apiRef]);\n  const exportDataAsPrint = React.useCallback(async options => {\n    logger.debug(`Export data as Print`);\n    if (!apiRef.current.rootElementRef.current) {\n      throw new Error('MUI: No grid root element available.');\n    }\n    previousGridState.current = apiRef.current.exportState();\n    // It appends that the visibility model is not exported, especially if columnVisibility is not controlled\n    previousColumnVisibility.current = gridColumnVisibilityModelSelector(apiRef);\n    if (props.pagination) {\n      const visibleRowCount = gridExpandedRowCountSelector(apiRef);\n      apiRef.current.setPageSize(visibleRowCount);\n    }\n    await updateGridColumnsForPrint(options == null ? void 0 : options.fields, options == null ? void 0 : options.allColumns);\n    apiRef.current.unstable_disableVirtualization();\n    await raf(); // wait for the state changes to take action\n    const printWindow = buildPrintWindow(options == null ? void 0 : options.fileName);\n    if (process.env.NODE_ENV === 'test') {\n      doc.current.body.appendChild(printWindow);\n      // In test env, run the all pipeline without waiting for loading\n      handlePrintWindowLoad(printWindow, options);\n      handlePrintWindowAfterPrint(printWindow);\n    } else {\n      printWindow.onload = () => {\n        handlePrintWindowLoad(printWindow, options);\n        const mediaQueryList = printWindow.contentWindow.matchMedia('print');\n        mediaQueryList.addEventListener('change', mql => {\n          const isAfterPrint = mql.matches === false;\n          if (isAfterPrint) {\n            handlePrintWindowAfterPrint(printWindow);\n          }\n        });\n      };\n      doc.current.body.appendChild(printWindow);\n    }\n  }, [props, logger, apiRef, handlePrintWindowLoad, handlePrintWindowAfterPrint, updateGridColumnsForPrint]);\n  const printExportApi = {\n    exportDataAsPrint\n  };\n  useGridApiMethod(apiRef, printExportApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    var _options$printOptions;\n    if ((_options$printOptions = options.printOptions) != null && _options$printOptions.disableToolbarButton) {\n      return initialValue;\n    }\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridPrintExportMenuItem, {\n        options: options.printOptions\n      }),\n      componentName: 'printExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};"]},"metadata":{},"sourceType":"module"}