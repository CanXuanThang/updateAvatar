{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thang\\\\Downloads\\\\Code structure\\\\src\\\\modules\\\\auth\\\\pages\\\\employeeManagement\\\\layouts\\\\table\\\\Table.tsx\",\n    _s = $RefreshSig$();\n\nimport { DataGrid } from '@mui/x-data-grid';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { API_PATHS } from '../../../../../../configs/api';\nimport Cookies from 'js-cookie';\nimport { ACCESS_TOKEN_KEY } from '../../../../../../utils/constants';\nimport './Table.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: 'id',\n  headerName: 'NIK',\n  width: 95\n}, {\n  field: 'name',\n  headerName: 'Name',\n  width: 150\n}, {\n  field: 'gender',\n  headerName: 'Gender',\n  width: 70\n}, {\n  field: 'card_number',\n  headerName: 'Bank Card No.',\n  width: 130\n}, {\n  field: 'bank_account_no',\n  headerName: 'Bank Account No.',\n  width: 150\n}, {\n  field: 'family_card_number',\n  headerName: 'Family Card No.',\n  width: 150\n}, {\n  field: 'marriage_code',\n  headerName: 'Marriage Status',\n  width: 130\n}, {\n  field: 'mother_name',\n  headerName: 'Mother Name',\n  width: 150\n}, {\n  field: 'pob',\n  headerName: 'Place of birth',\n  width: 115\n}, {\n  field: 'dob',\n  headerName: 'Date of birth',\n  width: 115\n}, {\n  field: 'home_address_1',\n  headerName: 'Home Address',\n  width: 350\n}, {\n  field: 'home_address_2',\n  headerName: 'Home Address',\n  width: 350\n}, {\n  field: 'nc_id',\n  headerName: 'National Card ID No.',\n  width: 170\n}, {\n  field: 'contract_start_date',\n  headerName: 'Date Start',\n  width: 90\n}, {\n  field: 'first_contract_date',\n  headerName: 'First Contract',\n  width: 110\n}, {\n  field: 'secound_contract_date',\n  headerName: 'Secound Contract',\n  width: 130\n}, {\n  field: 'deleted_at',\n  headerName: 'End Contract',\n  width: 110\n}, {\n  field: 'department_name',\n  headerName: 'Department',\n  width: 150\n}, {\n  field: 'type',\n  headerName: 'Employee Type',\n  width: 120\n}, {\n  field: 'basic_salary',\n  headerName: 'Salary Rp.',\n  width: 90\n}, {\n  field: 'position_name',\n  headerName: 'Position',\n  width: 150\n}, {\n  field: 'operational_allowance_paid',\n  headerName: 'O/T Paid',\n  width: 80\n}, {\n  field: 'meal_allowance_paid',\n  headerName: 'Meal paid',\n  width: 90\n}, {\n  field: 'meal_allowance',\n  headerName: 'Meal Rp',\n  width: 80\n}, {\n  field: 'grade_name',\n  headerName: 'Grading',\n  width: 80\n}];\nexport default function Table() {\n  _s();\n\n  const [data, getData] = useState([]);\n  useEffect(() => {\n    axios.get(API_PATHS.getEmployee, {\n      headers: {\n        Authorization: 'Bearer ' + Cookies.get(ACCESS_TOKEN_KEY)\n      }\n    }).then(res => getData(res.data.data.data)).catch(err => console.log(err));\n  }, []);\n  console.log(data);\n  const row = data.map(data => {\n    const first_contract_date = data.contracts.slice(0, 1);\n    const secound_contract_date = data.contracts.slice(1, 2);\n    return {\n      id: data.staff_id,\n      name: data.name,\n      gender: data.gender,\n      card_number: data.card_number,\n      bank_account_no: data.bank_account_no,\n      family_card_number: data.family_card_number,\n      marriage_code: data.marriage_code,\n      mother_name: data.mother_name,\n      pob: data.pob,\n      dob: data.dob,\n      home_address_1: data.home_address_1,\n      home_address2: data.home_address_2,\n      nc_id: data.nc_id,\n      contract_start_date: data.contract_start_date,\n      first_contract_date: first_contract_date.map(item => item.contract_date),\n      secound_contract_date: secound_contract_date.map(item => item.contract_date),\n      deleted_at: data.deleted_at,\n      department_name: data.department_name,\n      type: data.type,\n      basic_salary: data.basic_salary,\n      position_name: data.position_name,\n      operational_allowance_paid: data.operational_allowance_paid,\n      meal_allowance_paid: data.meal_allowance_paid,\n      meal_allowance: data.meal_allowance,\n      grade_name: data.grade_name\n    };\n  });\n  console.log(row);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: 528,\n      width: '100%',\n      borderRadius: 12,\n      background: '#fff'\n    },\n    children: /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: row,\n      columns: columns,\n      initialState: {\n        pagination: {\n          paginationModel: {\n            page: 0,\n            pageSize: 19\n          }\n        }\n      } // pageSizeOptions={[5, 10]}\n      ,\n      checkboxSelection: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n} // import * as React from 'react';\n// import { alpha } from '@mui/material/styles';\n// import Box from '@mui/material/Box';\n// import Table from '@mui/material/Table';\n// import TableBody from '@mui/material/TableBody';\n// import TableCell from '@mui/material/TableCell';\n// import TableContainer from '@mui/material/TableContainer';\n// import TableHead from '@mui/material/TableHead';\n// import TablePagination from '@mui/material/TablePagination';\n// import TableRow from '@mui/material/TableRow';\n// import TableSortLabel from '@mui/material/TableSortLabel';\n// import Toolbar from '@mui/material/Toolbar';\n// import Typography from '@mui/material/Typography';\n// import Paper from '@mui/material/Paper';\n// import Checkbox from '@mui/material/Checkbox';\n// import IconButton from '@mui/material/IconButton';\n// import Tooltip from '@mui/material/Tooltip';\n// import FormControlLabel from '@mui/material/FormControlLabel';\n// import Switch from '@mui/material/Switch';\n// import DeleteIcon from '@mui/icons-material/Delete';\n// import FilterListIcon from '@mui/icons-material/FilterList';\n// import { visuallyHidden } from '@mui/utils';\n// interface Data {\n//   calories: number;\n//   carbs: number;\n//   fat: number;\n//   name: string;\n//   protein: number;\n// }\n// function createData(name: string, calories: number, fat: number, carbs: number, protein: number): Data {\n//   return {\n//     name,\n//     calories,\n//     fat,\n//     carbs,\n//     protein,\n//   };\n// }\n// const rows = [\n//   createData('Cupcake', 305, 3.7, 67, 4.3),\n//   createData('Donut', 452, 25.0, 51, 4.9),\n//   createData('Eclair', 262, 16.0, 24, 6.0),\n//   createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n//   createData('Gingerbread', 356, 16.0, 49, 3.9),\n//   createData('Honeycomb', 408, 3.2, 87, 6.5),\n//   createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n//   createData('Jelly Bean', 375, 0.0, 94, 0.0),\n//   createData('KitKat', 518, 26.0, 65, 7.0),\n//   createData('Lollipop', 392, 0.2, 98, 0.0),\n//   createData('Marshmallow', 318, 0, 81, 2.0),\n//   createData('Nougat', 360, 19.0, 9, 37.0),\n//   createData('Oreo', 437, 18.0, 63, 4.0),\n// ];\n// function descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\n//   if (b[orderBy] < a[orderBy]) {\n//     return -1;\n//   }\n//   if (b[orderBy] > a[orderBy]) {\n//     return 1;\n//   }\n//   return 0;\n// }\n// type Order = 'asc' | 'desc';\n// function getComparator<Key extends keyof any>(\n//   order: Order,\n//   orderBy: Key,\n// ): (a: { [key in Key]: number | string }, b: { [key in Key]: number | string }) => number {\n//   return order === 'desc'\n//     ? (a, b) => descendingComparator(a, b, orderBy)\n//     : (a, b) => -descendingComparator(a, b, orderBy);\n// }\n// // Since 2020 all major browsers ensure sort stability with Array.prototype.sort().\n// // stableSort() brings sort stability to non-modern browsers (notably IE11). If you\n// // only support modern browsers you can replace stableSort(exampleArray, exampleComparator)\n// // with exampleArray.slice().sort(exampleComparator)\n// function stableSort<T>(array: readonly T[], comparator: (a: T, b: T) => number) {\n//   const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\n//   stabilizedThis.sort((a, b) => {\n//     const order = comparator(a[0], b[0]);\n//     if (order !== 0) {\n//       return order;\n//     }\n//     return a[1] - b[1];\n//   });\n//   return stabilizedThis.map((el) => el[0]);\n// }\n// interface HeadCell {\n//   disablePadding: boolean;\n//   id: keyof Data;\n//   label: string;\n//   numeric: boolean;\n// }\n// const headCells: readonly HeadCell[] = [\n//   {\n//     id: 'name',\n//     numeric: false,\n//     disablePadding: true,\n//     label: 'Dessert (100g serving)',\n//   },\n//   {\n//     id: 'calories',\n//     numeric: true,\n//     disablePadding: false,\n//     label: 'Calories',\n//   },\n//   {\n//     id: 'fat',\n//     numeric: true,\n//     disablePadding: false,\n//     label: 'Fat (g)',\n//   },\n//   {\n//     id: 'carbs',\n//     numeric: true,\n//     disablePadding: false,\n//     label: 'Carbs (g)',\n//   },\n//   {\n//     id: 'protein',\n//     numeric: true,\n//     disablePadding: false,\n//     label: 'Protein (g)',\n//   },\n// ];\n// interface EnhancedTableProps {\n//   numSelected: number;\n//   onRequestSort: (event: React.MouseEvent<unknown>, property: keyof Data) => void;\n//   onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void;\n//   order: Order;\n//   orderBy: string;\n//   rowCount: number;\n// }\n// function EnhancedTableHead(props: EnhancedTableProps) {\n//   const { onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n//   const createSortHandler = (property: keyof Data) => (event: React.MouseEvent<unknown>) => {\n//     onRequestSort(event, property);\n//   };\n//   return (\n//     <TableHead>\n//       <TableRow>\n//         <TableCell padding=\"checkbox\">\n//           <Checkbox\n//             color=\"primary\"\n//             indeterminate={numSelected > 0 && numSelected < rowCount}\n//             checked={rowCount > 0 && numSelected === rowCount}\n//             onChange={onSelectAllClick}\n//             inputProps={{\n//               'aria-label': 'select all desserts',\n//             }}\n//           />\n//         </TableCell>\n//         {headCells.map((headCell) => (\n//           <TableCell\n//             key={headCell.id}\n//             align={headCell.numeric ? 'right' : 'left'}\n//             padding={headCell.disablePadding ? 'none' : 'normal'}\n//             sortDirection={orderBy === headCell.id ? order : false}\n//           >\n//             <TableSortLabel\n//               active={orderBy === headCell.id}\n//               direction={orderBy === headCell.id ? order : 'asc'}\n//               onClick={createSortHandler(headCell.id)}\n//             >\n//               {headCell.label}\n//               {orderBy === headCell.id ? (\n//                 <Box component=\"span\" sx={visuallyHidden}>\n//                   {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n//                 </Box>\n//               ) : null}\n//             </TableSortLabel>\n//           </TableCell>\n//         ))}\n//       </TableRow>\n//     </TableHead>\n//   );\n// }\n// export default function Tables() {\n//   const [order, setOrder] = React.useState<Order>('asc');\n//   const [orderBy, setOrderBy] = React.useState<keyof Data>('calories');\n//   const [selected, setSelected] = React.useState<readonly string[]>([]);\n//   const [page, setPage] = React.useState(0);\n//   const [dense, setDense] = React.useState(false);\n//   const [rowsPerPage, setRowsPerPage] = React.useState(5);\n//   const handleRequestSort = (event: React.MouseEvent<unknown>, property: keyof Data) => {\n//     const isAsc = orderBy === property && order === 'asc';\n//     setOrder(isAsc ? 'desc' : 'asc');\n//     setOrderBy(property);\n//   };\n//   const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     if (event.target.checked) {\n//       const newSelected = rows.map((n) => n.name);\n//       setSelected(newSelected);\n//       return;\n//     }\n//     setSelected([]);\n//   };\n//   const handleClick = (event: React.MouseEvent<unknown>, name: string) => {\n//     const selectedIndex = selected.indexOf(name);\n//     let newSelected: readonly string[] = [];\n//     if (selectedIndex === -1) {\n//       newSelected = newSelected.concat(selected, name);\n//     } else if (selectedIndex === 0) {\n//       newSelected = newSelected.concat(selected.slice(1));\n//     } else if (selectedIndex === selected.length - 1) {\n//       newSelected = newSelected.concat(selected.slice(0, -1));\n//     } else if (selectedIndex > 0) {\n//       newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n//     }\n//     setSelected(newSelected);\n//   };\n//   const handleChangePage = (event: unknown, newPage: number) => {\n//     setPage(newPage);\n//   };\n//   const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     setRowsPerPage(parseInt(event.target.value, 10));\n//     setPage(0);\n//   };\n//   const handleChangeDense = (event: React.ChangeEvent<HTMLInputElement>) => {\n//     setDense(event.target.checked);\n//   };\n//   const isSelected = (name: string) => selected.indexOf(name) !== -1;\n//   // Avoid a layout jump when reaching the last page with empty rows.\n//   const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n//   const visibleRows = React.useMemo(\n//     () => stableSort(rows, getComparator(order, orderBy)).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage),\n//     [order, orderBy, page, rowsPerPage],\n//   );\n//   return (\n//     <Box sx={{ width: '100%' }}>\n//       <Paper sx={{ width: '100%', mb: 2 }}>\n//         <TableContainer>\n//           <Table sx={{ minWidth: 750 }} aria-labelledby=\"tableTitle\" size={dense ? 'small' : 'medium'}>\n//             <EnhancedTableHead\n//               numSelected={selected.length}\n//               order={order}\n//               orderBy={orderBy}\n//               onSelectAllClick={handleSelectAllClick}\n//               onRequestSort={handleRequestSort}\n//               rowCount={rows.length}\n//             />\n//             <TableBody>\n//               {visibleRows.map((row, index) => {\n//                 const isItemSelected = isSelected(row.name);\n//                 const labelId = `enhanced-table-checkbox-${index}`;\n//                 return (\n//                   <TableRow\n//                     hover\n//                     onClick={(event) => handleClick(event, row.name)}\n//                     role=\"checkbox\"\n//                     aria-checked={isItemSelected}\n//                     tabIndex={-1}\n//                     key={row.name}\n//                     selected={isItemSelected}\n//                     sx={{ cursor: 'pointer' }}\n//                   >\n//                     <TableCell padding=\"checkbox\">\n//                       <Checkbox\n//                         color=\"primary\"\n//                         checked={isItemSelected}\n//                         inputProps={{\n//                           'aria-labelledby': labelId,\n//                         }}\n//                       />\n//                     </TableCell>\n//                     <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n//                       {row.name}\n//                     </TableCell>\n//                     <TableCell align=\"right\">{row.calories}</TableCell>\n//                     <TableCell align=\"right\">{row.fat}</TableCell>\n//                     <TableCell align=\"right\">{row.carbs}</TableCell>\n//                     <TableCell align=\"right\">{row.protein}</TableCell>\n//                   </TableRow>\n//                 );\n//               })}\n//               {emptyRows > 0 && (\n//                 <TableRow\n//                   style={{\n//                     height: (dense ? 33 : 53) * emptyRows,\n//                   }}\n//                 >\n//                   <TableCell colSpan={6} />\n//                 </TableRow>\n//               )}\n//             </TableBody>\n//           </Table>\n//         </TableContainer>\n//         {/* <TablePagination\n//           rowsPerPageOptions={[5, 10, 25]}\n//           component=\"div\"\n//           count={rows.length}\n//           rowsPerPage={rowsPerPage}\n//           page={page}\n//           onPageChange={handleChangePage}\n//           onRowsPerPageChange={handleChangeRowsPerPage}\n//         /> */}\n//       </Paper>\n//     </Box>\n//   );\n// }\n\n_s(Table, \"+8SzEMhU8cGVyeQ6sXtG4v/5EKI=\");\n\n_c = Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/src/modules/auth/pages/employeeManagement/layouts/table/Table.tsx"],"names":["DataGrid","axios","useEffect","useState","API_PATHS","Cookies","ACCESS_TOKEN_KEY","columns","field","headerName","width","Table","data","getData","get","getEmployee","headers","Authorization","then","res","catch","err","console","log","row","map","first_contract_date","contracts","slice","secound_contract_date","id","staff_id","name","gender","card_number","bank_account_no","family_card_number","marriage_code","mother_name","pob","dob","home_address_1","home_address2","home_address_2","nc_id","contract_start_date","item","contract_date","deleted_at","department_name","type","basic_salary","position_name","operational_allowance_paid","meal_allowance_paid","meal_allowance","grade_name","height","borderRadius","background","pagination","paginationModel","page","pageSize"],"mappings":"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","sourcesContent":["import { DataGrid, GridColDef } from '@mui/x-data-grid';\r\nimport axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\nimport { API_PATHS } from '../../../../../../configs/api';\r\nimport Cookies from 'js-cookie';\r\nimport { ACCESS_TOKEN_KEY } from '../../../../../../utils/constants';\r\n\r\nimport './Table.scss';\r\n\r\nconst columns: GridColDef[] = [\r\n  { field: 'id', headerName: 'NIK', width: 95 },\r\n  { field: 'name', headerName: 'Name', width: 150 },\r\n  { field: 'gender', headerName: 'Gender', width: 70 },\r\n  { field: 'card_number', headerName: 'Bank Card No.', width: 130 },\r\n  { field: 'bank_account_no', headerName: 'Bank Account No.', width: 150 },\r\n  { field: 'family_card_number', headerName: 'Family Card No.', width: 150 },\r\n  { field: 'marriage_code', headerName: 'Marriage Status', width: 130 },\r\n  { field: 'mother_name', headerName: 'Mother Name', width: 150 },\r\n  { field: 'pob', headerName: 'Place of birth', width: 115 },\r\n  { field: 'dob', headerName: 'Date of birth', width: 115 },\r\n  { field: 'home_address_1', headerName: 'Home Address', width: 350 },\r\n  { field: 'home_address_2', headerName: 'Home Address', width: 350 },\r\n  { field: 'nc_id', headerName: 'National Card ID No.', width: 170 },\r\n  { field: 'contract_start_date', headerName: 'Date Start', width: 90 },\r\n  { field: 'first_contract_date', headerName: 'First Contract', width: 110 },\r\n  { field: 'secound_contract_date', headerName: 'Secound Contract', width: 130 },\r\n  { field: 'deleted_at', headerName: 'End Contract', width: 110 },\r\n  { field: 'department_name', headerName: 'Department', width: 150 },\r\n  { field: 'type', headerName: 'Employee Type', width: 120 },\r\n  { field: 'basic_salary', headerName: 'Salary Rp.', width: 90 },\r\n  { field: 'position_name', headerName: 'Position', width: 150 },\r\n  { field: 'operational_allowance_paid', headerName: 'O/T Paid', width: 80 },\r\n  { field: 'meal_allowance_paid', headerName: 'Meal paid', width: 90 },\r\n  { field: 'meal_allowance', headerName: 'Meal Rp', width: 80 },\r\n  { field: 'grade_name', headerName: 'Grading', width: 80 },\r\n];\r\n\r\nexport default function Table() {\r\n  const [data, getData] = useState([]);\r\n  useEffect(() => {\r\n    axios\r\n      .get(API_PATHS.getEmployee, {\r\n        headers: {\r\n          Authorization: 'Bearer ' + Cookies.get(ACCESS_TOKEN_KEY),\r\n        },\r\n      })\r\n      .then((res) => getData(res.data.data.data))\r\n      .catch((err) => console.log(err));\r\n  }, []);\r\n\r\n  console.log(data);\r\n\r\n  const row = data.map((data: any) => {\r\n    const first_contract_date = data.contracts.slice(0, 1);\r\n    const secound_contract_date = data.contracts.slice(1, 2);\r\n\r\n    return {\r\n      id: data.staff_id,\r\n      name: data.name,\r\n      gender: data.gender,\r\n      card_number: data.card_number,\r\n      bank_account_no: data.bank_account_no,\r\n      family_card_number: data.family_card_number,\r\n      marriage_code: data.marriage_code,\r\n      mother_name: data.mother_name,\r\n      pob: data.pob,\r\n      dob: data.dob,\r\n      home_address_1: data.home_address_1,\r\n      home_address2: data.home_address_2,\r\n      nc_id: data.nc_id,\r\n      contract_start_date: data.contract_start_date,\r\n      first_contract_date: first_contract_date.map((item: any) => item.contract_date),\r\n      secound_contract_date: secound_contract_date.map((item: any) => item.contract_date),\r\n      deleted_at: data.deleted_at,\r\n      department_name: data.department_name,\r\n      type: data.type,\r\n      basic_salary: data.basic_salary,\r\n      position_name: data.position_name,\r\n      operational_allowance_paid: data.operational_allowance_paid,\r\n      meal_allowance_paid: data.meal_allowance_paid,\r\n      meal_allowance: data.meal_allowance,\r\n      grade_name: data.grade_name,\r\n    };\r\n  });\r\n\r\n  console.log(row);\r\n\r\n  return (\r\n    <div style={{ height: 528, width: '100%', borderRadius: 12, background: '#fff' }}>\r\n      <DataGrid\r\n        rows={row}\r\n        columns={columns}\r\n        initialState={{\r\n          pagination: {\r\n            paginationModel: { page: 0, pageSize: 19 },\r\n          },\r\n        }}\r\n        // pageSizeOptions={[5, 10]}\r\n        checkboxSelection\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n// import * as React from 'react';\r\n// import { alpha } from '@mui/material/styles';\r\n// import Box from '@mui/material/Box';\r\n// import Table from '@mui/material/Table';\r\n// import TableBody from '@mui/material/TableBody';\r\n// import TableCell from '@mui/material/TableCell';\r\n// import TableContainer from '@mui/material/TableContainer';\r\n// import TableHead from '@mui/material/TableHead';\r\n// import TablePagination from '@mui/material/TablePagination';\r\n// import TableRow from '@mui/material/TableRow';\r\n// import TableSortLabel from '@mui/material/TableSortLabel';\r\n// import Toolbar from '@mui/material/Toolbar';\r\n// import Typography from '@mui/material/Typography';\r\n// import Paper from '@mui/material/Paper';\r\n// import Checkbox from '@mui/material/Checkbox';\r\n// import IconButton from '@mui/material/IconButton';\r\n// import Tooltip from '@mui/material/Tooltip';\r\n// import FormControlLabel from '@mui/material/FormControlLabel';\r\n// import Switch from '@mui/material/Switch';\r\n// import DeleteIcon from '@mui/icons-material/Delete';\r\n// import FilterListIcon from '@mui/icons-material/FilterList';\r\n// import { visuallyHidden } from '@mui/utils';\r\n\r\n// interface Data {\r\n//   calories: number;\r\n//   carbs: number;\r\n//   fat: number;\r\n//   name: string;\r\n//   protein: number;\r\n// }\r\n\r\n// function createData(name: string, calories: number, fat: number, carbs: number, protein: number): Data {\r\n//   return {\r\n//     name,\r\n//     calories,\r\n//     fat,\r\n//     carbs,\r\n//     protein,\r\n//   };\r\n// }\r\n\r\n// const rows = [\r\n//   createData('Cupcake', 305, 3.7, 67, 4.3),\r\n//   createData('Donut', 452, 25.0, 51, 4.9),\r\n//   createData('Eclair', 262, 16.0, 24, 6.0),\r\n//   createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n//   createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n//   createData('Honeycomb', 408, 3.2, 87, 6.5),\r\n//   createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n//   createData('Jelly Bean', 375, 0.0, 94, 0.0),\r\n//   createData('KitKat', 518, 26.0, 65, 7.0),\r\n//   createData('Lollipop', 392, 0.2, 98, 0.0),\r\n//   createData('Marshmallow', 318, 0, 81, 2.0),\r\n//   createData('Nougat', 360, 19.0, 9, 37.0),\r\n//   createData('Oreo', 437, 18.0, 63, 4.0),\r\n// ];\r\n\r\n// function descendingComparator<T>(a: T, b: T, orderBy: keyof T) {\r\n//   if (b[orderBy] < a[orderBy]) {\r\n//     return -1;\r\n//   }\r\n//   if (b[orderBy] > a[orderBy]) {\r\n//     return 1;\r\n//   }\r\n//   return 0;\r\n// }\r\n\r\n// type Order = 'asc' | 'desc';\r\n\r\n// function getComparator<Key extends keyof any>(\r\n//   order: Order,\r\n//   orderBy: Key,\r\n// ): (a: { [key in Key]: number | string }, b: { [key in Key]: number | string }) => number {\r\n//   return order === 'desc'\r\n//     ? (a, b) => descendingComparator(a, b, orderBy)\r\n//     : (a, b) => -descendingComparator(a, b, orderBy);\r\n// }\r\n\r\n// // Since 2020 all major browsers ensure sort stability with Array.prototype.sort().\r\n// // stableSort() brings sort stability to non-modern browsers (notably IE11). If you\r\n// // only support modern browsers you can replace stableSort(exampleArray, exampleComparator)\r\n// // with exampleArray.slice().sort(exampleComparator)\r\n// function stableSort<T>(array: readonly T[], comparator: (a: T, b: T) => number) {\r\n//   const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);\r\n//   stabilizedThis.sort((a, b) => {\r\n//     const order = comparator(a[0], b[0]);\r\n//     if (order !== 0) {\r\n//       return order;\r\n//     }\r\n//     return a[1] - b[1];\r\n//   });\r\n//   return stabilizedThis.map((el) => el[0]);\r\n// }\r\n\r\n// interface HeadCell {\r\n//   disablePadding: boolean;\r\n//   id: keyof Data;\r\n//   label: string;\r\n//   numeric: boolean;\r\n// }\r\n\r\n// const headCells: readonly HeadCell[] = [\r\n//   {\r\n//     id: 'name',\r\n//     numeric: false,\r\n//     disablePadding: true,\r\n//     label: 'Dessert (100g serving)',\r\n//   },\r\n//   {\r\n//     id: 'calories',\r\n//     numeric: true,\r\n//     disablePadding: false,\r\n//     label: 'Calories',\r\n//   },\r\n//   {\r\n//     id: 'fat',\r\n//     numeric: true,\r\n//     disablePadding: false,\r\n//     label: 'Fat (g)',\r\n//   },\r\n//   {\r\n//     id: 'carbs',\r\n//     numeric: true,\r\n//     disablePadding: false,\r\n//     label: 'Carbs (g)',\r\n//   },\r\n//   {\r\n//     id: 'protein',\r\n//     numeric: true,\r\n//     disablePadding: false,\r\n//     label: 'Protein (g)',\r\n//   },\r\n// ];\r\n\r\n// interface EnhancedTableProps {\r\n//   numSelected: number;\r\n//   onRequestSort: (event: React.MouseEvent<unknown>, property: keyof Data) => void;\r\n//   onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n//   order: Order;\r\n//   orderBy: string;\r\n//   rowCount: number;\r\n// }\r\n\r\n// function EnhancedTableHead(props: EnhancedTableProps) {\r\n//   const { onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n//   const createSortHandler = (property: keyof Data) => (event: React.MouseEvent<unknown>) => {\r\n//     onRequestSort(event, property);\r\n//   };\r\n\r\n//   return (\r\n//     <TableHead>\r\n//       <TableRow>\r\n//         <TableCell padding=\"checkbox\">\r\n//           <Checkbox\r\n//             color=\"primary\"\r\n//             indeterminate={numSelected > 0 && numSelected < rowCount}\r\n//             checked={rowCount > 0 && numSelected === rowCount}\r\n//             onChange={onSelectAllClick}\r\n//             inputProps={{\r\n//               'aria-label': 'select all desserts',\r\n//             }}\r\n//           />\r\n//         </TableCell>\r\n//         {headCells.map((headCell) => (\r\n//           <TableCell\r\n//             key={headCell.id}\r\n//             align={headCell.numeric ? 'right' : 'left'}\r\n//             padding={headCell.disablePadding ? 'none' : 'normal'}\r\n//             sortDirection={orderBy === headCell.id ? order : false}\r\n//           >\r\n//             <TableSortLabel\r\n//               active={orderBy === headCell.id}\r\n//               direction={orderBy === headCell.id ? order : 'asc'}\r\n//               onClick={createSortHandler(headCell.id)}\r\n//             >\r\n//               {headCell.label}\r\n//               {orderBy === headCell.id ? (\r\n//                 <Box component=\"span\" sx={visuallyHidden}>\r\n//                   {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n//                 </Box>\r\n//               ) : null}\r\n//             </TableSortLabel>\r\n//           </TableCell>\r\n//         ))}\r\n//       </TableRow>\r\n//     </TableHead>\r\n//   );\r\n// }\r\n\r\n// export default function Tables() {\r\n//   const [order, setOrder] = React.useState<Order>('asc');\r\n//   const [orderBy, setOrderBy] = React.useState<keyof Data>('calories');\r\n//   const [selected, setSelected] = React.useState<readonly string[]>([]);\r\n//   const [page, setPage] = React.useState(0);\r\n//   const [dense, setDense] = React.useState(false);\r\n//   const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n//   const handleRequestSort = (event: React.MouseEvent<unknown>, property: keyof Data) => {\r\n//     const isAsc = orderBy === property && order === 'asc';\r\n//     setOrder(isAsc ? 'desc' : 'asc');\r\n//     setOrderBy(property);\r\n//   };\r\n\r\n//   const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n//     if (event.target.checked) {\r\n//       const newSelected = rows.map((n) => n.name);\r\n//       setSelected(newSelected);\r\n//       return;\r\n//     }\r\n//     setSelected([]);\r\n//   };\r\n\r\n//   const handleClick = (event: React.MouseEvent<unknown>, name: string) => {\r\n//     const selectedIndex = selected.indexOf(name);\r\n//     let newSelected: readonly string[] = [];\r\n\r\n//     if (selectedIndex === -1) {\r\n//       newSelected = newSelected.concat(selected, name);\r\n//     } else if (selectedIndex === 0) {\r\n//       newSelected = newSelected.concat(selected.slice(1));\r\n//     } else if (selectedIndex === selected.length - 1) {\r\n//       newSelected = newSelected.concat(selected.slice(0, -1));\r\n//     } else if (selectedIndex > 0) {\r\n//       newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\r\n//     }\r\n\r\n//     setSelected(newSelected);\r\n//   };\r\n\r\n//   const handleChangePage = (event: unknown, newPage: number) => {\r\n//     setPage(newPage);\r\n//   };\r\n\r\n//   const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n//     setRowsPerPage(parseInt(event.target.value, 10));\r\n//     setPage(0);\r\n//   };\r\n\r\n//   const handleChangeDense = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n//     setDense(event.target.checked);\r\n//   };\r\n\r\n//   const isSelected = (name: string) => selected.indexOf(name) !== -1;\r\n\r\n//   // Avoid a layout jump when reaching the last page with empty rows.\r\n//   const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\r\n\r\n//   const visibleRows = React.useMemo(\r\n//     () => stableSort(rows, getComparator(order, orderBy)).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage),\r\n//     [order, orderBy, page, rowsPerPage],\r\n//   );\r\n\r\n//   return (\r\n//     <Box sx={{ width: '100%' }}>\r\n//       <Paper sx={{ width: '100%', mb: 2 }}>\r\n//         <TableContainer>\r\n//           <Table sx={{ minWidth: 750 }} aria-labelledby=\"tableTitle\" size={dense ? 'small' : 'medium'}>\r\n//             <EnhancedTableHead\r\n//               numSelected={selected.length}\r\n//               order={order}\r\n//               orderBy={orderBy}\r\n//               onSelectAllClick={handleSelectAllClick}\r\n//               onRequestSort={handleRequestSort}\r\n//               rowCount={rows.length}\r\n//             />\r\n//             <TableBody>\r\n//               {visibleRows.map((row, index) => {\r\n//                 const isItemSelected = isSelected(row.name);\r\n//                 const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n//                 return (\r\n//                   <TableRow\r\n//                     hover\r\n//                     onClick={(event) => handleClick(event, row.name)}\r\n//                     role=\"checkbox\"\r\n//                     aria-checked={isItemSelected}\r\n//                     tabIndex={-1}\r\n//                     key={row.name}\r\n//                     selected={isItemSelected}\r\n//                     sx={{ cursor: 'pointer' }}\r\n//                   >\r\n//                     <TableCell padding=\"checkbox\">\r\n//                       <Checkbox\r\n//                         color=\"primary\"\r\n//                         checked={isItemSelected}\r\n//                         inputProps={{\r\n//                           'aria-labelledby': labelId,\r\n//                         }}\r\n//                       />\r\n//                     </TableCell>\r\n//                     <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n//                       {row.name}\r\n//                     </TableCell>\r\n//                     <TableCell align=\"right\">{row.calories}</TableCell>\r\n//                     <TableCell align=\"right\">{row.fat}</TableCell>\r\n//                     <TableCell align=\"right\">{row.carbs}</TableCell>\r\n//                     <TableCell align=\"right\">{row.protein}</TableCell>\r\n//                   </TableRow>\r\n//                 );\r\n//               })}\r\n//               {emptyRows > 0 && (\r\n//                 <TableRow\r\n//                   style={{\r\n//                     height: (dense ? 33 : 53) * emptyRows,\r\n//                   }}\r\n//                 >\r\n//                   <TableCell colSpan={6} />\r\n//                 </TableRow>\r\n//               )}\r\n//             </TableBody>\r\n//           </Table>\r\n//         </TableContainer>\r\n//         {/* <TablePagination\r\n//           rowsPerPageOptions={[5, 10, 25]}\r\n//           component=\"div\"\r\n//           count={rows.length}\r\n//           rowsPerPage={rowsPerPage}\r\n//           page={page}\r\n//           onPageChange={handleChangePage}\r\n//           onRowsPerPageChange={handleChangeRowsPerPage}\r\n//         /> */}\r\n//       </Paper>\r\n//     </Box>\r\n//   );\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}