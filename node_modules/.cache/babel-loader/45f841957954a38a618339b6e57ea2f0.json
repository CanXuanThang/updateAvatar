{"ast":null,"code":"import * as React from 'react';\nimport { getGridCellElement, getGridColumnHeaderElement, getGridRowElement } from '../../../utils/domUtils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nlet warnedOnceMissingColumn = false;\n\nfunction warnMissingColumn(field) {\n  console.warn([`MUI: You are calling getValue('${field}') but the column \\`${field}\\` is not defined.`, `Instead, you can access the data from \\`params.row.${field}\\`.`].join('\\n'));\n  warnedOnceMissingColumn = true;\n}\n/**\n * @requires useGridColumns (method)\n * @requires useGridRows (method)\n * @requires useGridFocus (state)\n * @requires useGridEditing (method)\n * TODO: Impossible priority - useGridEditing also needs to be after useGridParamsApi\n * TODO: Impossible priority - useGridFocus also needs to be after useGridParamsApi\n */\n\n\nexport function useGridParamsApi(apiRef) {\n  const getColumnHeaderParams = React.useCallback(field => ({\n    field,\n    colDef: apiRef.current.getColumn(field)\n  }), [apiRef]);\n  const getRowParams = React.useCallback(id => {\n    const row = apiRef.current.getRow(id);\n\n    if (!row) {\n      throw new Error(`No row with id #${id} found`);\n    }\n\n    const params = {\n      id,\n      columns: apiRef.current.getAllColumns(),\n      row\n    };\n    return params;\n  }, [apiRef]);\n  const getBaseCellParams = React.useCallback((id, field) => {\n    const row = apiRef.current.getRow(id);\n    const rowNode = apiRef.current.getRowNode(id);\n\n    if (!row || !rowNode) {\n      throw new Error(`No row with id #${id} found`);\n    }\n\n    const cellFocus = gridFocusCellSelector(apiRef);\n    const cellTabIndex = gridTabIndexCellSelector(apiRef);\n    const params = {\n      id,\n      field,\n      row,\n      rowNode,\n      value: row[field],\n      colDef: apiRef.current.getColumn(field),\n      cellMode: apiRef.current.getCellMode(id, field),\n      api: apiRef.current,\n      hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,\n      tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1\n    };\n    return params;\n  }, [apiRef]);\n  const getCellParams = React.useCallback((id, field) => {\n    const colDef = apiRef.current.getColumn(field);\n    const value = apiRef.current.getCellValue(id, field);\n    const row = apiRef.current.getRow(id);\n    const rowNode = apiRef.current.getRowNode(id);\n\n    if (!row || !rowNode) {\n      throw new Error(`No row with id #${id} found`);\n    }\n\n    const cellFocus = gridFocusCellSelector(apiRef);\n    const cellTabIndex = gridTabIndexCellSelector(apiRef);\n    const params = {\n      id,\n      field,\n      row,\n      rowNode,\n      colDef,\n      cellMode: apiRef.current.getCellMode(id, field),\n      hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,\n      tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1,\n      value,\n      formattedValue: value\n    };\n\n    if (colDef && colDef.valueFormatter) {\n      params.formattedValue = colDef.valueFormatter({\n        id,\n        field: params.field,\n        value: params.value,\n        api: apiRef.current\n      });\n    }\n\n    params.isEditable = colDef && apiRef.current.isCellEditable(params);\n    return params;\n  }, [apiRef]);\n  const getCellValue = React.useCallback((id, field) => {\n    const colDef = apiRef.current.getColumn(field);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!colDef && !warnedOnceMissingColumn) {\n        warnMissingColumn(field);\n      }\n    }\n\n    if (!colDef || !colDef.valueGetter) {\n      const rowModel = apiRef.current.getRow(id);\n\n      if (!rowModel) {\n        throw new Error(`No row with id #${id} found`);\n      }\n\n      return rowModel[field];\n    }\n\n    return colDef.valueGetter(getBaseCellParams(id, field));\n  }, [apiRef, getBaseCellParams]);\n  const getColumnHeaderElement = React.useCallback(field => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n\n    return getGridColumnHeaderElement(apiRef.current.rootElementRef.current, field);\n  }, [apiRef]);\n  const getRowElement = React.useCallback(id => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n\n    return getGridRowElement(apiRef.current.rootElementRef.current, id);\n  }, [apiRef]);\n  const getCellElement = React.useCallback((id, field) => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n\n    return getGridCellElement(apiRef.current.rootElementRef.current, {\n      id,\n      field\n    });\n  }, [apiRef]);\n  const paramsApi = {\n    getCellValue,\n    getCellParams,\n    getCellElement,\n    getRowParams,\n    getRowElement,\n    getColumnHeaderParams,\n    getColumnHeaderElement\n  };\n  useGridApiMethod(apiRef, paramsApi, 'public');\n}","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/node_modules/@mui/x-data-grid/hooks/features/rows/useGridParamsApi.js"],"names":["React","getGridCellElement","getGridColumnHeaderElement","getGridRowElement","useGridApiMethod","gridFocusCellSelector","gridTabIndexCellSelector","warnedOnceMissingColumn","warnMissingColumn","field","console","warn","join","useGridParamsApi","apiRef","getColumnHeaderParams","useCallback","colDef","current","getColumn","getRowParams","id","row","getRow","Error","params","columns","getAllColumns","getBaseCellParams","rowNode","getRowNode","cellFocus","cellTabIndex","value","cellMode","getCellMode","api","hasFocus","tabIndex","getCellParams","getCellValue","formattedValue","valueFormatter","isEditable","isCellEditable","process","env","NODE_ENV","valueGetter","rowModel","getColumnHeaderElement","rootElementRef","getRowElement","getCellElement","paramsApi"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,kBAAT,EAA6BC,0BAA7B,EAAyDC,iBAAzD,QAAkF,yBAAlF;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,qBAAT,EAAgCC,wBAAhC,QAAgE,iCAAhE;AACA,IAAIC,uBAAuB,GAAG,KAA9B;;AACA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAChCC,EAAAA,OAAO,CAACC,IAAR,CAAa,CAAE,kCAAiCF,KAAM,uBAAsBA,KAAM,oBAArE,EAA2F,sDAAqDA,KAAM,KAAtJ,EAA4JG,IAA5J,CAAiK,IAAjK,CAAb;AACAL,EAAAA,uBAAuB,GAAG,IAA1B;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASM,gBAAT,CAA0BC,MAA1B,EAAkC;AACvC,QAAMC,qBAAqB,GAAGf,KAAK,CAACgB,WAAN,CAAkBP,KAAK,KAAK;AACxDA,IAAAA,KADwD;AAExDQ,IAAAA,MAAM,EAAEH,MAAM,CAACI,OAAP,CAAeC,SAAf,CAAyBV,KAAzB;AAFgD,GAAL,CAAvB,EAG1B,CAACK,MAAD,CAH0B,CAA9B;AAIA,QAAMM,YAAY,GAAGpB,KAAK,CAACgB,WAAN,CAAkBK,EAAE,IAAI;AAC3C,UAAMC,GAAG,GAAGR,MAAM,CAACI,OAAP,CAAeK,MAAf,CAAsBF,EAAtB,CAAZ;;AACA,QAAI,CAACC,GAAL,EAAU;AACR,YAAM,IAAIE,KAAJ,CAAW,mBAAkBH,EAAG,QAAhC,CAAN;AACD;;AACD,UAAMI,MAAM,GAAG;AACbJ,MAAAA,EADa;AAEbK,MAAAA,OAAO,EAAEZ,MAAM,CAACI,OAAP,CAAeS,aAAf,EAFI;AAGbL,MAAAA;AAHa,KAAf;AAKA,WAAOG,MAAP;AACD,GAXoB,EAWlB,CAACX,MAAD,CAXkB,CAArB;AAYA,QAAMc,iBAAiB,GAAG5B,KAAK,CAACgB,WAAN,CAAkB,CAACK,EAAD,EAAKZ,KAAL,KAAe;AACzD,UAAMa,GAAG,GAAGR,MAAM,CAACI,OAAP,CAAeK,MAAf,CAAsBF,EAAtB,CAAZ;AACA,UAAMQ,OAAO,GAAGf,MAAM,CAACI,OAAP,CAAeY,UAAf,CAA0BT,EAA1B,CAAhB;;AACA,QAAI,CAACC,GAAD,IAAQ,CAACO,OAAb,EAAsB;AACpB,YAAM,IAAIL,KAAJ,CAAW,mBAAkBH,EAAG,QAAhC,CAAN;AACD;;AACD,UAAMU,SAAS,GAAG1B,qBAAqB,CAACS,MAAD,CAAvC;AACA,UAAMkB,YAAY,GAAG1B,wBAAwB,CAACQ,MAAD,CAA7C;AACA,UAAMW,MAAM,GAAG;AACbJ,MAAAA,EADa;AAEbZ,MAAAA,KAFa;AAGba,MAAAA,GAHa;AAIbO,MAAAA,OAJa;AAKbI,MAAAA,KAAK,EAAEX,GAAG,CAACb,KAAD,CALG;AAMbQ,MAAAA,MAAM,EAAEH,MAAM,CAACI,OAAP,CAAeC,SAAf,CAAyBV,KAAzB,CANK;AAObyB,MAAAA,QAAQ,EAAEpB,MAAM,CAACI,OAAP,CAAeiB,WAAf,CAA2Bd,EAA3B,EAA+BZ,KAA/B,CAPG;AAQb2B,MAAAA,GAAG,EAAEtB,MAAM,CAACI,OARC;AASbmB,MAAAA,QAAQ,EAAEN,SAAS,KAAK,IAAd,IAAsBA,SAAS,CAACtB,KAAV,KAAoBA,KAA1C,IAAmDsB,SAAS,CAACV,EAAV,KAAiBA,EATjE;AAUbiB,MAAAA,QAAQ,EAAEN,YAAY,IAAIA,YAAY,CAACvB,KAAb,KAAuBA,KAAvC,IAAgDuB,YAAY,CAACX,EAAb,KAAoBA,EAApE,GAAyE,CAAzE,GAA6E,CAAC;AAV3E,KAAf;AAYA,WAAOI,MAAP;AACD,GArByB,EAqBvB,CAACX,MAAD,CArBuB,CAA1B;AAsBA,QAAMyB,aAAa,GAAGvC,KAAK,CAACgB,WAAN,CAAkB,CAACK,EAAD,EAAKZ,KAAL,KAAe;AACrD,UAAMQ,MAAM,GAAGH,MAAM,CAACI,OAAP,CAAeC,SAAf,CAAyBV,KAAzB,CAAf;AACA,UAAMwB,KAAK,GAAGnB,MAAM,CAACI,OAAP,CAAesB,YAAf,CAA4BnB,EAA5B,EAAgCZ,KAAhC,CAAd;AACA,UAAMa,GAAG,GAAGR,MAAM,CAACI,OAAP,CAAeK,MAAf,CAAsBF,EAAtB,CAAZ;AACA,UAAMQ,OAAO,GAAGf,MAAM,CAACI,OAAP,CAAeY,UAAf,CAA0BT,EAA1B,CAAhB;;AACA,QAAI,CAACC,GAAD,IAAQ,CAACO,OAAb,EAAsB;AACpB,YAAM,IAAIL,KAAJ,CAAW,mBAAkBH,EAAG,QAAhC,CAAN;AACD;;AACD,UAAMU,SAAS,GAAG1B,qBAAqB,CAACS,MAAD,CAAvC;AACA,UAAMkB,YAAY,GAAG1B,wBAAwB,CAACQ,MAAD,CAA7C;AACA,UAAMW,MAAM,GAAG;AACbJ,MAAAA,EADa;AAEbZ,MAAAA,KAFa;AAGba,MAAAA,GAHa;AAIbO,MAAAA,OAJa;AAKbZ,MAAAA,MALa;AAMbiB,MAAAA,QAAQ,EAAEpB,MAAM,CAACI,OAAP,CAAeiB,WAAf,CAA2Bd,EAA3B,EAA+BZ,KAA/B,CANG;AAOb4B,MAAAA,QAAQ,EAAEN,SAAS,KAAK,IAAd,IAAsBA,SAAS,CAACtB,KAAV,KAAoBA,KAA1C,IAAmDsB,SAAS,CAACV,EAAV,KAAiBA,EAPjE;AAQbiB,MAAAA,QAAQ,EAAEN,YAAY,IAAIA,YAAY,CAACvB,KAAb,KAAuBA,KAAvC,IAAgDuB,YAAY,CAACX,EAAb,KAAoBA,EAApE,GAAyE,CAAzE,GAA6E,CAAC,CAR3E;AASbY,MAAAA,KATa;AAUbQ,MAAAA,cAAc,EAAER;AAVH,KAAf;;AAYA,QAAIhB,MAAM,IAAIA,MAAM,CAACyB,cAArB,EAAqC;AACnCjB,MAAAA,MAAM,CAACgB,cAAP,GAAwBxB,MAAM,CAACyB,cAAP,CAAsB;AAC5CrB,QAAAA,EAD4C;AAE5CZ,QAAAA,KAAK,EAAEgB,MAAM,CAAChB,KAF8B;AAG5CwB,QAAAA,KAAK,EAAER,MAAM,CAACQ,KAH8B;AAI5CG,QAAAA,GAAG,EAAEtB,MAAM,CAACI;AAJgC,OAAtB,CAAxB;AAMD;;AACDO,IAAAA,MAAM,CAACkB,UAAP,GAAoB1B,MAAM,IAAIH,MAAM,CAACI,OAAP,CAAe0B,cAAf,CAA8BnB,MAA9B,CAA9B;AACA,WAAOA,MAAP;AACD,GAhCqB,EAgCnB,CAACX,MAAD,CAhCmB,CAAtB;AAiCA,QAAM0B,YAAY,GAAGxC,KAAK,CAACgB,WAAN,CAAkB,CAACK,EAAD,EAAKZ,KAAL,KAAe;AACpD,UAAMQ,MAAM,GAAGH,MAAM,CAACI,OAAP,CAAeC,SAAf,CAAyBV,KAAzB,CAAf;;AACA,QAAIoC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAI,CAAC9B,MAAD,IAAW,CAACV,uBAAhB,EAAyC;AACvCC,QAAAA,iBAAiB,CAACC,KAAD,CAAjB;AACD;AACF;;AACD,QAAI,CAACQ,MAAD,IAAW,CAACA,MAAM,CAAC+B,WAAvB,EAAoC;AAClC,YAAMC,QAAQ,GAAGnC,MAAM,CAACI,OAAP,CAAeK,MAAf,CAAsBF,EAAtB,CAAjB;;AACA,UAAI,CAAC4B,QAAL,EAAe;AACb,cAAM,IAAIzB,KAAJ,CAAW,mBAAkBH,EAAG,QAAhC,CAAN;AACD;;AACD,aAAO4B,QAAQ,CAACxC,KAAD,CAAf;AACD;;AACD,WAAOQ,MAAM,CAAC+B,WAAP,CAAmBpB,iBAAiB,CAACP,EAAD,EAAKZ,KAAL,CAApC,CAAP;AACD,GAfoB,EAelB,CAACK,MAAD,EAASc,iBAAT,CAfkB,CAArB;AAgBA,QAAMsB,sBAAsB,GAAGlD,KAAK,CAACgB,WAAN,CAAkBP,KAAK,IAAI;AACxD,QAAI,CAACK,MAAM,CAACI,OAAP,CAAeiC,cAAf,CAA8BjC,OAAnC,EAA4C;AAC1C,aAAO,IAAP;AACD;;AACD,WAAOhB,0BAA0B,CAACY,MAAM,CAACI,OAAP,CAAeiC,cAAf,CAA8BjC,OAA/B,EAAwCT,KAAxC,CAAjC;AACD,GAL8B,EAK5B,CAACK,MAAD,CAL4B,CAA/B;AAMA,QAAMsC,aAAa,GAAGpD,KAAK,CAACgB,WAAN,CAAkBK,EAAE,IAAI;AAC5C,QAAI,CAACP,MAAM,CAACI,OAAP,CAAeiC,cAAf,CAA8BjC,OAAnC,EAA4C;AAC1C,aAAO,IAAP;AACD;;AACD,WAAOf,iBAAiB,CAACW,MAAM,CAACI,OAAP,CAAeiC,cAAf,CAA8BjC,OAA/B,EAAwCG,EAAxC,CAAxB;AACD,GALqB,EAKnB,CAACP,MAAD,CALmB,CAAtB;AAMA,QAAMuC,cAAc,GAAGrD,KAAK,CAACgB,WAAN,CAAkB,CAACK,EAAD,EAAKZ,KAAL,KAAe;AACtD,QAAI,CAACK,MAAM,CAACI,OAAP,CAAeiC,cAAf,CAA8BjC,OAAnC,EAA4C;AAC1C,aAAO,IAAP;AACD;;AACD,WAAOjB,kBAAkB,CAACa,MAAM,CAACI,OAAP,CAAeiC,cAAf,CAA8BjC,OAA/B,EAAwC;AAC/DG,MAAAA,EAD+D;AAE/DZ,MAAAA;AAF+D,KAAxC,CAAzB;AAID,GARsB,EAQpB,CAACK,MAAD,CARoB,CAAvB;AASA,QAAMwC,SAAS,GAAG;AAChBd,IAAAA,YADgB;AAEhBD,IAAAA,aAFgB;AAGhBc,IAAAA,cAHgB;AAIhBjC,IAAAA,YAJgB;AAKhBgC,IAAAA,aALgB;AAMhBrC,IAAAA,qBANgB;AAOhBmC,IAAAA;AAPgB,GAAlB;AASA9C,EAAAA,gBAAgB,CAACU,MAAD,EAASwC,SAAT,EAAoB,QAApB,CAAhB;AACD","sourcesContent":["import * as React from 'react';\nimport { getGridCellElement, getGridColumnHeaderElement, getGridRowElement } from '../../../utils/domUtils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nlet warnedOnceMissingColumn = false;\nfunction warnMissingColumn(field) {\n  console.warn([`MUI: You are calling getValue('${field}') but the column \\`${field}\\` is not defined.`, `Instead, you can access the data from \\`params.row.${field}\\`.`].join('\\n'));\n  warnedOnceMissingColumn = true;\n}\n\n/**\n * @requires useGridColumns (method)\n * @requires useGridRows (method)\n * @requires useGridFocus (state)\n * @requires useGridEditing (method)\n * TODO: Impossible priority - useGridEditing also needs to be after useGridParamsApi\n * TODO: Impossible priority - useGridFocus also needs to be after useGridParamsApi\n */\nexport function useGridParamsApi(apiRef) {\n  const getColumnHeaderParams = React.useCallback(field => ({\n    field,\n    colDef: apiRef.current.getColumn(field)\n  }), [apiRef]);\n  const getRowParams = React.useCallback(id => {\n    const row = apiRef.current.getRow(id);\n    if (!row) {\n      throw new Error(`No row with id #${id} found`);\n    }\n    const params = {\n      id,\n      columns: apiRef.current.getAllColumns(),\n      row\n    };\n    return params;\n  }, [apiRef]);\n  const getBaseCellParams = React.useCallback((id, field) => {\n    const row = apiRef.current.getRow(id);\n    const rowNode = apiRef.current.getRowNode(id);\n    if (!row || !rowNode) {\n      throw new Error(`No row with id #${id} found`);\n    }\n    const cellFocus = gridFocusCellSelector(apiRef);\n    const cellTabIndex = gridTabIndexCellSelector(apiRef);\n    const params = {\n      id,\n      field,\n      row,\n      rowNode,\n      value: row[field],\n      colDef: apiRef.current.getColumn(field),\n      cellMode: apiRef.current.getCellMode(id, field),\n      api: apiRef.current,\n      hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,\n      tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1\n    };\n    return params;\n  }, [apiRef]);\n  const getCellParams = React.useCallback((id, field) => {\n    const colDef = apiRef.current.getColumn(field);\n    const value = apiRef.current.getCellValue(id, field);\n    const row = apiRef.current.getRow(id);\n    const rowNode = apiRef.current.getRowNode(id);\n    if (!row || !rowNode) {\n      throw new Error(`No row with id #${id} found`);\n    }\n    const cellFocus = gridFocusCellSelector(apiRef);\n    const cellTabIndex = gridTabIndexCellSelector(apiRef);\n    const params = {\n      id,\n      field,\n      row,\n      rowNode,\n      colDef,\n      cellMode: apiRef.current.getCellMode(id, field),\n      hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,\n      tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1,\n      value,\n      formattedValue: value\n    };\n    if (colDef && colDef.valueFormatter) {\n      params.formattedValue = colDef.valueFormatter({\n        id,\n        field: params.field,\n        value: params.value,\n        api: apiRef.current\n      });\n    }\n    params.isEditable = colDef && apiRef.current.isCellEditable(params);\n    return params;\n  }, [apiRef]);\n  const getCellValue = React.useCallback((id, field) => {\n    const colDef = apiRef.current.getColumn(field);\n    if (process.env.NODE_ENV !== 'production') {\n      if (!colDef && !warnedOnceMissingColumn) {\n        warnMissingColumn(field);\n      }\n    }\n    if (!colDef || !colDef.valueGetter) {\n      const rowModel = apiRef.current.getRow(id);\n      if (!rowModel) {\n        throw new Error(`No row with id #${id} found`);\n      }\n      return rowModel[field];\n    }\n    return colDef.valueGetter(getBaseCellParams(id, field));\n  }, [apiRef, getBaseCellParams]);\n  const getColumnHeaderElement = React.useCallback(field => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n    return getGridColumnHeaderElement(apiRef.current.rootElementRef.current, field);\n  }, [apiRef]);\n  const getRowElement = React.useCallback(id => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n    return getGridRowElement(apiRef.current.rootElementRef.current, id);\n  }, [apiRef]);\n  const getCellElement = React.useCallback((id, field) => {\n    if (!apiRef.current.rootElementRef.current) {\n      return null;\n    }\n    return getGridCellElement(apiRef.current.rootElementRef.current, {\n      id,\n      field\n    });\n  }, [apiRef]);\n  const paramsApi = {\n    getCellValue,\n    getCellParams,\n    getCellElement,\n    getRowParams,\n    getRowElement,\n    getColumnHeaderParams,\n    getColumnHeaderElement\n  };\n  useGridApiMethod(apiRef, paramsApi, 'public');\n}"]},"metadata":{},"sourceType":"module"}