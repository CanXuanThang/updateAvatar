{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnFieldsSelector, gridColumnDefinitionsSelector, gridColumnLookupSelector, gridColumnsStateSelector, gridColumnVisibilityModelSelector, gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from './gridColumnsSelector';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridRegisterPipeProcessor, useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nimport { hydrateColumnsWidth, createColumnsState, mergeColumnsState, COLUMNS_DIMENSION_PROPERTIES } from './gridColumnsUtils';\nimport { GridPreferencePanelsValue } from '../preferencesPanel';\nimport { getGridDefaultColumnTypes } from '../../../colDef';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultColumnTypes = getGridDefaultColumnTypes();\nexport const columnsStateInitializer = (state, props, apiRef) => {\n  var _props$initialState, _ref, _props$columnVisibili, _props$initialState2, _props$initialState2$;\n\n  const columnsState = createColumnsState({\n    apiRef,\n    columnTypes: defaultColumnTypes,\n    columnsToUpsert: props.columns,\n    initialState: (_props$initialState = props.initialState) == null ? void 0 : _props$initialState.columns,\n    columnVisibilityModel: (_ref = (_props$columnVisibili = props.columnVisibilityModel) != null ? _props$columnVisibili : (_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.columns) == null ? void 0 : _props$initialState2$.columnVisibilityModel) != null ? _ref : {},\n    keepOnlyColumnsToUpsert: true\n  });\n  return _extends({}, state, {\n    columns: columnsState\n  });\n};\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridDimensions (method, event) - can be after\n * TODO: Impossible priority - useGridParamsApi also needs to be after useGridColumns\n */\n\nexport function useGridColumns(apiRef, props) {\n  var _props$initialState4, _props$slotProps2;\n\n  const logger = useGridLogger(apiRef, 'useGridColumns');\n  const columnTypes = defaultColumnTypes;\n  const previousColumnsProp = React.useRef(props.columns);\n  const previousColumnTypesProp = React.useRef(columnTypes);\n  apiRef.current.registerControlState({\n    stateId: 'visibleColumns',\n    propModel: props.columnVisibilityModel,\n    propOnChange: props.onColumnVisibilityModelChange,\n    stateSelector: gridColumnVisibilityModelSelector,\n    changeEvent: 'columnVisibilityModelChange'\n  });\n  const setGridColumnsState = React.useCallback(columnsState => {\n    logger.debug('Updating columns state.');\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n  }, [logger, apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const getColumn = React.useCallback(field => gridColumnLookupSelector(apiRef)[field], [apiRef]);\n  const getAllColumns = React.useCallback(() => gridColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getVisibleColumns = React.useCallback(() => gridVisibleColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getColumnIndex = React.useCallback((field, useVisibleColumns = true) => {\n    const columns = useVisibleColumns ? gridVisibleColumnDefinitionsSelector(apiRef) : gridColumnDefinitionsSelector(apiRef);\n    return columns.findIndex(col => col.field === field);\n  }, [apiRef]);\n  const getColumnPosition = React.useCallback(field => {\n    const index = getColumnIndex(field);\n    return gridColumnPositionsSelector(apiRef)[index];\n  }, [apiRef, getColumnIndex]);\n  const setColumnVisibilityModel = React.useCallback(model => {\n    const currentModel = gridColumnVisibilityModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      apiRef.current.setState(state => _extends({}, state, {\n        columns: createColumnsState({\n          apiRef,\n          columnTypes,\n          columnsToUpsert: [],\n          initialState: undefined,\n          columnVisibilityModel: model,\n          keepOnlyColumnsToUpsert: false\n        })\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, columnTypes]);\n  const updateColumns = React.useCallback(columns => {\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      columnsToUpsert: columns,\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, setGridColumnsState, columnTypes]);\n  const setColumnVisibility = React.useCallback((field, isVisible) => {\n    var _columnVisibilityMode;\n\n    const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);\n    const isCurrentlyVisible = (_columnVisibilityMode = columnVisibilityModel[field]) != null ? _columnVisibilityMode : true;\n\n    if (isVisible !== isCurrentlyVisible) {\n      const newModel = _extends({}, columnVisibilityModel, {\n        [field]: isVisible\n      });\n\n      apiRef.current.setColumnVisibilityModel(newModel);\n    }\n  }, [apiRef]);\n  const getColumnIndexRelativeToVisibleColumns = React.useCallback(field => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    return allColumns.findIndex(col => col === field);\n  }, [apiRef]);\n  const setColumnIndex = React.useCallback((field, targetIndexPosition) => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    const oldIndexPosition = getColumnIndexRelativeToVisibleColumns(field);\n\n    if (oldIndexPosition === targetIndexPosition) {\n      return;\n    }\n\n    logger.debug(`Moving column ${field} to index ${targetIndexPosition}`);\n    const updatedColumns = [...allColumns];\n    const fieldRemoved = updatedColumns.splice(oldIndexPosition, 1)[0];\n    updatedColumns.splice(targetIndexPosition, 0, fieldRemoved);\n    setGridColumnsState(_extends({}, gridColumnsStateSelector(apiRef.current.state), {\n      orderedFields: updatedColumns\n    }));\n    const params = {\n      column: apiRef.current.getColumn(field),\n      targetIndex: apiRef.current.getColumnIndexRelativeToVisibleColumns(field),\n      oldIndex: oldIndexPosition\n    };\n    apiRef.current.publishEvent('columnIndexChange', params);\n  }, [apiRef, logger, setGridColumnsState, getColumnIndexRelativeToVisibleColumns]);\n  const setColumnWidth = React.useCallback((field, width) => {\n    logger.debug(`Updating column ${field} width to ${width}`);\n    const column = apiRef.current.getColumn(field);\n\n    const newColumn = _extends({}, column, {\n      width\n    });\n\n    apiRef.current.updateColumns([newColumn]);\n    apiRef.current.publishEvent('columnWidthChange', {\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: newColumn,\n      width\n    });\n  }, [apiRef, logger]);\n  const columnApi = {\n    getColumn,\n    getAllColumns,\n    getColumnIndex,\n    getColumnPosition,\n    getVisibleColumns,\n    getColumnIndexRelativeToVisibleColumns,\n    updateColumns,\n    setColumnVisibilityModel,\n    setColumnVisibility,\n    setColumnWidth\n  };\n  const columnReorderApi = {\n    setColumnIndex\n  };\n  useGridApiMethod(apiRef, columnApi, 'public');\n  useGridApiMethod(apiRef, columnReorderApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState$c, _props$initialState3, _props$initialState3$;\n\n    const columnsStateToExport = {};\n    const columnVisibilityModelToExport = gridColumnVisibilityModelSelector(apiRef);\n    const shouldExportColumnVisibilityModel = // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels || // Always export if the model is controlled\n    props.columnVisibilityModel != null || // Always export if the model has been initialized\n    // TODO v6 Do a nullish check instead to export even if the initial model equals \"{}\"\n    Object.keys((_props$initialState$c = (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.columns) == null ? void 0 : _props$initialState3$.columnVisibilityModel) != null ? _props$initialState$c : {}).length > 0 || // Always export if the model is not empty\n    Object.keys(columnVisibilityModelToExport).length > 0;\n\n    if (shouldExportColumnVisibilityModel) {\n      columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;\n    }\n\n    columnsStateToExport.orderedFields = gridColumnFieldsSelector(apiRef);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const dimensions = {};\n    columns.forEach(colDef => {\n      if (colDef.hasBeenResized) {\n        const colDefDimensions = {};\n        COLUMNS_DIMENSION_PROPERTIES.forEach(propertyName => {\n          let propertyValue = colDef[propertyName];\n\n          if (propertyValue === Infinity) {\n            propertyValue = -1;\n          }\n\n          colDefDimensions[propertyName] = propertyValue;\n        });\n        dimensions[colDef.field] = colDefDimensions;\n      }\n    });\n\n    if (Object.keys(dimensions).length > 0) {\n      columnsStateToExport.dimensions = dimensions;\n    }\n\n    return _extends({}, prevState, {\n      columns: columnsStateToExport\n    });\n  }, [apiRef, props.columnVisibilityModel, (_props$initialState4 = props.initialState) == null ? void 0 : _props$initialState4.columns]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const columnVisibilityModelToImport = (_context$stateToResto = context.stateToRestore.columns) == null ? void 0 : _context$stateToResto.columnVisibilityModel;\n    const initialState = context.stateToRestore.columns;\n\n    if (columnVisibilityModelToImport == null && initialState == null) {\n      return params;\n    }\n\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      columnsToUpsert: [],\n      initialState,\n      columnVisibilityModel: columnVisibilityModelToImport,\n      keepOnlyColumnsToUpsert: false\n    });\n    apiRef.current.setState(mergeColumnsState(columnsState));\n\n    if (initialState != null) {\n      apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n    }\n\n    return params;\n  }, [apiRef, columnTypes]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.columns) {\n      var _props$slotProps;\n\n      const ColumnsPanel = props.slots.columnsPanel;\n      return /*#__PURE__*/_jsx(ColumnsPanel, _extends({}, (_props$slotProps = props.slotProps) == null ? void 0 : _props$slotProps.columnsPanel));\n    }\n\n    return initialValue;\n  }, [props.slots.columnsPanel, (_props$slotProps2 = props.slotProps) == null ? void 0 : _props$slotProps2.columnsPanel]);\n  const addColumnMenuItems = React.useCallback(columnMenuItems => {\n    if (props.disableColumnSelector) {\n      return columnMenuItems;\n    }\n\n    return [...columnMenuItems, 'columnMenuColumnsItem'];\n  }, [props.disableColumnSelector]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItems);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const prevInnerWidth = React.useRef(null);\n\n  const handleGridSizeChange = viewportInnerSize => {\n    if (prevInnerWidth.current !== viewportInnerSize.width) {\n      prevInnerWidth.current = viewportInnerSize.width;\n      setGridColumnsState(hydrateColumnsWidth(gridColumnsStateSelector(apiRef.current.state), viewportInnerSize.width));\n    }\n  };\n\n  useGridApiEventHandler(apiRef, 'viewportInnerSizeChange', handleGridSizeChange);\n  /**\n   * APPLIERS\n   */\n\n  const hydrateColumns = React.useCallback(() => {\n    logger.info(`Columns pipe processing have changed, regenerating the columns`);\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      columnsToUpsert: [],\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, logger, setGridColumnsState, columnTypes]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateColumns', hydrateColumns);\n  /**\n   * EFFECTS\n   */\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    logger.info(`GridColumns have changed, new length ${props.columns.length}`);\n\n    if (previousColumnsProp.current === props.columns && previousColumnTypesProp.current === columnTypes) {\n      return;\n    }\n\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      initialState: undefined,\n      // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`\n      columnsToUpsert: props.columns,\n      keepOnlyColumnsToUpsert: true\n    });\n    previousColumnsProp.current = props.columns;\n    previousColumnTypesProp.current = columnTypes;\n    setGridColumnsState(columnsState);\n  }, [logger, apiRef, setGridColumnsState, props.columns, columnTypes]);\n  React.useEffect(() => {\n    if (props.columnVisibilityModel !== undefined) {\n      apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);\n    }\n  }, [apiRef, logger, props.columnVisibilityModel]);\n}","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/node_modules/@mui/x-data-grid/hooks/features/columns/useGridColumns.js"],"names":["_extends","React","useGridApiMethod","useGridLogger","gridColumnFieldsSelector","gridColumnDefinitionsSelector","gridColumnLookupSelector","gridColumnsStateSelector","gridColumnVisibilityModelSelector","gridVisibleColumnDefinitionsSelector","gridColumnPositionsSelector","GridSignature","useGridApiEventHandler","useGridRegisterPipeProcessor","useGridRegisterPipeApplier","hydrateColumnsWidth","createColumnsState","mergeColumnsState","COLUMNS_DIMENSION_PROPERTIES","GridPreferencePanelsValue","getGridDefaultColumnTypes","jsx","_jsx","defaultColumnTypes","columnsStateInitializer","state","props","apiRef","_props$initialState","_ref","_props$columnVisibili","_props$initialState2","_props$initialState2$","columnsState","columnTypes","columnsToUpsert","columns","initialState","columnVisibilityModel","keepOnlyColumnsToUpsert","useGridColumns","_props$initialState4","_props$slotProps2","logger","previousColumnsProp","useRef","previousColumnTypesProp","current","registerControlState","stateId","propModel","propOnChange","onColumnVisibilityModelChange","stateSelector","changeEvent","setGridColumnsState","useCallback","debug","setState","forceUpdate","publishEvent","orderedFields","getColumn","field","getAllColumns","getVisibleColumns","getColumnIndex","useVisibleColumns","findIndex","col","getColumnPosition","index","setColumnVisibilityModel","model","currentModel","undefined","updateColumns","setColumnVisibility","isVisible","_columnVisibilityMode","isCurrentlyVisible","newModel","getColumnIndexRelativeToVisibleColumns","allColumns","setColumnIndex","targetIndexPosition","oldIndexPosition","updatedColumns","fieldRemoved","splice","params","column","targetIndex","oldIndex","setColumnWidth","width","newColumn","element","getColumnHeaderElement","colDef","columnApi","columnReorderApi","signature","DataGrid","stateExportPreProcessing","prevState","context","_props$initialState$c","_props$initialState3","_props$initialState3$","columnsStateToExport","columnVisibilityModelToExport","shouldExportColumnVisibilityModel","exportOnlyDirtyModels","Object","keys","length","dimensions","forEach","hasBeenResized","colDefDimensions","propertyName","propertyValue","Infinity","stateRestorePreProcessing","_context$stateToResto","columnVisibilityModelToImport","stateToRestore","preferencePanelPreProcessing","initialValue","value","_props$slotProps","ColumnsPanel","slots","columnsPanel","slotProps","addColumnMenuItems","columnMenuItems","disableColumnSelector","prevInnerWidth","handleGridSizeChange","viewportInnerSize","hydrateColumns","info","isFirstRender","useEffect"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,wBAAT,EAAmCC,6BAAnC,EAAkEC,wBAAlE,EAA4FC,wBAA5F,EAAsHC,iCAAtH,EAAyJC,oCAAzJ,EAA+LC,2BAA/L,QAAkO,uBAAlO;AACA,SAASC,aAAT,EAAwBC,sBAAxB,QAAsD,oCAAtD;AACA,SAASC,4BAAT,EAAuCC,0BAAvC,QAAyE,2BAAzE;AACA,SAASC,mBAAT,EAA8BC,kBAA9B,EAAkDC,iBAAlD,EAAqEC,4BAArE,QAAyG,oBAAzG;AACA,SAASC,yBAAT,QAA0C,qBAA1C;AACA,SAASC,yBAAT,QAA0C,iBAA1C;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,MAAMC,kBAAkB,GAAGH,yBAAyB,EAApD;AACA,OAAO,MAAMI,uBAAuB,GAAG,CAACC,KAAD,EAAQC,KAAR,EAAeC,MAAf,KAA0B;AAC/D,MAAIC,mBAAJ,EAAyBC,IAAzB,EAA+BC,qBAA/B,EAAsDC,oBAAtD,EAA4EC,qBAA5E;;AACA,QAAMC,YAAY,GAAGjB,kBAAkB,CAAC;AACtCW,IAAAA,MADsC;AAEtCO,IAAAA,WAAW,EAAEX,kBAFyB;AAGtCY,IAAAA,eAAe,EAAET,KAAK,CAACU,OAHe;AAItCC,IAAAA,YAAY,EAAE,CAACT,mBAAmB,GAAGF,KAAK,CAACW,YAA7B,KAA8C,IAA9C,GAAqD,KAAK,CAA1D,GAA8DT,mBAAmB,CAACQ,OAJ1D;AAKtCE,IAAAA,qBAAqB,EAAE,CAACT,IAAI,GAAG,CAACC,qBAAqB,GAAGJ,KAAK,CAACY,qBAA/B,KAAyD,IAAzD,GAAgER,qBAAhE,GAAwF,CAACC,oBAAoB,GAAGL,KAAK,CAACW,YAA9B,KAA+C,IAA/C,GAAsD,KAAK,CAA3D,GAA+D,CAACL,qBAAqB,GAAGD,oBAAoB,CAACK,OAA9C,KAA0D,IAA1D,GAAiE,KAAK,CAAtE,GAA0EJ,qBAAqB,CAACM,qBAA/P,KAAyR,IAAzR,GAAgST,IAAhS,GAAuS,EALxR;AAMtCU,IAAAA,uBAAuB,EAAE;AANa,GAAD,CAAvC;AAQA,SAAOvC,QAAQ,CAAC,EAAD,EAAKyB,KAAL,EAAY;AACzBW,IAAAA,OAAO,EAAEH;AADgB,GAAZ,CAAf;AAGD,CAbM;AAeP;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASO,cAAT,CAAwBb,MAAxB,EAAgCD,KAAhC,EAAuC;AAC5C,MAAIe,oBAAJ,EAA0BC,iBAA1B;;AACA,QAAMC,MAAM,GAAGxC,aAAa,CAACwB,MAAD,EAAS,gBAAT,CAA5B;AACA,QAAMO,WAAW,GAAGX,kBAApB;AACA,QAAMqB,mBAAmB,GAAG3C,KAAK,CAAC4C,MAAN,CAAanB,KAAK,CAACU,OAAnB,CAA5B;AACA,QAAMU,uBAAuB,GAAG7C,KAAK,CAAC4C,MAAN,CAAaX,WAAb,CAAhC;AACAP,EAAAA,MAAM,CAACoB,OAAP,CAAeC,oBAAf,CAAoC;AAClCC,IAAAA,OAAO,EAAE,gBADyB;AAElCC,IAAAA,SAAS,EAAExB,KAAK,CAACY,qBAFiB;AAGlCa,IAAAA,YAAY,EAAEzB,KAAK,CAAC0B,6BAHc;AAIlCC,IAAAA,aAAa,EAAE7C,iCAJmB;AAKlC8C,IAAAA,WAAW,EAAE;AALqB,GAApC;AAOA,QAAMC,mBAAmB,GAAGtD,KAAK,CAACuD,WAAN,CAAkBvB,YAAY,IAAI;AAC5DU,IAAAA,MAAM,CAACc,KAAP,CAAa,yBAAb;AACA9B,IAAAA,MAAM,CAACoB,OAAP,CAAeW,QAAf,CAAwBzC,iBAAiB,CAACgB,YAAD,CAAzC;AACAN,IAAAA,MAAM,CAACoB,OAAP,CAAeY,WAAf;AACAhC,IAAAA,MAAM,CAACoB,OAAP,CAAea,YAAf,CAA4B,eAA5B,EAA6C3B,YAAY,CAAC4B,aAA1D;AACD,GAL2B,EAKzB,CAAClB,MAAD,EAAShB,MAAT,CALyB,CAA5B;AAOA;AACF;AACA;;AACE,QAAMmC,SAAS,GAAG7D,KAAK,CAACuD,WAAN,CAAkBO,KAAK,IAAIzD,wBAAwB,CAACqB,MAAD,CAAxB,CAAiCoC,KAAjC,CAA3B,EAAoE,CAACpC,MAAD,CAApE,CAAlB;AACA,QAAMqC,aAAa,GAAG/D,KAAK,CAACuD,WAAN,CAAkB,MAAMnD,6BAA6B,CAACsB,MAAD,CAArD,EAA+D,CAACA,MAAD,CAA/D,CAAtB;AACA,QAAMsC,iBAAiB,GAAGhE,KAAK,CAACuD,WAAN,CAAkB,MAAM/C,oCAAoC,CAACkB,MAAD,CAA5D,EAAsE,CAACA,MAAD,CAAtE,CAA1B;AACA,QAAMuC,cAAc,GAAGjE,KAAK,CAACuD,WAAN,CAAkB,CAACO,KAAD,EAAQI,iBAAiB,GAAG,IAA5B,KAAqC;AAC5E,UAAM/B,OAAO,GAAG+B,iBAAiB,GAAG1D,oCAAoC,CAACkB,MAAD,CAAvC,GAAkDtB,6BAA6B,CAACsB,MAAD,CAAhH;AACA,WAAOS,OAAO,CAACgC,SAAR,CAAkBC,GAAG,IAAIA,GAAG,CAACN,KAAJ,KAAcA,KAAvC,CAAP;AACD,GAHsB,EAGpB,CAACpC,MAAD,CAHoB,CAAvB;AAIA,QAAM2C,iBAAiB,GAAGrE,KAAK,CAACuD,WAAN,CAAkBO,KAAK,IAAI;AACnD,UAAMQ,KAAK,GAAGL,cAAc,CAACH,KAAD,CAA5B;AACA,WAAOrD,2BAA2B,CAACiB,MAAD,CAA3B,CAAoC4C,KAApC,CAAP;AACD,GAHyB,EAGvB,CAAC5C,MAAD,EAASuC,cAAT,CAHuB,CAA1B;AAIA,QAAMM,wBAAwB,GAAGvE,KAAK,CAACuD,WAAN,CAAkBiB,KAAK,IAAI;AAC1D,UAAMC,YAAY,GAAGlE,iCAAiC,CAACmB,MAAD,CAAtD;;AACA,QAAI+C,YAAY,KAAKD,KAArB,EAA4B;AAC1B9C,MAAAA,MAAM,CAACoB,OAAP,CAAeW,QAAf,CAAwBjC,KAAK,IAAIzB,QAAQ,CAAC,EAAD,EAAKyB,KAAL,EAAY;AACnDW,QAAAA,OAAO,EAAEpB,kBAAkB,CAAC;AAC1BW,UAAAA,MAD0B;AAE1BO,UAAAA,WAF0B;AAG1BC,UAAAA,eAAe,EAAE,EAHS;AAI1BE,UAAAA,YAAY,EAAEsC,SAJY;AAK1BrC,UAAAA,qBAAqB,EAAEmC,KALG;AAM1BlC,UAAAA,uBAAuB,EAAE;AANC,SAAD;AADwB,OAAZ,CAAzC;AAUAZ,MAAAA,MAAM,CAACoB,OAAP,CAAeY,WAAf;AACD;AACF,GAfgC,EAe9B,CAAChC,MAAD,EAASO,WAAT,CAf8B,CAAjC;AAgBA,QAAM0C,aAAa,GAAG3E,KAAK,CAACuD,WAAN,CAAkBpB,OAAO,IAAI;AACjD,UAAMH,YAAY,GAAGjB,kBAAkB,CAAC;AACtCW,MAAAA,MADsC;AAEtCO,MAAAA,WAFsC;AAGtCC,MAAAA,eAAe,EAAEC,OAHqB;AAItCC,MAAAA,YAAY,EAAEsC,SAJwB;AAKtCpC,MAAAA,uBAAuB,EAAE;AALa,KAAD,CAAvC;AAOAgB,IAAAA,mBAAmB,CAACtB,YAAD,CAAnB;AACD,GATqB,EASnB,CAACN,MAAD,EAAS4B,mBAAT,EAA8BrB,WAA9B,CATmB,CAAtB;AAUA,QAAM2C,mBAAmB,GAAG5E,KAAK,CAACuD,WAAN,CAAkB,CAACO,KAAD,EAAQe,SAAR,KAAsB;AAClE,QAAIC,qBAAJ;;AACA,UAAMzC,qBAAqB,GAAG9B,iCAAiC,CAACmB,MAAD,CAA/D;AACA,UAAMqD,kBAAkB,GAAG,CAACD,qBAAqB,GAAGzC,qBAAqB,CAACyB,KAAD,CAA9C,KAA0D,IAA1D,GAAiEgB,qBAAjE,GAAyF,IAApH;;AACA,QAAID,SAAS,KAAKE,kBAAlB,EAAsC;AACpC,YAAMC,QAAQ,GAAGjF,QAAQ,CAAC,EAAD,EAAKsC,qBAAL,EAA4B;AACnD,SAACyB,KAAD,GAASe;AAD0C,OAA5B,CAAzB;;AAGAnD,MAAAA,MAAM,CAACoB,OAAP,CAAeyB,wBAAf,CAAwCS,QAAxC;AACD;AACF,GAV2B,EAUzB,CAACtD,MAAD,CAVyB,CAA5B;AAWA,QAAMuD,sCAAsC,GAAGjF,KAAK,CAACuD,WAAN,CAAkBO,KAAK,IAAI;AACxE,UAAMoB,UAAU,GAAG/E,wBAAwB,CAACuB,MAAD,CAA3C;AACA,WAAOwD,UAAU,CAACf,SAAX,CAAqBC,GAAG,IAAIA,GAAG,KAAKN,KAApC,CAAP;AACD,GAH8C,EAG5C,CAACpC,MAAD,CAH4C,CAA/C;AAIA,QAAMyD,cAAc,GAAGnF,KAAK,CAACuD,WAAN,CAAkB,CAACO,KAAD,EAAQsB,mBAAR,KAAgC;AACvE,UAAMF,UAAU,GAAG/E,wBAAwB,CAACuB,MAAD,CAA3C;AACA,UAAM2D,gBAAgB,GAAGJ,sCAAsC,CAACnB,KAAD,CAA/D;;AACA,QAAIuB,gBAAgB,KAAKD,mBAAzB,EAA8C;AAC5C;AACD;;AACD1C,IAAAA,MAAM,CAACc,KAAP,CAAc,iBAAgBM,KAAM,aAAYsB,mBAAoB,EAApE;AACA,UAAME,cAAc,GAAG,CAAC,GAAGJ,UAAJ,CAAvB;AACA,UAAMK,YAAY,GAAGD,cAAc,CAACE,MAAf,CAAsBH,gBAAtB,EAAwC,CAAxC,EAA2C,CAA3C,CAArB;AACAC,IAAAA,cAAc,CAACE,MAAf,CAAsBJ,mBAAtB,EAA2C,CAA3C,EAA8CG,YAA9C;AACAjC,IAAAA,mBAAmB,CAACvD,QAAQ,CAAC,EAAD,EAAKO,wBAAwB,CAACoB,MAAM,CAACoB,OAAP,CAAetB,KAAhB,CAA7B,EAAqD;AAC/EoC,MAAAA,aAAa,EAAE0B;AADgE,KAArD,CAAT,CAAnB;AAGA,UAAMG,MAAM,GAAG;AACbC,MAAAA,MAAM,EAAEhE,MAAM,CAACoB,OAAP,CAAee,SAAf,CAAyBC,KAAzB,CADK;AAEb6B,MAAAA,WAAW,EAAEjE,MAAM,CAACoB,OAAP,CAAemC,sCAAf,CAAsDnB,KAAtD,CAFA;AAGb8B,MAAAA,QAAQ,EAAEP;AAHG,KAAf;AAKA3D,IAAAA,MAAM,CAACoB,OAAP,CAAea,YAAf,CAA4B,mBAA5B,EAAiD8B,MAAjD;AACD,GAnBsB,EAmBpB,CAAC/D,MAAD,EAASgB,MAAT,EAAiBY,mBAAjB,EAAsC2B,sCAAtC,CAnBoB,CAAvB;AAoBA,QAAMY,cAAc,GAAG7F,KAAK,CAACuD,WAAN,CAAkB,CAACO,KAAD,EAAQgC,KAAR,KAAkB;AACzDpD,IAAAA,MAAM,CAACc,KAAP,CAAc,mBAAkBM,KAAM,aAAYgC,KAAM,EAAxD;AACA,UAAMJ,MAAM,GAAGhE,MAAM,CAACoB,OAAP,CAAee,SAAf,CAAyBC,KAAzB,CAAf;;AACA,UAAMiC,SAAS,GAAGhG,QAAQ,CAAC,EAAD,EAAK2F,MAAL,EAAa;AACrCI,MAAAA;AADqC,KAAb,CAA1B;;AAGApE,IAAAA,MAAM,CAACoB,OAAP,CAAe6B,aAAf,CAA6B,CAACoB,SAAD,CAA7B;AACArE,IAAAA,MAAM,CAACoB,OAAP,CAAea,YAAf,CAA4B,mBAA5B,EAAiD;AAC/CqC,MAAAA,OAAO,EAAEtE,MAAM,CAACoB,OAAP,CAAemD,sBAAf,CAAsCnC,KAAtC,CADsC;AAE/CoC,MAAAA,MAAM,EAAEH,SAFuC;AAG/CD,MAAAA;AAH+C,KAAjD;AAKD,GAZsB,EAYpB,CAACpE,MAAD,EAASgB,MAAT,CAZoB,CAAvB;AAaA,QAAMyD,SAAS,GAAG;AAChBtC,IAAAA,SADgB;AAEhBE,IAAAA,aAFgB;AAGhBE,IAAAA,cAHgB;AAIhBI,IAAAA,iBAJgB;AAKhBL,IAAAA,iBALgB;AAMhBiB,IAAAA,sCANgB;AAOhBN,IAAAA,aAPgB;AAQhBJ,IAAAA,wBARgB;AAShBK,IAAAA,mBATgB;AAUhBiB,IAAAA;AAVgB,GAAlB;AAYA,QAAMO,gBAAgB,GAAG;AACvBjB,IAAAA;AADuB,GAAzB;AAGAlF,EAAAA,gBAAgB,CAACyB,MAAD,EAASyE,SAAT,EAAoB,QAApB,CAAhB;AACAlG,EAAAA,gBAAgB,CAACyB,MAAD,EAAS0E,gBAAT,EAA2B3E,KAAK,CAAC4E,SAAN,KAAoB3F,aAAa,CAAC4F,QAAlC,GAA6C,SAA7C,GAAyD,QAApF,CAAhB;AAEA;AACF;AACA;;AACE,QAAMC,wBAAwB,GAAGvG,KAAK,CAACuD,WAAN,CAAkB,CAACiD,SAAD,EAAYC,OAAZ,KAAwB;AACzE,QAAIC,qBAAJ,EAA2BC,oBAA3B,EAAiDC,qBAAjD;;AACA,UAAMC,oBAAoB,GAAG,EAA7B;AACA,UAAMC,6BAA6B,GAAGvG,iCAAiC,CAACmB,MAAD,CAAvE;AACA,UAAMqF,iCAAiC,GACvC;AACA,KAACN,OAAO,CAACO,qBAAT,IACA;AACAvF,IAAAA,KAAK,CAACY,qBAAN,IAA+B,IAF/B,IAGA;AACA;AACA4E,IAAAA,MAAM,CAACC,IAAP,CAAY,CAACR,qBAAqB,GAAG,CAACC,oBAAoB,GAAGlF,KAAK,CAACW,YAA9B,KAA+C,IAA/C,GAAsD,KAAK,CAA3D,GAA+D,CAACwE,qBAAqB,GAAGD,oBAAoB,CAACxE,OAA9C,KAA0D,IAA1D,GAAiE,KAAK,CAAtE,GAA0EyE,qBAAqB,CAACvE,qBAAxL,KAAkN,IAAlN,GAAyNqE,qBAAzN,GAAiP,EAA7P,EAAiQS,MAAjQ,GAA0Q,CAL1Q,IAMA;AACAF,IAAAA,MAAM,CAACC,IAAP,CAAYJ,6BAAZ,EAA2CK,MAA3C,GAAoD,CATpD;;AAUA,QAAIJ,iCAAJ,EAAuC;AACrCF,MAAAA,oBAAoB,CAACxE,qBAArB,GAA6CyE,6BAA7C;AACD;;AACDD,IAAAA,oBAAoB,CAACjD,aAArB,GAAqCzD,wBAAwB,CAACuB,MAAD,CAA7D;AACA,UAAMS,OAAO,GAAG/B,6BAA6B,CAACsB,MAAD,CAA7C;AACA,UAAM0F,UAAU,GAAG,EAAnB;AACAjF,IAAAA,OAAO,CAACkF,OAAR,CAAgBnB,MAAM,IAAI;AACxB,UAAIA,MAAM,CAACoB,cAAX,EAA2B;AACzB,cAAMC,gBAAgB,GAAG,EAAzB;AACAtG,QAAAA,4BAA4B,CAACoG,OAA7B,CAAqCG,YAAY,IAAI;AACnD,cAAIC,aAAa,GAAGvB,MAAM,CAACsB,YAAD,CAA1B;;AACA,cAAIC,aAAa,KAAKC,QAAtB,EAAgC;AAC9BD,YAAAA,aAAa,GAAG,CAAC,CAAjB;AACD;;AACDF,UAAAA,gBAAgB,CAACC,YAAD,CAAhB,GAAiCC,aAAjC;AACD,SAND;AAOAL,QAAAA,UAAU,CAAClB,MAAM,CAACpC,KAAR,CAAV,GAA2ByD,gBAA3B;AACD;AACF,KAZD;;AAaA,QAAIN,MAAM,CAACC,IAAP,CAAYE,UAAZ,EAAwBD,MAAxB,GAAiC,CAArC,EAAwC;AACtCN,MAAAA,oBAAoB,CAACO,UAArB,GAAkCA,UAAlC;AACD;;AACD,WAAOrH,QAAQ,CAAC,EAAD,EAAKyG,SAAL,EAAgB;AAC7BrE,MAAAA,OAAO,EAAE0E;AADoB,KAAhB,CAAf;AAGD,GAvCgC,EAuC9B,CAACnF,MAAD,EAASD,KAAK,CAACY,qBAAf,EAAsC,CAACG,oBAAoB,GAAGf,KAAK,CAACW,YAA9B,KAA+C,IAA/C,GAAsD,KAAK,CAA3D,GAA+DI,oBAAoB,CAACL,OAA1H,CAvC8B,CAAjC;AAwCA,QAAMwF,yBAAyB,GAAG3H,KAAK,CAACuD,WAAN,CAAkB,CAACkC,MAAD,EAASgB,OAAT,KAAqB;AACvE,QAAImB,qBAAJ;;AACA,UAAMC,6BAA6B,GAAG,CAACD,qBAAqB,GAAGnB,OAAO,CAACqB,cAAR,CAAuB3F,OAAhD,KAA4D,IAA5D,GAAmE,KAAK,CAAxE,GAA4EyF,qBAAqB,CAACvF,qBAAxI;AACA,UAAMD,YAAY,GAAGqE,OAAO,CAACqB,cAAR,CAAuB3F,OAA5C;;AACA,QAAI0F,6BAA6B,IAAI,IAAjC,IAAyCzF,YAAY,IAAI,IAA7D,EAAmE;AACjE,aAAOqD,MAAP;AACD;;AACD,UAAMzD,YAAY,GAAGjB,kBAAkB,CAAC;AACtCW,MAAAA,MADsC;AAEtCO,MAAAA,WAFsC;AAGtCC,MAAAA,eAAe,EAAE,EAHqB;AAItCE,MAAAA,YAJsC;AAKtCC,MAAAA,qBAAqB,EAAEwF,6BALe;AAMtCvF,MAAAA,uBAAuB,EAAE;AANa,KAAD,CAAvC;AAQAZ,IAAAA,MAAM,CAACoB,OAAP,CAAeW,QAAf,CAAwBzC,iBAAiB,CAACgB,YAAD,CAAzC;;AACA,QAAII,YAAY,IAAI,IAApB,EAA0B;AACxBV,MAAAA,MAAM,CAACoB,OAAP,CAAea,YAAf,CAA4B,eAA5B,EAA6C3B,YAAY,CAAC4B,aAA1D;AACD;;AACD,WAAO6B,MAAP;AACD,GApBiC,EAoB/B,CAAC/D,MAAD,EAASO,WAAT,CApB+B,CAAlC;AAqBA,QAAM8F,4BAA4B,GAAG/H,KAAK,CAACuD,WAAN,CAAkB,CAACyE,YAAD,EAAeC,KAAf,KAAyB;AAC9E,QAAIA,KAAK,KAAK/G,yBAAyB,CAACiB,OAAxC,EAAiD;AAC/C,UAAI+F,gBAAJ;;AACA,YAAMC,YAAY,GAAG1G,KAAK,CAAC2G,KAAN,CAAYC,YAAjC;AACA,aAAO,aAAahH,IAAI,CAAC8G,YAAD,EAAepI,QAAQ,CAAC,EAAD,EAAK,CAACmI,gBAAgB,GAAGzG,KAAK,CAAC6G,SAA1B,KAAwC,IAAxC,GAA+C,KAAK,CAApD,GAAwDJ,gBAAgB,CAACG,YAA9E,CAAvB,CAAxB;AACD;;AACD,WAAOL,YAAP;AACD,GAPoC,EAOlC,CAACvG,KAAK,CAAC2G,KAAN,CAAYC,YAAb,EAA2B,CAAC5F,iBAAiB,GAAGhB,KAAK,CAAC6G,SAA3B,KAAyC,IAAzC,GAAgD,KAAK,CAArD,GAAyD7F,iBAAiB,CAAC4F,YAAtG,CAPkC,CAArC;AAQA,QAAME,kBAAkB,GAAGvI,KAAK,CAACuD,WAAN,CAAkBiF,eAAe,IAAI;AAC9D,QAAI/G,KAAK,CAACgH,qBAAV,EAAiC;AAC/B,aAAOD,eAAP;AACD;;AACD,WAAO,CAAC,GAAGA,eAAJ,EAAqB,uBAArB,CAAP;AACD,GAL0B,EAKxB,CAAC/G,KAAK,CAACgH,qBAAP,CALwB,CAA3B;AAMA7H,EAAAA,4BAA4B,CAACc,MAAD,EAAS,YAAT,EAAuB6G,kBAAvB,CAA5B;AACA3H,EAAAA,4BAA4B,CAACc,MAAD,EAAS,aAAT,EAAwB6E,wBAAxB,CAA5B;AACA3F,EAAAA,4BAA4B,CAACc,MAAD,EAAS,cAAT,EAAyBiG,yBAAzB,CAA5B;AACA/G,EAAAA,4BAA4B,CAACc,MAAD,EAAS,iBAAT,EAA4BqG,4BAA5B,CAA5B;AAEA;AACF;AACA;;AACE,QAAMW,cAAc,GAAG1I,KAAK,CAAC4C,MAAN,CAAa,IAAb,CAAvB;;AACA,QAAM+F,oBAAoB,GAAGC,iBAAiB,IAAI;AAChD,QAAIF,cAAc,CAAC5F,OAAf,KAA2B8F,iBAAiB,CAAC9C,KAAjD,EAAwD;AACtD4C,MAAAA,cAAc,CAAC5F,OAAf,GAAyB8F,iBAAiB,CAAC9C,KAA3C;AACAxC,MAAAA,mBAAmB,CAACxC,mBAAmB,CAACR,wBAAwB,CAACoB,MAAM,CAACoB,OAAP,CAAetB,KAAhB,CAAzB,EAAiDoH,iBAAiB,CAAC9C,KAAnE,CAApB,CAAnB;AACD;AACF,GALD;;AAMAnF,EAAAA,sBAAsB,CAACe,MAAD,EAAS,yBAAT,EAAoCiH,oBAApC,CAAtB;AAEA;AACF;AACA;;AACE,QAAME,cAAc,GAAG7I,KAAK,CAACuD,WAAN,CAAkB,MAAM;AAC7Cb,IAAAA,MAAM,CAACoG,IAAP,CAAa,gEAAb;AACA,UAAM9G,YAAY,GAAGjB,kBAAkB,CAAC;AACtCW,MAAAA,MADsC;AAEtCO,MAAAA,WAFsC;AAGtCC,MAAAA,eAAe,EAAE,EAHqB;AAItCE,MAAAA,YAAY,EAAEsC,SAJwB;AAKtCpC,MAAAA,uBAAuB,EAAE;AALa,KAAD,CAAvC;AAOAgB,IAAAA,mBAAmB,CAACtB,YAAD,CAAnB;AACD,GAVsB,EAUpB,CAACN,MAAD,EAASgB,MAAT,EAAiBY,mBAAjB,EAAsCrB,WAAtC,CAVoB,CAAvB;AAWApB,EAAAA,0BAA0B,CAACa,MAAD,EAAS,gBAAT,EAA2BmH,cAA3B,CAA1B;AAEA;AACF;AACA;AACE;AACA;;AACA,QAAME,aAAa,GAAG/I,KAAK,CAAC4C,MAAN,CAAa,IAAb,CAAtB;AACA5C,EAAAA,KAAK,CAACgJ,SAAN,CAAgB,MAAM;AACpB,QAAID,aAAa,CAACjG,OAAlB,EAA2B;AACzBiG,MAAAA,aAAa,CAACjG,OAAd,GAAwB,KAAxB;AACA;AACD;;AACDJ,IAAAA,MAAM,CAACoG,IAAP,CAAa,wCAAuCrH,KAAK,CAACU,OAAN,CAAcgF,MAAO,EAAzE;;AACA,QAAIxE,mBAAmB,CAACG,OAApB,KAAgCrB,KAAK,CAACU,OAAtC,IAAiDU,uBAAuB,CAACC,OAAxB,KAAoCb,WAAzF,EAAsG;AACpG;AACD;;AACD,UAAMD,YAAY,GAAGjB,kBAAkB,CAAC;AACtCW,MAAAA,MADsC;AAEtCO,MAAAA,WAFsC;AAGtCG,MAAAA,YAAY,EAAEsC,SAHwB;AAItC;AACAxC,MAAAA,eAAe,EAAET,KAAK,CAACU,OALe;AAMtCG,MAAAA,uBAAuB,EAAE;AANa,KAAD,CAAvC;AAQAK,IAAAA,mBAAmB,CAACG,OAApB,GAA8BrB,KAAK,CAACU,OAApC;AACAU,IAAAA,uBAAuB,CAACC,OAAxB,GAAkCb,WAAlC;AACAqB,IAAAA,mBAAmB,CAACtB,YAAD,CAAnB;AACD,GApBD,EAoBG,CAACU,MAAD,EAAShB,MAAT,EAAiB4B,mBAAjB,EAAsC7B,KAAK,CAACU,OAA5C,EAAqDF,WAArD,CApBH;AAqBAjC,EAAAA,KAAK,CAACgJ,SAAN,CAAgB,MAAM;AACpB,QAAIvH,KAAK,CAACY,qBAAN,KAAgCqC,SAApC,EAA+C;AAC7ChD,MAAAA,MAAM,CAACoB,OAAP,CAAeyB,wBAAf,CAAwC9C,KAAK,CAACY,qBAA9C;AACD;AACF,GAJD,EAIG,CAACX,MAAD,EAASgB,MAAT,EAAiBjB,KAAK,CAACY,qBAAvB,CAJH;AAKD","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnFieldsSelector, gridColumnDefinitionsSelector, gridColumnLookupSelector, gridColumnsStateSelector, gridColumnVisibilityModelSelector, gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from './gridColumnsSelector';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridRegisterPipeProcessor, useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nimport { hydrateColumnsWidth, createColumnsState, mergeColumnsState, COLUMNS_DIMENSION_PROPERTIES } from './gridColumnsUtils';\nimport { GridPreferencePanelsValue } from '../preferencesPanel';\nimport { getGridDefaultColumnTypes } from '../../../colDef';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultColumnTypes = getGridDefaultColumnTypes();\nexport const columnsStateInitializer = (state, props, apiRef) => {\n  var _props$initialState, _ref, _props$columnVisibili, _props$initialState2, _props$initialState2$;\n  const columnsState = createColumnsState({\n    apiRef,\n    columnTypes: defaultColumnTypes,\n    columnsToUpsert: props.columns,\n    initialState: (_props$initialState = props.initialState) == null ? void 0 : _props$initialState.columns,\n    columnVisibilityModel: (_ref = (_props$columnVisibili = props.columnVisibilityModel) != null ? _props$columnVisibili : (_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.columns) == null ? void 0 : _props$initialState2$.columnVisibilityModel) != null ? _ref : {},\n    keepOnlyColumnsToUpsert: true\n  });\n  return _extends({}, state, {\n    columns: columnsState\n  });\n};\n\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridDimensions (method, event) - can be after\n * TODO: Impossible priority - useGridParamsApi also needs to be after useGridColumns\n */\nexport function useGridColumns(apiRef, props) {\n  var _props$initialState4, _props$slotProps2;\n  const logger = useGridLogger(apiRef, 'useGridColumns');\n  const columnTypes = defaultColumnTypes;\n  const previousColumnsProp = React.useRef(props.columns);\n  const previousColumnTypesProp = React.useRef(columnTypes);\n  apiRef.current.registerControlState({\n    stateId: 'visibleColumns',\n    propModel: props.columnVisibilityModel,\n    propOnChange: props.onColumnVisibilityModelChange,\n    stateSelector: gridColumnVisibilityModelSelector,\n    changeEvent: 'columnVisibilityModelChange'\n  });\n  const setGridColumnsState = React.useCallback(columnsState => {\n    logger.debug('Updating columns state.');\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n  }, [logger, apiRef]);\n\n  /**\n   * API METHODS\n   */\n  const getColumn = React.useCallback(field => gridColumnLookupSelector(apiRef)[field], [apiRef]);\n  const getAllColumns = React.useCallback(() => gridColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getVisibleColumns = React.useCallback(() => gridVisibleColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getColumnIndex = React.useCallback((field, useVisibleColumns = true) => {\n    const columns = useVisibleColumns ? gridVisibleColumnDefinitionsSelector(apiRef) : gridColumnDefinitionsSelector(apiRef);\n    return columns.findIndex(col => col.field === field);\n  }, [apiRef]);\n  const getColumnPosition = React.useCallback(field => {\n    const index = getColumnIndex(field);\n    return gridColumnPositionsSelector(apiRef)[index];\n  }, [apiRef, getColumnIndex]);\n  const setColumnVisibilityModel = React.useCallback(model => {\n    const currentModel = gridColumnVisibilityModelSelector(apiRef);\n    if (currentModel !== model) {\n      apiRef.current.setState(state => _extends({}, state, {\n        columns: createColumnsState({\n          apiRef,\n          columnTypes,\n          columnsToUpsert: [],\n          initialState: undefined,\n          columnVisibilityModel: model,\n          keepOnlyColumnsToUpsert: false\n        })\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, columnTypes]);\n  const updateColumns = React.useCallback(columns => {\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      columnsToUpsert: columns,\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, setGridColumnsState, columnTypes]);\n  const setColumnVisibility = React.useCallback((field, isVisible) => {\n    var _columnVisibilityMode;\n    const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);\n    const isCurrentlyVisible = (_columnVisibilityMode = columnVisibilityModel[field]) != null ? _columnVisibilityMode : true;\n    if (isVisible !== isCurrentlyVisible) {\n      const newModel = _extends({}, columnVisibilityModel, {\n        [field]: isVisible\n      });\n      apiRef.current.setColumnVisibilityModel(newModel);\n    }\n  }, [apiRef]);\n  const getColumnIndexRelativeToVisibleColumns = React.useCallback(field => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    return allColumns.findIndex(col => col === field);\n  }, [apiRef]);\n  const setColumnIndex = React.useCallback((field, targetIndexPosition) => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    const oldIndexPosition = getColumnIndexRelativeToVisibleColumns(field);\n    if (oldIndexPosition === targetIndexPosition) {\n      return;\n    }\n    logger.debug(`Moving column ${field} to index ${targetIndexPosition}`);\n    const updatedColumns = [...allColumns];\n    const fieldRemoved = updatedColumns.splice(oldIndexPosition, 1)[0];\n    updatedColumns.splice(targetIndexPosition, 0, fieldRemoved);\n    setGridColumnsState(_extends({}, gridColumnsStateSelector(apiRef.current.state), {\n      orderedFields: updatedColumns\n    }));\n    const params = {\n      column: apiRef.current.getColumn(field),\n      targetIndex: apiRef.current.getColumnIndexRelativeToVisibleColumns(field),\n      oldIndex: oldIndexPosition\n    };\n    apiRef.current.publishEvent('columnIndexChange', params);\n  }, [apiRef, logger, setGridColumnsState, getColumnIndexRelativeToVisibleColumns]);\n  const setColumnWidth = React.useCallback((field, width) => {\n    logger.debug(`Updating column ${field} width to ${width}`);\n    const column = apiRef.current.getColumn(field);\n    const newColumn = _extends({}, column, {\n      width\n    });\n    apiRef.current.updateColumns([newColumn]);\n    apiRef.current.publishEvent('columnWidthChange', {\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: newColumn,\n      width\n    });\n  }, [apiRef, logger]);\n  const columnApi = {\n    getColumn,\n    getAllColumns,\n    getColumnIndex,\n    getColumnPosition,\n    getVisibleColumns,\n    getColumnIndexRelativeToVisibleColumns,\n    updateColumns,\n    setColumnVisibilityModel,\n    setColumnVisibility,\n    setColumnWidth\n  };\n  const columnReorderApi = {\n    setColumnIndex\n  };\n  useGridApiMethod(apiRef, columnApi, 'public');\n  useGridApiMethod(apiRef, columnReorderApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState$c, _props$initialState3, _props$initialState3$;\n    const columnsStateToExport = {};\n    const columnVisibilityModelToExport = gridColumnVisibilityModelSelector(apiRef);\n    const shouldExportColumnVisibilityModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.columnVisibilityModel != null ||\n    // Always export if the model has been initialized\n    // TODO v6 Do a nullish check instead to export even if the initial model equals \"{}\"\n    Object.keys((_props$initialState$c = (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.columns) == null ? void 0 : _props$initialState3$.columnVisibilityModel) != null ? _props$initialState$c : {}).length > 0 ||\n    // Always export if the model is not empty\n    Object.keys(columnVisibilityModelToExport).length > 0;\n    if (shouldExportColumnVisibilityModel) {\n      columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;\n    }\n    columnsStateToExport.orderedFields = gridColumnFieldsSelector(apiRef);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const dimensions = {};\n    columns.forEach(colDef => {\n      if (colDef.hasBeenResized) {\n        const colDefDimensions = {};\n        COLUMNS_DIMENSION_PROPERTIES.forEach(propertyName => {\n          let propertyValue = colDef[propertyName];\n          if (propertyValue === Infinity) {\n            propertyValue = -1;\n          }\n          colDefDimensions[propertyName] = propertyValue;\n        });\n        dimensions[colDef.field] = colDefDimensions;\n      }\n    });\n    if (Object.keys(dimensions).length > 0) {\n      columnsStateToExport.dimensions = dimensions;\n    }\n    return _extends({}, prevState, {\n      columns: columnsStateToExport\n    });\n  }, [apiRef, props.columnVisibilityModel, (_props$initialState4 = props.initialState) == null ? void 0 : _props$initialState4.columns]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n    const columnVisibilityModelToImport = (_context$stateToResto = context.stateToRestore.columns) == null ? void 0 : _context$stateToResto.columnVisibilityModel;\n    const initialState = context.stateToRestore.columns;\n    if (columnVisibilityModelToImport == null && initialState == null) {\n      return params;\n    }\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      columnsToUpsert: [],\n      initialState,\n      columnVisibilityModel: columnVisibilityModelToImport,\n      keepOnlyColumnsToUpsert: false\n    });\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    if (initialState != null) {\n      apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n    }\n    return params;\n  }, [apiRef, columnTypes]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.columns) {\n      var _props$slotProps;\n      const ColumnsPanel = props.slots.columnsPanel;\n      return /*#__PURE__*/_jsx(ColumnsPanel, _extends({}, (_props$slotProps = props.slotProps) == null ? void 0 : _props$slotProps.columnsPanel));\n    }\n    return initialValue;\n  }, [props.slots.columnsPanel, (_props$slotProps2 = props.slotProps) == null ? void 0 : _props$slotProps2.columnsPanel]);\n  const addColumnMenuItems = React.useCallback(columnMenuItems => {\n    if (props.disableColumnSelector) {\n      return columnMenuItems;\n    }\n    return [...columnMenuItems, 'columnMenuColumnsItem'];\n  }, [props.disableColumnSelector]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItems);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n\n  /**\n   * EVENTS\n   */\n  const prevInnerWidth = React.useRef(null);\n  const handleGridSizeChange = viewportInnerSize => {\n    if (prevInnerWidth.current !== viewportInnerSize.width) {\n      prevInnerWidth.current = viewportInnerSize.width;\n      setGridColumnsState(hydrateColumnsWidth(gridColumnsStateSelector(apiRef.current.state), viewportInnerSize.width));\n    }\n  };\n  useGridApiEventHandler(apiRef, 'viewportInnerSizeChange', handleGridSizeChange);\n\n  /**\n   * APPLIERS\n   */\n  const hydrateColumns = React.useCallback(() => {\n    logger.info(`Columns pipe processing have changed, regenerating the columns`);\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      columnsToUpsert: [],\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, logger, setGridColumnsState, columnTypes]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateColumns', hydrateColumns);\n\n  /**\n   * EFFECTS\n   */\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    logger.info(`GridColumns have changed, new length ${props.columns.length}`);\n    if (previousColumnsProp.current === props.columns && previousColumnTypesProp.current === columnTypes) {\n      return;\n    }\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      initialState: undefined,\n      // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`\n      columnsToUpsert: props.columns,\n      keepOnlyColumnsToUpsert: true\n    });\n    previousColumnsProp.current = props.columns;\n    previousColumnTypesProp.current = columnTypes;\n    setGridColumnsState(columnsState);\n  }, [logger, apiRef, setGridColumnsState, props.columns, columnTypes]);\n  React.useEffect(() => {\n    if (props.columnVisibilityModel !== undefined) {\n      apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);\n    }\n  }, [apiRef, logger, props.columnVisibilityModel]);\n}"]},"metadata":{},"sourceType":"module"}