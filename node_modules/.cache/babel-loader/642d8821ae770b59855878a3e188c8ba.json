{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"quickFilterParser\", \"quickFilterFormatter\", \"debounceMs\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@mui/material/TextField';\nimport { styled } from '@mui/material/styles';\nimport { unstable_debounce as debounce } from '@mui/utils';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { useGridSelector } from '../../hooks/utils/useGridSelector';\nimport { gridQuickFilterValuesSelector } from '../../hooks/features/filter';\nimport { isDeepEqual } from '../../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst GridToolbarQuickFilterRoot = styled(TextField, {\n  name: 'MuiDataGrid',\n  slot: 'ToolbarQuickFilter',\n  overridesResolver: (props, styles) => styles.toolbarQuickFilter\n})(({\n  theme\n}) => ({\n  width: 'auto',\n  paddingBottom: theme.spacing(0.5),\n  '& input': {\n    marginLeft: theme.spacing(0.5)\n  },\n  '& .MuiInput-underline:before': {\n    borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`\n  },\n  [`& input[type=search]::-ms-clear,\n& input[type=search]::-ms-reveal`]: {\n    /* clears the 'X' icon from IE */\n    display: 'none',\n    width: 0,\n    height: 0\n  },\n  [`& input[type=\"search\"]::-webkit-search-decoration,\n  & input[type=\"search\"]::-webkit-search-cancel-button,\n  & input[type=\"search\"]::-webkit-search-results-button,\n  & input[type=\"search\"]::-webkit-search-results-decoration`]: {\n    /* clears the 'X' icon from Chrome */\n    display: 'none'\n  }\n}));\n\nconst defaultSearchValueParser = searchText => searchText.split(' ').filter(word => word !== '');\n\nconst defaultSearchValueFormatter = values => values.join(' ');\n\nfunction GridToolbarQuickFilter(props) {\n  var _rootProps$slotProps, _rootProps$slotProps2;\n\n  const {\n    quickFilterParser = defaultSearchValueParser,\n    quickFilterFormatter = defaultSearchValueFormatter,\n    debounceMs = 500\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const quickFilterValues = useGridSelector(apiRef, gridQuickFilterValuesSelector);\n  const [searchValue, setSearchValue] = React.useState(() => quickFilterFormatter(quickFilterValues != null ? quickFilterValues : []));\n  const [prevQuickFilterValues, setPrevQuickFilterValues] = React.useState(quickFilterValues);\n  React.useEffect(() => {\n    if (!isDeepEqual(prevQuickFilterValues, quickFilterValues)) {\n      // The model of quick filter value has been updated\n      setPrevQuickFilterValues(quickFilterValues); // Update the input value if needed to match the new model\n\n      setSearchValue(prevSearchValue => isDeepEqual(quickFilterParser(prevSearchValue), quickFilterValues) ? prevSearchValue : quickFilterFormatter(quickFilterValues != null ? quickFilterValues : []));\n    }\n  }, [prevQuickFilterValues, quickFilterValues, quickFilterFormatter, quickFilterParser]);\n  const updateSearchValue = React.useCallback(newSearchValue => {\n    apiRef.current.setQuickFilterValues(quickFilterParser(newSearchValue));\n  }, [apiRef, quickFilterParser]);\n  const debouncedUpdateSearchValue = React.useMemo(() => debounce(updateSearchValue, debounceMs), [updateSearchValue, debounceMs]);\n  const handleSearchValueChange = React.useCallback(event => {\n    const newSearchValue = event.target.value;\n    setSearchValue(newSearchValue);\n    debouncedUpdateSearchValue(newSearchValue);\n  }, [debouncedUpdateSearchValue]);\n  const handleSearchReset = React.useCallback(() => {\n    setSearchValue('');\n    updateSearchValue('');\n  }, [updateSearchValue]);\n  return /*#__PURE__*/_jsx(GridToolbarQuickFilterRoot, _extends({\n    as: rootProps.slots.baseTextField,\n    ownerState: rootProps,\n    variant: \"standard\",\n    value: searchValue,\n    onChange: handleSearchValueChange,\n    placeholder: apiRef.current.getLocaleText('toolbarQuickFilterPlaceholder'),\n    \"aria-label\": apiRef.current.getLocaleText('toolbarQuickFilterLabel'),\n    type: \"search\",\n    InputProps: {\n      startAdornment: /*#__PURE__*/_jsx(rootProps.slots.quickFilterIcon, {\n        fontSize: \"small\"\n      }),\n      endAdornment: /*#__PURE__*/_jsx(rootProps.slots.baseIconButton, _extends({\n        \"aria-label\": apiRef.current.getLocaleText('toolbarQuickFilterDeleteIconLabel'),\n        size: \"small\",\n        sx: {\n          visibility: searchValue ? 'visible' : 'hidden'\n        },\n        onClick: handleSearchReset\n      }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseIconButton, {\n        children: /*#__PURE__*/_jsx(rootProps.slots.quickFilterClearIcon, {\n          fontSize: \"small\"\n        })\n      }))\n    }\n  }, other, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.baseTextField));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridToolbarQuickFilter.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The debounce time in milliseconds.\n   * @default 500\n   */\n  debounceMs: PropTypes.number,\n\n  /**\n   * Function responsible for formatting values of quick filter in a string when the model is modified\n   * @param {any[]} values The new values passed to the quick filter model\n   * @returns {string} The string to display in the text field\n   */\n  quickFilterFormatter: PropTypes.func,\n\n  /**\n   * Function responsible for parsing text input in an array of independent values for quick filtering.\n   * @param {string} input The value entered by the user\n   * @returns {any[]} The array of value on which quick filter is applied\n   */\n  quickFilterParser: PropTypes.func\n} : void 0;\nexport { GridToolbarQuickFilter };","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/node_modules/@mui/x-data-grid/components/toolbar/GridToolbarQuickFilter.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","TextField","styled","unstable_debounce","debounce","useGridApiContext","useGridRootProps","useGridSelector","gridQuickFilterValuesSelector","isDeepEqual","jsx","_jsx","GridToolbarQuickFilterRoot","name","slot","overridesResolver","props","styles","toolbarQuickFilter","theme","width","paddingBottom","spacing","marginLeft","borderBottom","vars","palette","divider","display","height","defaultSearchValueParser","searchText","split","filter","word","defaultSearchValueFormatter","values","join","GridToolbarQuickFilter","_rootProps$slotProps","_rootProps$slotProps2","quickFilterParser","quickFilterFormatter","debounceMs","other","apiRef","rootProps","quickFilterValues","searchValue","setSearchValue","useState","prevQuickFilterValues","setPrevQuickFilterValues","useEffect","prevSearchValue","updateSearchValue","useCallback","newSearchValue","current","setQuickFilterValues","debouncedUpdateSearchValue","useMemo","handleSearchValueChange","event","target","value","handleSearchReset","as","slots","baseTextField","ownerState","variant","onChange","placeholder","getLocaleText","type","InputProps","startAdornment","quickFilterIcon","fontSize","endAdornment","baseIconButton","size","sx","visibility","onClick","slotProps","children","quickFilterClearIcon","process","env","NODE_ENV","propTypes","number","func"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"quickFilterParser\", \"quickFilterFormatter\", \"debounceMs\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@mui/material/TextField';\nimport { styled } from '@mui/material/styles';\nimport { unstable_debounce as debounce } from '@mui/utils';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { useGridSelector } from '../../hooks/utils/useGridSelector';\nimport { gridQuickFilterValuesSelector } from '../../hooks/features/filter';\nimport { isDeepEqual } from '../../utils/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst GridToolbarQuickFilterRoot = styled(TextField, {\n  name: 'MuiDataGrid',\n  slot: 'ToolbarQuickFilter',\n  overridesResolver: (props, styles) => styles.toolbarQuickFilter\n})(({\n  theme\n}) => ({\n  width: 'auto',\n  paddingBottom: theme.spacing(0.5),\n  '& input': {\n    marginLeft: theme.spacing(0.5)\n  },\n  '& .MuiInput-underline:before': {\n    borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`\n  },\n  [`& input[type=search]::-ms-clear,\n& input[type=search]::-ms-reveal`]: {\n    /* clears the 'X' icon from IE */\n    display: 'none',\n    width: 0,\n    height: 0\n  },\n  [`& input[type=\"search\"]::-webkit-search-decoration,\n  & input[type=\"search\"]::-webkit-search-cancel-button,\n  & input[type=\"search\"]::-webkit-search-results-button,\n  & input[type=\"search\"]::-webkit-search-results-decoration`]: {\n    /* clears the 'X' icon from Chrome */\n    display: 'none'\n  }\n}));\nconst defaultSearchValueParser = searchText => searchText.split(' ').filter(word => word !== '');\nconst defaultSearchValueFormatter = values => values.join(' ');\nfunction GridToolbarQuickFilter(props) {\n  var _rootProps$slotProps, _rootProps$slotProps2;\n  const {\n      quickFilterParser = defaultSearchValueParser,\n      quickFilterFormatter = defaultSearchValueFormatter,\n      debounceMs = 500\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const quickFilterValues = useGridSelector(apiRef, gridQuickFilterValuesSelector);\n  const [searchValue, setSearchValue] = React.useState(() => quickFilterFormatter(quickFilterValues != null ? quickFilterValues : []));\n  const [prevQuickFilterValues, setPrevQuickFilterValues] = React.useState(quickFilterValues);\n  React.useEffect(() => {\n    if (!isDeepEqual(prevQuickFilterValues, quickFilterValues)) {\n      // The model of quick filter value has been updated\n      setPrevQuickFilterValues(quickFilterValues);\n\n      // Update the input value if needed to match the new model\n      setSearchValue(prevSearchValue => isDeepEqual(quickFilterParser(prevSearchValue), quickFilterValues) ? prevSearchValue : quickFilterFormatter(quickFilterValues != null ? quickFilterValues : []));\n    }\n  }, [prevQuickFilterValues, quickFilterValues, quickFilterFormatter, quickFilterParser]);\n  const updateSearchValue = React.useCallback(newSearchValue => {\n    apiRef.current.setQuickFilterValues(quickFilterParser(newSearchValue));\n  }, [apiRef, quickFilterParser]);\n  const debouncedUpdateSearchValue = React.useMemo(() => debounce(updateSearchValue, debounceMs), [updateSearchValue, debounceMs]);\n  const handleSearchValueChange = React.useCallback(event => {\n    const newSearchValue = event.target.value;\n    setSearchValue(newSearchValue);\n    debouncedUpdateSearchValue(newSearchValue);\n  }, [debouncedUpdateSearchValue]);\n  const handleSearchReset = React.useCallback(() => {\n    setSearchValue('');\n    updateSearchValue('');\n  }, [updateSearchValue]);\n  return /*#__PURE__*/_jsx(GridToolbarQuickFilterRoot, _extends({\n    as: rootProps.slots.baseTextField,\n    ownerState: rootProps,\n    variant: \"standard\",\n    value: searchValue,\n    onChange: handleSearchValueChange,\n    placeholder: apiRef.current.getLocaleText('toolbarQuickFilterPlaceholder'),\n    \"aria-label\": apiRef.current.getLocaleText('toolbarQuickFilterLabel'),\n    type: \"search\",\n    InputProps: {\n      startAdornment: /*#__PURE__*/_jsx(rootProps.slots.quickFilterIcon, {\n        fontSize: \"small\"\n      }),\n      endAdornment: /*#__PURE__*/_jsx(rootProps.slots.baseIconButton, _extends({\n        \"aria-label\": apiRef.current.getLocaleText('toolbarQuickFilterDeleteIconLabel'),\n        size: \"small\",\n        sx: {\n          visibility: searchValue ? 'visible' : 'hidden'\n        },\n        onClick: handleSearchReset\n      }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseIconButton, {\n        children: /*#__PURE__*/_jsx(rootProps.slots.quickFilterClearIcon, {\n          fontSize: \"small\"\n        })\n      }))\n    }\n  }, other, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.baseTextField));\n}\nprocess.env.NODE_ENV !== \"production\" ? GridToolbarQuickFilter.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The debounce time in milliseconds.\n   * @default 500\n   */\n  debounceMs: PropTypes.number,\n  /**\n   * Function responsible for formatting values of quick filter in a string when the model is modified\n   * @param {any[]} values The new values passed to the quick filter model\n   * @returns {string} The string to display in the text field\n   */\n  quickFilterFormatter: PropTypes.func,\n  /**\n   * Function responsible for parsing text input in an array of independent values for quick filtering.\n   * @param {string} input The value entered by the user\n   * @returns {any[]} The array of value on which quick filter is applied\n   */\n  quickFilterParser: PropTypes.func\n} : void 0;\nexport { GridToolbarQuickFilter };"]},"metadata":{},"sourceType":"module"}