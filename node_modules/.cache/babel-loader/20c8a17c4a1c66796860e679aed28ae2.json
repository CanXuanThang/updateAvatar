{"ast":null,"code":"import { RESPONSE_STATUS_UNAUTHORIZED } from '../../../utils/httpResponseCode';\nimport { ACCESS_TOKEN_KEY } from '../../../utils/constants';\nimport Cookies from 'js-cookie';\nexport function fetchThunk(url, method = 'get') {\n  return async (dispatch, getState) => {\n    const res = await fetch(url, {\n      method,\n      headers: {\n        Authorization: 'Bearer ' + Cookies.get(ACCESS_TOKEN_KEY)\n      },\n      cache: 'no-store'\n    });\n    const json = await res.json();\n\n    if (res.status === RESPONSE_STATUS_UNAUTHORIZED) {// dispatch logout, remove access token here.\n    }\n\n    return json; // throw new Error('Error');\n  };\n}","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/src/modules/common/redux/thunk.ts"],"names":["RESPONSE_STATUS_UNAUTHORIZED","ACCESS_TOKEN_KEY","Cookies","fetchThunk","url","method","dispatch","getState","res","fetch","headers","Authorization","get","cache","json","status"],"mappings":"AAGA,SAASA,4BAAT,QAA6C,iCAA7C;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAO,SAASC,UAAT,CACLC,GADK,EAELC,MAAyC,GAAG,KAFvC,EAGsD;AAC3D,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACnC,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAACL,GAAD,EAAM;AAC3BC,MAAAA,MAD2B;AAE3BK,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAE,YAAYT,OAAO,CAACU,GAAR,CAAYX,gBAAZ;AADpB,OAFkB;AAK3BY,MAAAA,KAAK,EAAE;AALoB,KAAN,CAAvB;AAQA,UAAMC,IAAI,GAAG,MAAMN,GAAG,CAACM,IAAJ,EAAnB;;AAEA,QAAIN,GAAG,CAACO,MAAJ,KAAef,4BAAnB,EAAiD,CAC/C;AACD;;AAED,WAAOc,IAAP,CAfmC,CAgBnC;AACD,GAjBD;AAkBD","sourcesContent":["import { Action } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\nimport { AppState } from '../../../redux/reducer';\nimport { RESPONSE_STATUS_UNAUTHORIZED } from '../../../utils/httpResponseCode';\nimport { ACCESS_TOKEN_KEY } from '../../../utils/constants';\nimport Cookies from 'js-cookie';\n\nexport function fetchThunk(\n  url: string,\n  method: 'get' | 'post' | 'delete' | 'put' = 'get',\n): ThunkAction<Promise<any>, AppState, null, Action<string>> {\n  return async (dispatch, getState) => {\n    const res = await fetch(url, {\n      method,\n      headers: {\n        Authorization: 'Bearer ' + Cookies.get(ACCESS_TOKEN_KEY),\n      },\n      cache: 'no-store',\n    });\n\n    const json = await res.json();\n\n    if (res.status === RESPONSE_STATUS_UNAUTHORIZED) {\n      // dispatch logout, remove access token here.\n    }\n\n    return json;\n    // throw new Error('Error');\n  };\n}\n"]},"metadata":{},"sourceType":"module"}