{"ast":null,"code":"import _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\"],\n      _excluded2 = [\"id\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridRowModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditingSelectors';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { gridColumnFieldsSelector } from '../columns/gridColumnsSelector';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsDataRowIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { deepClone } from '../../../utils/utils';\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from '../../../models/params/gridRowParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridRowEditing = (apiRef, props) => {\n  const [rowModesModel, setRowModesModel] = React.useState({});\n  const rowModesModelRef = React.useRef(rowModesModel);\n  const prevRowModesModel = React.useRef({});\n  const focusTimeout = React.useRef(null);\n  const nextFocusedCell = React.useRef(null);\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    rowModesModel: rowModesModelProp,\n    onRowModesModelChange\n  } = props;\n\n  const runIfEditModeIsRow = callback => (...args) => {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...args);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, mode) => {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(`MUI: The row with id=${id} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n\n    const rowParams = apiRef.current.getRowParams(params.id);\n\n    const newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent('rowEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    } // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n\n\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(() => {\n      var _nextFocusedCell$curr;\n\n      focusTimeout.current = null;\n\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        // The row might have been deleted during the click\n        if (!apiRef.current.getRow(params.id)) {\n          return;\n        } // The row may already changed its mode\n\n\n        if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n          return;\n        }\n\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    });\n  }, [apiRef]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridRowModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is deprecated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        const columnFields = gridColumnFieldsSelector(apiRef).filter(field => apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field)));\n\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        } // Always prevent going to the next element in the tab sequence because the focus is\n        // handled manually to support edit components rendered inside Portals\n\n\n        event.preventDefault();\n\n        if (!reason) {\n          const index = columnFields.findIndex(field => field === params.field);\n          const nextFieldToFocus = columnFields[event.shiftKey ? index - 1 : index + 1];\n          apiRef.current.setCellFocus(params.id, nextFieldToFocus);\n        }\n      }\n\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          reason,\n          field: params.field\n        });\n\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n\n      if (event.key === ' ') {\n        return; // Space scrolls to the last row\n      }\n\n      if (isPrintableKey(event)) {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete' || event.key === 'Backspace') {\n        // Delete on Windows, Backspace on macOS\n        reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          key: event.key,\n          reason\n        });\n\n        apiRef.current.publishEvent('rowEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleRowEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason,\n      key\n    } = params;\n    const startRowEditModeParams = {\n      id,\n      fieldToFocus: field\n    };\n\n    if (reason === GridRowEditStartReasons.printableKeyDown) {\n      if (React.version.startsWith('17')) {\n        // In React 17, cleaning the input is enough.\n        // The sequence of events makes the key pressed by the end-users update the textbox directly.\n        startRowEditModeParams.deleteValue = !!field;\n      } else {\n        startRowEditModeParams.initialValue = key;\n      }\n    } else if (reason === GridRowEditStartReasons.deleteKeyDown) {\n      startRowEditModeParams.deleteValue = !!field;\n    }\n\n    apiRef.current.startRowEditMode(startRowEditModeParams);\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback(params => {\n    const {\n      id,\n      reason,\n      field\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id);\n    let cellToFocusAfter;\n\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopRowEditMode({\n      id,\n      ignoreModifications,\n      field,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'rowEditStart', runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, 'rowEditStop', runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, 'rowEditStart', props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, 'rowEditStop', props.onRowEditStop);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const updateRowModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.rowModesModel;\n\n    if (onRowModesModelChange && isNewModelDifferentFromProp) {\n      onRowModesModelChange(newModel, {});\n    }\n\n    if (props.rowModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setRowModesModel(newModel);\n    rowModesModelRef.current = newModel;\n    apiRef.current.publishEvent('rowModesModelChange', newModel);\n  });\n  const updateRowInRowModesModel = React.useCallback((id, newProps) => {\n    const newModel = _extends({}, rowModesModelRef.current);\n\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newProps);\n    } else {\n      delete newModel[id];\n    }\n\n    updateRowModesModel(newModel);\n  }, [updateRowModesModel]);\n  const updateOrDeleteRowState = React.useCallback((id, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startRowEditMode = React.useCallback(params => {\n    const {\n      id\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded);\n\n    throwIfNotInMode(id, GridRowModes.View);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.Edit\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStartRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      fieldToFocus,\n      deleteValue,\n      initialValue\n    } = params;\n    const columnFields = gridColumnFieldsSelector(apiRef);\n    const newProps = columnFields.reduce((acc, field) => {\n      const cellParams = apiRef.current.getCellParams(id, field);\n\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n\n      let newValue = apiRef.current.getCellValue(id, field); // eslint-disable-next-line @typescript-eslint/naming-convention\n\n      let unstable_updateValueOnRender = false;\n\n      if (fieldToFocus === field && (deleteValue || initialValue)) {\n        newValue = deleteValue ? '' : initialValue;\n        unstable_updateValueOnRender = true;\n      }\n\n      acc[field] = {\n        value: newValue,\n        error: false,\n        isProcessingProps: false,\n        unstable_updateValueOnRender\n      };\n      return acc;\n    }, {});\n    updateOrDeleteRowState(id, newProps);\n\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n  });\n  const stopRowEditMode = React.useCallback(params => {\n    const {\n      id\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded2);\n\n    throwIfNotInMode(id, GridRowModes.Edit);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.View\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStopRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      ignoreModifications,\n      field: focusedField,\n      cellToFocusAfter = 'none'\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id);\n\n    const finishRowEditMode = () => {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n\n      updateOrDeleteRowState(id, null);\n      updateRowInRowModesModel(id, null);\n    };\n\n    if (ignoreModifications) {\n      finishRowEditMode();\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    const isSomeFieldProcessingProps = Object.values(editingState[id]).some(fieldProps => fieldProps.isProcessingProps);\n\n    if (isSomeFieldProcessingProps) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      return;\n    }\n\n    const hasSomeFieldWithError = Object.values(editingState[id]).some(fieldProps => fieldProps.error);\n\n    if (hasSomeFieldWithError) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit; // Revert the mode in the rowModesModel prop back to \"edit\"\n\n      updateRowInRowModesModel(id, {\n        mode: GridRowModes.Edit\n      });\n      return;\n    }\n\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromRowEditing(id);\n\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevRowModesModel.current[id].mode = GridRowModes.Edit; // Revert the mode in the rowModesModel prop back to \"edit\"\n\n        updateRowInRowModesModel(id, {\n          mode: GridRowModes.Edit\n        });\n\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishRowEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishRowEditMode();\n    }\n  });\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n\n    return new Promise(resolve => {\n      const promises = [];\n\n      if (column.preProcessEditCellProps) {\n        const hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n\n        const _editingState$id = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n\n        const promise = Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: newProps,\n          hasChanged,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          }); // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n\n      Object.entries(editingState[id]).forEach(([thisField, fieldProps]) => {\n        if (thisField === field) {\n          return;\n        }\n\n        const fieldColumn = apiRef.current.getColumn(thisField);\n\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n        const _editingState$id2 = editingState[id],\n              otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n\n        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id,\n          row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(() => {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromRowEditing = React.useCallback(id => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n\n    if (!editingState[id]) {\n      return apiRef.current.getRow(id);\n    }\n\n    let rowUpdate = _extends({}, row);\n\n    Object.entries(editingState[id]).forEach(([field, fieldProps]) => {\n      const column = apiRef.current.getColumn(field);\n\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          value: fieldProps.value,\n          row: rowUpdate\n        });\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  const editingApi = {\n    getRowMode,\n    startRowEditMode,\n    stopRowEditMode\n  };\n  const editingPrivateApi = {\n    setRowEditingEditCellValue,\n    getRowWithUpdatedValuesFromRowEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'public');\n  useGridApiMethod(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (rowModesModelProp) {\n      updateRowModesModel(rowModesModelProp);\n    }\n  }, [rowModesModelProp, updateRowModesModel]);\n  React.useEffect(() => {\n    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef); // Update the ref here because updateStateToStopRowEditMode may change it later\n\n    const copyOfPrevRowModesModel = prevRowModesModel.current;\n    prevRowModesModel.current = deepClone(rowModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(rowModesModel).forEach(([id, params]) => {\n      var _copyOfPrevRowModesMo, _idToIdLookup$id;\n\n      const prevMode = ((_copyOfPrevRowModesMo = copyOfPrevRowModesModel[id]) == null ? void 0 : _copyOfPrevRowModesMo.mode) || GridRowModes.View;\n      const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n\n      if (params.mode === GridRowModes.Edit && prevMode === GridRowModes.View) {\n        updateStateToStartRowEditMode(_extends({\n          id: originalId\n        }, params));\n      } else if (params.mode === GridRowModes.View && prevMode === GridRowModes.Edit) {\n        updateStateToStopRowEditMode(_extends({\n          id: originalId\n        }, params));\n      }\n    });\n  }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);\n};","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/node_modules/@mui/x-data-grid/hooks/features/editing/useGridRowEditing.js"],"names":["_toPropertyKey","_objectWithoutPropertiesLoose","_extends","_excluded","_excluded2","React","unstable_useEventCallback","useEventCallback","useGridApiEventHandler","useGridApiOptionHandler","GridEditModes","GridRowModes","useGridApiMethod","gridEditRowsStateSelector","isPrintableKey","gridColumnFieldsSelector","buildWarning","gridRowsDataRowIdToIdLookupSelector","deepClone","GridRowEditStopReasons","GridRowEditStartReasons","missingOnProcessRowUpdateErrorWarning","useGridRowEditing","apiRef","props","rowModesModel","setRowModesModel","useState","rowModesModelRef","useRef","prevRowModesModel","focusTimeout","nextFocusedCell","processRowUpdate","onProcessRowUpdateError","rowModesModelProp","onRowModesModelChange","runIfEditModeIsRow","callback","args","editMode","Row","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","throwIfNotInMode","mode","getRowMode","handleCellDoubleClick","event","isEditable","Edit","rowParams","getRowParams","newParams","reason","cellDoubleClick","publishEvent","handleCellFocusIn","handleCellFocusOut","View","setTimeout","_nextFocusedCell$curr","getRow","rowFocusOut","useEffect","clearTimeout","handleCellKeyDown","cellMode","which","key","escapeKeyDown","enterKeyDown","columnFields","filter","shiftKey","shiftTabKeyDown","length","tabKeyDown","preventDefault","index","findIndex","nextFieldToFocus","setCellFocus","printableKeyDown","ctrlKey","metaKey","deleteKeyDown","handleRowEditStart","startRowEditModeParams","fieldToFocus","version","startsWith","deleteValue","initialValue","startRowEditMode","handleRowEditStop","runPendingEditCellValueMutation","cellToFocusAfter","ignoreModifications","stopRowEditMode","onRowEditStart","onRowEditStop","Cell","editingState","state","isEditing","Object","keys","updateRowModesModel","newModel","isNewModelDifferentFromProp","updateRowInRowModesModel","newProps","updateOrDeleteRowState","setState","newEditingState","editRows","forceUpdate","updateOrDeleteFieldState","other","updateStateToStartRowEditMode","reduce","acc","cellParams","newValue","getCellValue","unstable_updateValueOnRender","value","error","isProcessingProps","updateStateToStopRowEditMode","focusedField","finishRowEditMode","moveFocusToRelativeCell","row","isSomeFieldProcessingProps","values","some","fieldProps","hasSomeFieldWithError","rowUpdate","getRowWithUpdatedValuesFromRowEditing","handleError","errorThrown","Promise","resolve","then","finalRowUpdate","updateRows","catch","setRowEditingEditCellValue","debounceMs","unstable_skipValueParser","skipValueParser","column","getColumn","parsedValue","valueParser","changeReason","preProcessEditCellProps","promises","hasChanged","_editingState$id","otherFieldsProps","map","promise","processedProps","push","entries","forEach","thisField","fieldColumn","_editingState$id2","all","valueSetter","editingApi","editingPrivateApi","idToIdLookup","copyOfPrevRowModesModel","_copyOfPrevRowModesMo","_idToIdLookup$id","prevMode","originalId"],"mappings":"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","sourcesContent":["import _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\"],\n  _excluded2 = [\"id\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridRowModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditingSelectors';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { gridColumnFieldsSelector } from '../columns/gridColumnsSelector';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsDataRowIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { deepClone } from '../../../utils/utils';\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from '../../../models/params/gridRowParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridRowEditing = (apiRef, props) => {\n  const [rowModesModel, setRowModesModel] = React.useState({});\n  const rowModesModelRef = React.useRef(rowModesModel);\n  const prevRowModesModel = React.useRef({});\n  const focusTimeout = React.useRef(null);\n  const nextFocusedCell = React.useRef(null);\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    rowModesModel: rowModesModelProp,\n    onRowModesModelChange\n  } = props;\n  const runIfEditModeIsRow = callback => (...args) => {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...args);\n    }\n  };\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, mode) => {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(`MUI: The row with id=${id} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n    const rowParams = apiRef.current.getRowParams(params.id);\n    const newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n    apiRef.current.publishEvent('rowEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    }\n    // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(() => {\n      var _nextFocusedCell$curr;\n      focusTimeout.current = null;\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        // The row might have been deleted during the click\n        if (!apiRef.current.getRow(params.id)) {\n          return;\n        }\n\n        // The row may already changed its mode\n        if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n          return;\n        }\n        const rowParams = apiRef.current.getRowParams(params.id);\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    });\n  }, [apiRef]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridRowModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is deprecated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n      let reason;\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        const columnFields = gridColumnFieldsSelector(apiRef).filter(field => apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field)));\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        }\n\n        // Always prevent going to the next element in the tab sequence because the focus is\n        // handled manually to support edit components rendered inside Portals\n        event.preventDefault();\n        if (!reason) {\n          const index = columnFields.findIndex(field => field === params.field);\n          const nextFieldToFocus = columnFields[event.shiftKey ? index - 1 : index + 1];\n          apiRef.current.setCellFocus(params.id, nextFieldToFocus);\n        }\n      }\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n        const newParams = _extends({}, rowParams, {\n          reason,\n          field: params.field\n        });\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n      if (event.key === ' ') {\n        return; // Space scrolls to the last row\n      }\n\n      if (isPrintableKey(event)) {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete' || event.key === 'Backspace') {\n        // Delete on Windows, Backspace on macOS\n        reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          key: event.key,\n          reason\n        });\n        apiRef.current.publishEvent('rowEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleRowEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason,\n      key\n    } = params;\n    const startRowEditModeParams = {\n      id,\n      fieldToFocus: field\n    };\n    if (reason === GridRowEditStartReasons.printableKeyDown) {\n      if (React.version.startsWith('17')) {\n        // In React 17, cleaning the input is enough.\n        // The sequence of events makes the key pressed by the end-users update the textbox directly.\n        startRowEditModeParams.deleteValue = !!field;\n      } else {\n        startRowEditModeParams.initialValue = key;\n      }\n    } else if (reason === GridRowEditStartReasons.deleteKeyDown) {\n      startRowEditModeParams.deleteValue = !!field;\n    }\n    apiRef.current.startRowEditMode(startRowEditModeParams);\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback(params => {\n    const {\n      id,\n      reason,\n      field\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id);\n    let cellToFocusAfter;\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopRowEditMode({\n      id,\n      ignoreModifications,\n      field,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'rowEditStart', runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, 'rowEditStop', runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, 'rowEditStart', props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, 'rowEditStop', props.onRowEditStop);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const updateRowModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.rowModesModel;\n    if (onRowModesModelChange && isNewModelDifferentFromProp) {\n      onRowModesModelChange(newModel, {});\n    }\n    if (props.rowModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setRowModesModel(newModel);\n    rowModesModelRef.current = newModel;\n    apiRef.current.publishEvent('rowModesModelChange', newModel);\n  });\n  const updateRowInRowModesModel = React.useCallback((id, newProps) => {\n    const newModel = _extends({}, rowModesModelRef.current);\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newProps);\n    } else {\n      delete newModel[id];\n    }\n    updateRowModesModel(newModel);\n  }, [updateRowModesModel]);\n  const updateOrDeleteRowState = React.useCallback((id, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startRowEditMode = React.useCallback(params => {\n    const {\n        id\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded);\n    throwIfNotInMode(id, GridRowModes.View);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.Edit\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStartRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      fieldToFocus,\n      deleteValue,\n      initialValue\n    } = params;\n    const columnFields = gridColumnFieldsSelector(apiRef);\n    const newProps = columnFields.reduce((acc, field) => {\n      const cellParams = apiRef.current.getCellParams(id, field);\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n      let newValue = apiRef.current.getCellValue(id, field);\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      let unstable_updateValueOnRender = false;\n      if (fieldToFocus === field && (deleteValue || initialValue)) {\n        newValue = deleteValue ? '' : initialValue;\n        unstable_updateValueOnRender = true;\n      }\n      acc[field] = {\n        value: newValue,\n        error: false,\n        isProcessingProps: false,\n        unstable_updateValueOnRender\n      };\n      return acc;\n    }, {});\n    updateOrDeleteRowState(id, newProps);\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n  });\n  const stopRowEditMode = React.useCallback(params => {\n    const {\n        id\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded2);\n    throwIfNotInMode(id, GridRowModes.Edit);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.View\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStopRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      ignoreModifications,\n      field: focusedField,\n      cellToFocusAfter = 'none'\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id);\n    const finishRowEditMode = () => {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n      updateOrDeleteRowState(id, null);\n      updateRowInRowModesModel(id, null);\n    };\n    if (ignoreModifications) {\n      finishRowEditMode();\n      return;\n    }\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    const isSomeFieldProcessingProps = Object.values(editingState[id]).some(fieldProps => fieldProps.isProcessingProps);\n    if (isSomeFieldProcessingProps) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      return;\n    }\n    const hasSomeFieldWithError = Object.values(editingState[id]).some(fieldProps => fieldProps.error);\n    if (hasSomeFieldWithError) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      // Revert the mode in the rowModesModel prop back to \"edit\"\n      updateRowInRowModesModel(id, {\n        mode: GridRowModes.Edit\n      });\n      return;\n    }\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromRowEditing(id);\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevRowModesModel.current[id].mode = GridRowModes.Edit;\n        // Revert the mode in the rowModesModel prop back to \"edit\"\n        updateRowInRowModesModel(id, {\n          mode: GridRowModes.Edit\n        });\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishRowEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishRowEditMode();\n    }\n  });\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n    return new Promise(resolve => {\n      const promises = [];\n      if (column.preProcessEditCellProps) {\n        const hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n        const _editingState$id = editingState[id],\n          otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n        const promise = Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: newProps,\n          hasChanged,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n      Object.entries(editingState[id]).forEach(([thisField, fieldProps]) => {\n        if (thisField === field) {\n          return;\n        }\n        const fieldColumn = apiRef.current.getColumn(thisField);\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n        const _editingState$id2 = editingState[id],\n          otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id,\n          row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(() => {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromRowEditing = React.useCallback(id => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    if (!editingState[id]) {\n      return apiRef.current.getRow(id);\n    }\n    let rowUpdate = _extends({}, row);\n    Object.entries(editingState[id]).forEach(([field, fieldProps]) => {\n      const column = apiRef.current.getColumn(field);\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          value: fieldProps.value,\n          row: rowUpdate\n        });\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  const editingApi = {\n    getRowMode,\n    startRowEditMode,\n    stopRowEditMode\n  };\n  const editingPrivateApi = {\n    setRowEditingEditCellValue,\n    getRowWithUpdatedValuesFromRowEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'public');\n  useGridApiMethod(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (rowModesModelProp) {\n      updateRowModesModel(rowModesModelProp);\n    }\n  }, [rowModesModelProp, updateRowModesModel]);\n  React.useEffect(() => {\n    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);\n\n    // Update the ref here because updateStateToStopRowEditMode may change it later\n    const copyOfPrevRowModesModel = prevRowModesModel.current;\n    prevRowModesModel.current = deepClone(rowModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(rowModesModel).forEach(([id, params]) => {\n      var _copyOfPrevRowModesMo, _idToIdLookup$id;\n      const prevMode = ((_copyOfPrevRowModesMo = copyOfPrevRowModesModel[id]) == null ? void 0 : _copyOfPrevRowModesMo.mode) || GridRowModes.View;\n      const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n      if (params.mode === GridRowModes.Edit && prevMode === GridRowModes.View) {\n        updateStateToStartRowEditMode(_extends({\n          id: originalId\n        }, params));\n      } else if (params.mode === GridRowModes.View && prevMode === GridRowModes.Edit) {\n        updateStateToStopRowEditMode(_extends({\n          id: originalId\n        }, params));\n      }\n    });\n  }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);\n};"]},"metadata":{},"sourceType":"module"}