{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"field\", \"id\", \"value\", \"formattedValue\", \"row\", \"rowNode\", \"colDef\", \"isEditable\", \"cellMode\", \"hasFocus\", \"tabIndex\", \"api\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { isSpaceKey } from '../../utils/keyboardUtils';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['checkboxInput']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nconst GridCellCheckboxForwardRef = /*#__PURE__*/React.forwardRef(function GridCellCheckboxRenderer(props, ref) {\n  var _rootProps$slotProps;\n\n  const {\n    field,\n    id,\n    value: isChecked,\n    rowNode,\n    hasFocus,\n    tabIndex\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const ownerState = {\n    classes: rootProps.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const checkboxElement = React.useRef(null);\n  const rippleRef = React.useRef(null);\n  const handleRef = useForkRef(checkboxElement, ref);\n  const element = apiRef.current.getCellElement(id, field);\n\n  const handleChange = event => {\n    const params = {\n      value: event.target.checked,\n      id\n    };\n    apiRef.current.publishEvent('rowSelectionCheckboxChange', params, event);\n  };\n\n  React.useLayoutEffect(() => {\n    if (tabIndex === 0 && element) {\n      element.tabIndex = -1;\n    }\n  }, [element, tabIndex]);\n  React.useEffect(() => {\n    if (hasFocus) {\n      var _checkboxElement$curr;\n\n      const input = (_checkboxElement$curr = checkboxElement.current) == null ? void 0 : _checkboxElement$curr.querySelector('input');\n      input == null ? void 0 : input.focus({\n        preventScroll: true\n      });\n    } else if (rippleRef.current) {\n      // Only available in @mui/material v5.4.1 or later\n      rippleRef.current.stop({});\n    }\n  }, [hasFocus]);\n  const handleKeyDown = React.useCallback(event => {\n    if (isSpaceKey(event.key)) {\n      // We call event.stopPropagation to avoid selecting the row and also scrolling to bottom\n      // TODO: Remove and add a check inside useGridKeyboardNavigation\n      event.stopPropagation();\n    }\n  }, []);\n\n  if (rowNode.type === 'footer' || rowNode.type === 'pinnedRow') {\n    return null;\n  }\n\n  const isSelectable = apiRef.current.isRowSelectable(id);\n  const label = apiRef.current.getLocaleText(isChecked ? 'checkboxSelectionUnselectRow' : 'checkboxSelectionSelectRow');\n  return /*#__PURE__*/_jsx(rootProps.slots.baseCheckbox, _extends({\n    ref: handleRef,\n    tabIndex: tabIndex,\n    checked: isChecked,\n    onChange: handleChange,\n    className: classes.root,\n    inputProps: {\n      'aria-label': label\n    },\n    onKeyDown: handleKeyDown,\n    disabled: !isSelectable,\n    touchRippleRef: rippleRef\n  }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseCheckbox, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridCellCheckboxForwardRef.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * GridApi that let you manipulate the grid.\n   */\n  api: PropTypes.object.isRequired,\n\n  /**\n   * The mode of the cell.\n   */\n  cellMode: PropTypes.oneOf(['edit', 'view']).isRequired,\n\n  /**\n   * The column of the row that the current cell belongs to.\n   */\n  colDef: PropTypes.object.isRequired,\n\n  /**\n   * The column field of the cell that triggered the event.\n   */\n  field: PropTypes.string.isRequired,\n\n  /**\n   * A ref allowing to set imperative focus.\n   * It can be passed to the element that should receive focus.\n   * @ignore - do not document.\n   */\n  focusElementRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.shape({\n      focus: PropTypes.func.isRequired\n    })\n  })]),\n\n  /**\n   * The cell value formatted with the column valueFormatter.\n   */\n  formattedValue: PropTypes.any,\n\n  /**\n   * If true, the cell is the active element.\n   */\n  hasFocus: PropTypes.bool.isRequired,\n\n  /**\n   * The grid row id.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n\n  /**\n   * If true, the cell is editable.\n   */\n  isEditable: PropTypes.bool,\n\n  /**\n   * The row model of the row that the current cell belongs to.\n   */\n  row: PropTypes.any.isRequired,\n\n  /**\n   * The node of the row that the current cell belongs to.\n   */\n  rowNode: PropTypes.object.isRequired,\n\n  /**\n   * the tabIndex value.\n   */\n  tabIndex: PropTypes.oneOf([-1, 0]).isRequired,\n\n  /**\n   * The cell value.\n   * If the column has `valueGetter`, use `params.row` to directly access the fields.\n   */\n  value: PropTypes.any\n} : void 0;\nexport { GridCellCheckboxForwardRef };\nexport const GridCellCheckboxRenderer = GridCellCheckboxForwardRef;","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/node_modules/@mui/x-data-grid/components/columnSelection/GridCellCheckboxRenderer.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","unstable_composeClasses","composeClasses","unstable_useForkRef","useForkRef","isSpaceKey","useGridApiContext","useGridRootProps","getDataGridUtilityClass","jsx","_jsx","useUtilityClasses","ownerState","classes","slots","root","GridCellCheckboxForwardRef","forwardRef","GridCellCheckboxRenderer","props","ref","_rootProps$slotProps","field","id","value","isChecked","rowNode","hasFocus","tabIndex","other","apiRef","rootProps","checkboxElement","useRef","rippleRef","handleRef","element","current","getCellElement","handleChange","event","params","target","checked","publishEvent","useLayoutEffect","useEffect","_checkboxElement$curr","input","querySelector","focus","preventScroll","stop","handleKeyDown","useCallback","key","stopPropagation","type","isSelectable","isRowSelectable","label","getLocaleText","baseCheckbox","onChange","className","inputProps","onKeyDown","disabled","touchRippleRef","slotProps","process","env","NODE_ENV","propTypes","api","object","isRequired","cellMode","oneOf","colDef","string","focusElementRef","oneOfType","func","shape","formattedValue","any","bool","number","isEditable","row"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"field\", \"id\", \"value\", \"formattedValue\", \"row\", \"rowNode\", \"colDef\", \"isEditable\", \"cellMode\", \"hasFocus\", \"tabIndex\", \"api\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { isSpaceKey } from '../../utils/keyboardUtils';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['checkboxInput']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nconst GridCellCheckboxForwardRef = /*#__PURE__*/React.forwardRef(function GridCellCheckboxRenderer(props, ref) {\n  var _rootProps$slotProps;\n  const {\n      field,\n      id,\n      value: isChecked,\n      rowNode,\n      hasFocus,\n      tabIndex\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const ownerState = {\n    classes: rootProps.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const checkboxElement = React.useRef(null);\n  const rippleRef = React.useRef(null);\n  const handleRef = useForkRef(checkboxElement, ref);\n  const element = apiRef.current.getCellElement(id, field);\n  const handleChange = event => {\n    const params = {\n      value: event.target.checked,\n      id\n    };\n    apiRef.current.publishEvent('rowSelectionCheckboxChange', params, event);\n  };\n  React.useLayoutEffect(() => {\n    if (tabIndex === 0 && element) {\n      element.tabIndex = -1;\n    }\n  }, [element, tabIndex]);\n  React.useEffect(() => {\n    if (hasFocus) {\n      var _checkboxElement$curr;\n      const input = (_checkboxElement$curr = checkboxElement.current) == null ? void 0 : _checkboxElement$curr.querySelector('input');\n      input == null ? void 0 : input.focus({\n        preventScroll: true\n      });\n    } else if (rippleRef.current) {\n      // Only available in @mui/material v5.4.1 or later\n      rippleRef.current.stop({});\n    }\n  }, [hasFocus]);\n  const handleKeyDown = React.useCallback(event => {\n    if (isSpaceKey(event.key)) {\n      // We call event.stopPropagation to avoid selecting the row and also scrolling to bottom\n      // TODO: Remove and add a check inside useGridKeyboardNavigation\n      event.stopPropagation();\n    }\n  }, []);\n  if (rowNode.type === 'footer' || rowNode.type === 'pinnedRow') {\n    return null;\n  }\n  const isSelectable = apiRef.current.isRowSelectable(id);\n  const label = apiRef.current.getLocaleText(isChecked ? 'checkboxSelectionUnselectRow' : 'checkboxSelectionSelectRow');\n  return /*#__PURE__*/_jsx(rootProps.slots.baseCheckbox, _extends({\n    ref: handleRef,\n    tabIndex: tabIndex,\n    checked: isChecked,\n    onChange: handleChange,\n    className: classes.root,\n    inputProps: {\n      'aria-label': label\n    },\n    onKeyDown: handleKeyDown,\n    disabled: !isSelectable,\n    touchRippleRef: rippleRef\n  }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseCheckbox, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridCellCheckboxForwardRef.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * GridApi that let you manipulate the grid.\n   */\n  api: PropTypes.object.isRequired,\n  /**\n   * The mode of the cell.\n   */\n  cellMode: PropTypes.oneOf(['edit', 'view']).isRequired,\n  /**\n   * The column of the row that the current cell belongs to.\n   */\n  colDef: PropTypes.object.isRequired,\n  /**\n   * The column field of the cell that triggered the event.\n   */\n  field: PropTypes.string.isRequired,\n  /**\n   * A ref allowing to set imperative focus.\n   * It can be passed to the element that should receive focus.\n   * @ignore - do not document.\n   */\n  focusElementRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.shape({\n      focus: PropTypes.func.isRequired\n    })\n  })]),\n  /**\n   * The cell value formatted with the column valueFormatter.\n   */\n  formattedValue: PropTypes.any,\n  /**\n   * If true, the cell is the active element.\n   */\n  hasFocus: PropTypes.bool.isRequired,\n  /**\n   * The grid row id.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  /**\n   * If true, the cell is editable.\n   */\n  isEditable: PropTypes.bool,\n  /**\n   * The row model of the row that the current cell belongs to.\n   */\n  row: PropTypes.any.isRequired,\n  /**\n   * The node of the row that the current cell belongs to.\n   */\n  rowNode: PropTypes.object.isRequired,\n  /**\n   * the tabIndex value.\n   */\n  tabIndex: PropTypes.oneOf([-1, 0]).isRequired,\n  /**\n   * The cell value.\n   * If the column has `valueGetter`, use `params.row` to directly access the fields.\n   */\n  value: PropTypes.any\n} : void 0;\nexport { GridCellCheckboxForwardRef };\nexport const GridCellCheckboxRenderer = GridCellCheckboxForwardRef;"]},"metadata":{},"sourceType":"module"}