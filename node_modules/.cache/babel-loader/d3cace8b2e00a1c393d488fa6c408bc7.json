{"ast":null,"code":"import * as React from 'react';\nimport { useGridApiMethod, useGridNativeEventListener } from '../../utils';\n\nfunction writeToClipboardPolyfill(data) {\n  const span = document.createElement('span');\n  span.style.whiteSpace = 'pre';\n  span.style.userSelect = 'all';\n  span.style.opacity = '0px';\n  span.textContent = data;\n  document.body.appendChild(span);\n  const range = document.createRange();\n  range.selectNode(span);\n  const selection = window.getSelection();\n  selection.removeAllRanges();\n  selection.addRange(range);\n\n  try {\n    document.execCommand('copy');\n  } finally {\n    document.body.removeChild(span);\n  }\n}\n\nfunction hasNativeSelection(element) {\n  var _window$getSelection; // When getSelection is called on an <iframe> that is not displayed Firefox will return null.\n\n\n  if ((_window$getSelection = window.getSelection()) != null && _window$getSelection.toString()) {\n    return true;\n  } // window.getSelection() returns an empty string in Firefox for selections inside a form element.\n  // See: https://bugzilla.mozilla.org/show_bug.cgi?id=85686.\n  // Instead, we can use element.selectionStart that is only defined on form elements.\n\n\n  if (element && (element.selectionEnd || 0) - (element.selectionStart || 0) > 0) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * @requires useGridCsvExport (method)\n * @requires useGridSelection (method)\n */\n\n\nexport const useGridClipboard = apiRef => {\n  const copySelectedRowsToClipboard = React.useCallback(() => {\n    if (apiRef.current.getSelectedRows().size === 0) {\n      return;\n    }\n\n    const data = apiRef.current.getDataAsCsv({\n      includeHeaders: false,\n      delimiter: '\\t'\n    });\n\n    if (navigator.clipboard) {\n      navigator.clipboard.writeText(data).catch(() => {\n        writeToClipboardPolyfill(data);\n      });\n    } else {\n      writeToClipboardPolyfill(data);\n    }\n  }, [apiRef]);\n  const handleKeydown = React.useCallback(event => {\n    const isModifierKeyPressed = event.ctrlKey || event.metaKey; // event.code === 'KeyC' is not enough as event.code assume a QWERTY keyboard layout which would\n    // be wrong with a Dvorak keyboard (as if pressing J).\n\n    if (String.fromCharCode(event.keyCode) !== 'C' || !isModifierKeyPressed) {\n      return;\n    } // Do nothing if there's a native selection\n\n\n    if (hasNativeSelection(event.target)) {\n      return;\n    }\n\n    apiRef.current.unstable_copySelectedRowsToClipboard();\n  }, [apiRef]);\n  useGridNativeEventListener(apiRef, apiRef.current.rootElementRef, 'keydown', handleKeydown);\n  const clipboardApi = {\n    unstable_copySelectedRowsToClipboard: copySelectedRowsToClipboard\n  };\n  useGridApiMethod(apiRef, clipboardApi, 'public');\n};","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/node_modules/@mui/x-data-grid/hooks/features/clipboard/useGridClipboard.js"],"names":["React","useGridApiMethod","useGridNativeEventListener","writeToClipboardPolyfill","data","span","document","createElement","style","whiteSpace","userSelect","opacity","textContent","body","appendChild","range","createRange","selectNode","selection","window","getSelection","removeAllRanges","addRange","execCommand","removeChild","hasNativeSelection","element","_window$getSelection","toString","selectionEnd","selectionStart","useGridClipboard","apiRef","copySelectedRowsToClipboard","useCallback","current","getSelectedRows","size","getDataAsCsv","includeHeaders","delimiter","navigator","clipboard","writeText","catch","handleKeydown","event","isModifierKeyPressed","ctrlKey","metaKey","String","fromCharCode","keyCode","target","unstable_copySelectedRowsToClipboard","rootElementRef","clipboardApi"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useGridApiMethod, useGridNativeEventListener } from '../../utils';\nfunction writeToClipboardPolyfill(data) {\n  const span = document.createElement('span');\n  span.style.whiteSpace = 'pre';\n  span.style.userSelect = 'all';\n  span.style.opacity = '0px';\n  span.textContent = data;\n  document.body.appendChild(span);\n  const range = document.createRange();\n  range.selectNode(span);\n  const selection = window.getSelection();\n  selection.removeAllRanges();\n  selection.addRange(range);\n  try {\n    document.execCommand('copy');\n  } finally {\n    document.body.removeChild(span);\n  }\n}\nfunction hasNativeSelection(element) {\n  var _window$getSelection;\n  // When getSelection is called on an <iframe> that is not displayed Firefox will return null.\n  if ((_window$getSelection = window.getSelection()) != null && _window$getSelection.toString()) {\n    return true;\n  }\n\n  // window.getSelection() returns an empty string in Firefox for selections inside a form element.\n  // See: https://bugzilla.mozilla.org/show_bug.cgi?id=85686.\n  // Instead, we can use element.selectionStart that is only defined on form elements.\n  if (element && (element.selectionEnd || 0) - (element.selectionStart || 0) > 0) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * @requires useGridCsvExport (method)\n * @requires useGridSelection (method)\n */\nexport const useGridClipboard = apiRef => {\n  const copySelectedRowsToClipboard = React.useCallback(() => {\n    if (apiRef.current.getSelectedRows().size === 0) {\n      return;\n    }\n    const data = apiRef.current.getDataAsCsv({\n      includeHeaders: false,\n      delimiter: '\\t'\n    });\n    if (navigator.clipboard) {\n      navigator.clipboard.writeText(data).catch(() => {\n        writeToClipboardPolyfill(data);\n      });\n    } else {\n      writeToClipboardPolyfill(data);\n    }\n  }, [apiRef]);\n  const handleKeydown = React.useCallback(event => {\n    const isModifierKeyPressed = event.ctrlKey || event.metaKey;\n    // event.code === 'KeyC' is not enough as event.code assume a QWERTY keyboard layout which would\n    // be wrong with a Dvorak keyboard (as if pressing J).\n    if (String.fromCharCode(event.keyCode) !== 'C' || !isModifierKeyPressed) {\n      return;\n    }\n\n    // Do nothing if there's a native selection\n    if (hasNativeSelection(event.target)) {\n      return;\n    }\n    apiRef.current.unstable_copySelectedRowsToClipboard();\n  }, [apiRef]);\n  useGridNativeEventListener(apiRef, apiRef.current.rootElementRef, 'keydown', handleKeydown);\n  const clipboardApi = {\n    unstable_copySelectedRowsToClipboard: copySelectedRowsToClipboard\n  };\n  useGridApiMethod(apiRef, clipboardApi, 'public');\n};"]},"metadata":{},"sourceType":"module"}