{"ast":null,"code":"import * as React from 'react';\nimport { useGridApiMethod } from '../utils/useGridApiMethod';\nimport { GridSignature } from '../utils/useGridApiEventHandler';\nimport { EventManager } from '../../utils/EventManager';\n\nconst isSyntheticEvent = event => {\n  return event.isPropagationStopped !== undefined;\n};\n\nlet globalId = 0;\n\nconst wrapPublicApi = publicApi => {\n  const privateOnlyApi = {};\n\n  privateOnlyApi.getPublicApi = () => publicApi;\n\n  privateOnlyApi.register = (visibility, methods) => {\n    Object.keys(methods).forEach(methodName => {\n      if (visibility === 'public') {\n        publicApi[methodName] = methods[methodName];\n      } else {\n        privateOnlyApi[methodName] = methods[methodName];\n      }\n    });\n  };\n\n  const handler = {\n    get: (obj, prop) => {\n      if (prop in obj) {\n        return obj[prop];\n      }\n\n      return privateOnlyApi[prop];\n    },\n    set: (obj, prop, value) => {\n      obj[prop] = value;\n      return true;\n    }\n  };\n  return new Proxy(publicApi, handler);\n};\n\nexport function useGridApiInitialization(inputApiRef, props) {\n  const publicApiRef = React.useRef();\n\n  if (!publicApiRef.current) {\n    publicApiRef.current = {\n      state: {},\n      instanceId: {\n        id: globalId\n      }\n    };\n    globalId += 1;\n  }\n\n  const privateApiRef = React.useRef();\n\n  if (!privateApiRef.current) {\n    privateApiRef.current = wrapPublicApi(publicApiRef.current);\n    privateApiRef.current.register('private', {\n      caches: {},\n      eventManager: new EventManager()\n    });\n  }\n\n  React.useImperativeHandle(inputApiRef, () => publicApiRef.current, [publicApiRef]);\n  const publishEvent = React.useCallback((...args) => {\n    const [name, params, event = {}] = args;\n    event.defaultMuiPrevented = false;\n\n    if (isSyntheticEvent(event) && event.isPropagationStopped()) {\n      return;\n    }\n\n    const details = props.signature === GridSignature.DataGridPro ? {\n      api: privateApiRef.current.getPublicApi()\n    } : {};\n    privateApiRef.current.eventManager.emit(name, params, event, details);\n  }, [privateApiRef, props.signature]);\n  const subscribeEvent = React.useCallback((event, handler, options) => {\n    privateApiRef.current.eventManager.on(event, handler, options);\n    const api = privateApiRef.current;\n    return () => {\n      api.eventManager.removeListener(event, handler);\n    };\n  }, [privateApiRef]);\n  useGridApiMethod(privateApiRef, {\n    subscribeEvent,\n    publishEvent\n  }, 'public');\n  React.useEffect(() => {\n    const api = privateApiRef.current;\n    return () => {\n      api.publishEvent('unmount');\n    };\n  }, [privateApiRef]);\n  return privateApiRef;\n}","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/node_modules/@mui/x-data-grid/hooks/core/useGridApiInitialization.js"],"names":["React","useGridApiMethod","GridSignature","EventManager","isSyntheticEvent","event","isPropagationStopped","undefined","globalId","wrapPublicApi","publicApi","privateOnlyApi","getPublicApi","register","visibility","methods","Object","keys","forEach","methodName","handler","get","obj","prop","set","value","Proxy","useGridApiInitialization","inputApiRef","props","publicApiRef","useRef","current","state","instanceId","id","privateApiRef","caches","eventManager","useImperativeHandle","publishEvent","useCallback","args","name","params","defaultMuiPrevented","details","signature","DataGridPro","api","emit","subscribeEvent","options","on","removeListener","useEffect"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useGridApiMethod } from '../utils/useGridApiMethod';\nimport { GridSignature } from '../utils/useGridApiEventHandler';\nimport { EventManager } from '../../utils/EventManager';\nconst isSyntheticEvent = event => {\n  return event.isPropagationStopped !== undefined;\n};\nlet globalId = 0;\nconst wrapPublicApi = publicApi => {\n  const privateOnlyApi = {};\n  privateOnlyApi.getPublicApi = () => publicApi;\n  privateOnlyApi.register = (visibility, methods) => {\n    Object.keys(methods).forEach(methodName => {\n      if (visibility === 'public') {\n        publicApi[methodName] = methods[methodName];\n      } else {\n        privateOnlyApi[methodName] = methods[methodName];\n      }\n    });\n  };\n  const handler = {\n    get: (obj, prop) => {\n      if (prop in obj) {\n        return obj[prop];\n      }\n      return privateOnlyApi[prop];\n    },\n    set: (obj, prop, value) => {\n      obj[prop] = value;\n      return true;\n    }\n  };\n  return new Proxy(publicApi, handler);\n};\nexport function useGridApiInitialization(inputApiRef, props) {\n  const publicApiRef = React.useRef();\n  if (!publicApiRef.current) {\n    publicApiRef.current = {\n      state: {},\n      instanceId: {\n        id: globalId\n      }\n    };\n    globalId += 1;\n  }\n  const privateApiRef = React.useRef();\n  if (!privateApiRef.current) {\n    privateApiRef.current = wrapPublicApi(publicApiRef.current);\n    privateApiRef.current.register('private', {\n      caches: {},\n      eventManager: new EventManager()\n    });\n  }\n  React.useImperativeHandle(inputApiRef, () => publicApiRef.current, [publicApiRef]);\n  const publishEvent = React.useCallback((...args) => {\n    const [name, params, event = {}] = args;\n    event.defaultMuiPrevented = false;\n    if (isSyntheticEvent(event) && event.isPropagationStopped()) {\n      return;\n    }\n    const details = props.signature === GridSignature.DataGridPro ? {\n      api: privateApiRef.current.getPublicApi()\n    } : {};\n    privateApiRef.current.eventManager.emit(name, params, event, details);\n  }, [privateApiRef, props.signature]);\n  const subscribeEvent = React.useCallback((event, handler, options) => {\n    privateApiRef.current.eventManager.on(event, handler, options);\n    const api = privateApiRef.current;\n    return () => {\n      api.eventManager.removeListener(event, handler);\n    };\n  }, [privateApiRef]);\n  useGridApiMethod(privateApiRef, {\n    subscribeEvent,\n    publishEvent\n  }, 'public');\n  React.useEffect(() => {\n    const api = privateApiRef.current;\n    return () => {\n      api.publishEvent('unmount');\n    };\n  }, [privateApiRef]);\n  return privateApiRef;\n}"]},"metadata":{},"sourceType":"module"}