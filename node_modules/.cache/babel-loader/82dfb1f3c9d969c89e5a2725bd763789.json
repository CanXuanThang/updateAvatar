{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument } from '@mui/utils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { gridFocusCellSelector, unstable_gridFocusColumnGroupHeaderSelector } from './gridFocusStateSelector';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { clamp } from '../../../utils/utils';\nexport const focusStateInitializer = state => _extends({}, state, {\n  focus: {\n    cell: null,\n    columnHeader: null,\n    columnGroupHeader: null\n  },\n  tabIndex: {\n    cell: null,\n    columnHeader: null,\n    columnGroupHeader: null\n  }\n});\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridRows (method)\n * @requires useGridEditing (event)\n */\n\nexport const useGridFocus = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridFocus');\n  const lastClickedCell = React.useRef(null);\n  const publishCellFocusOut = React.useCallback((cell, event) => {\n    if (cell) {\n      // The row might have been deleted\n      if (apiRef.current.getRow(cell.id)) {\n        apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n      }\n    }\n  }, [apiRef]);\n  const setCellFocus = React.useCallback((id, field) => {\n    const focusedCell = gridFocusCellSelector(apiRef);\n\n    if ((focusedCell == null ? void 0 : focusedCell.id) === id && (focusedCell == null ? void 0 : focusedCell.field) === field) {\n      return;\n    }\n\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on cell with id=${id} and field=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null,\n          columnGroupHeader: null\n        },\n        focus: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null,\n          columnGroupHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate(); // The row might have been deleted\n\n    if (!apiRef.current.getRow(id)) {\n      return;\n    }\n\n    if (focusedCell) {\n      // There's a focused cell but another cell was clicked\n      // Publishes an event to notify that the focus was lost\n      publishCellFocusOut(focusedCell, {});\n    }\n\n    apiRef.current.publishEvent('cellFocusIn', apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnHeaderFocus = React.useCallback((field, event = {}) => {\n    const cell = gridFocusCellSelector(apiRef);\n    publishCellFocusOut(cell, event);\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on column header with colIndex=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: {\n            field\n          },\n          cell: null,\n          columnGroupHeader: null\n        },\n        focus: {\n          columnHeader: {\n            field\n          },\n          cell: null,\n          columnGroupHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnGroupHeaderFocus = React.useCallback((field, depth, event = {}) => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    if (cell) {\n      apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n    }\n\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        tabIndex: {\n          columnGroupHeader: {\n            field,\n            depth\n          },\n          columnHeader: null,\n          cell: null\n        },\n        focus: {\n          columnGroupHeader: {\n            field,\n            depth\n          },\n          columnHeader: null,\n          cell: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const getColumnGroupHeaderFocus = React.useCallback(() => unstable_gridFocusColumnGroupHeaderSelector(apiRef), [apiRef]);\n  const moveFocusToRelativeCell = React.useCallback((id, field, direction) => {\n    let columnIndexToFocus = apiRef.current.getColumnIndex(field);\n    let rowIndexToFocus = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n\n    if (direction === 'right') {\n      columnIndexToFocus += 1;\n    } else if (direction === 'left') {\n      columnIndexToFocus -= 1;\n    } else {\n      rowIndexToFocus += 1;\n    }\n\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n\n    if (columnIndexToFocus >= visibleColumns.length) {\n      // Go to next row if we are after the last column\n      rowIndexToFocus += 1;\n\n      if (rowIndexToFocus < currentPage.rows.length) {\n        // Go to first column of the next row if there's one more row\n        columnIndexToFocus = 0;\n      }\n    } else if (columnIndexToFocus < 0) {\n      // Go to previous row if we are before the first column\n      rowIndexToFocus -= 1;\n\n      if (rowIndexToFocus >= 0) {\n        // Go to last column of the previous if there's one more row\n        columnIndexToFocus = visibleColumns.length - 1;\n      }\n    }\n\n    rowIndexToFocus = clamp(rowIndexToFocus, 0, currentPage.rows.length - 1);\n    const rowToFocus = currentPage.rows[rowIndexToFocus];\n    const colSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowToFocus.id, columnIndexToFocus);\n\n    if (colSpanInfo && colSpanInfo.spannedByColSpan) {\n      if (direction === 'left' || direction === 'below') {\n        columnIndexToFocus = colSpanInfo.leftVisibleCellIndex;\n      } else if (direction === 'right') {\n        columnIndexToFocus = colSpanInfo.rightVisibleCellIndex;\n      }\n    }\n\n    columnIndexToFocus = clamp(columnIndexToFocus, 0, visibleColumns.length - 1);\n    const columnToFocus = visibleColumns[columnIndexToFocus];\n    apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);\n  }, [apiRef, props.pagination, props.paginationMode]);\n  const handleCellDoubleClick = React.useCallback(({\n    id,\n    field\n  }) => {\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // GRID_CELL_NAVIGATION_KEY_DOWN handles the focus on Enter, Tab and navigation keys\n    if (event.key === 'Enter' || event.key === 'Tab' || event.key === 'Shift' || isNavigationKey(event.key)) {\n      return;\n    }\n\n    apiRef.current.setCellFocus(params.id, params.field);\n  }, [apiRef]);\n  const handleColumnHeaderFocus = React.useCallback(({\n    field\n  }, event) => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef]);\n  const focussedColumnGroup = unstable_gridFocusColumnGroupHeaderSelector(apiRef);\n  const handleColumnGroupHeaderFocus = React.useCallback(({\n    fields,\n    depth\n  }, event) => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    if (focussedColumnGroup !== null && focussedColumnGroup.depth === depth && fields.includes(focussedColumnGroup.field)) {\n      // This group cell has already been focused\n      return;\n    }\n\n    apiRef.current.setColumnGroupHeaderFocus(fields[0], depth, event);\n  }, [apiRef, focussedColumnGroup]);\n  const handleBlur = React.useCallback(() => {\n    logger.debug(`Clearing focus`);\n    apiRef.current.setState(state => _extends({}, state, {\n      focus: {\n        cell: null,\n        columnHeader: null,\n        columnGroupHeader: null\n      }\n    }));\n  }, [logger, apiRef]);\n  const handleCellMouseDown = React.useCallback(params => {\n    lastClickedCell.current = params;\n  }, []);\n  const handleDocumentClick = React.useCallback(event => {\n    const cellParams = lastClickedCell.current;\n    lastClickedCell.current = null;\n    const focusedCell = gridFocusCellSelector(apiRef);\n    const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors('canUpdateFocus', true, {\n      event,\n      cell: cellParams\n    });\n\n    if (!canUpdateFocus) {\n      return;\n    }\n\n    if (!focusedCell) {\n      if (cellParams) {\n        apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n      }\n\n      return;\n    }\n\n    if ((cellParams == null ? void 0 : cellParams.id) === focusedCell.id && (cellParams == null ? void 0 : cellParams.field) === focusedCell.field) {\n      return;\n    }\n\n    const cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);\n\n    if (cellElement != null && cellElement.contains(event.target)) {\n      return;\n    }\n\n    if (cellParams) {\n      apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n    } else {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null,\n          columnGroupHeader: null\n        }\n      }));\n      apiRef.current.forceUpdate(); // There's a focused cell but another element (not a cell) was clicked\n      // Publishes an event to notify that the focus was lost\n\n      publishCellFocusOut(focusedCell, event);\n    }\n  }, [apiRef, publishCellFocusOut]);\n  const handleCellModeChange = React.useCallback(params => {\n    if (params.cellMode === 'view') {\n      return;\n    }\n\n    const cell = gridFocusCellSelector(apiRef);\n\n    if ((cell == null ? void 0 : cell.id) !== params.id || (cell == null ? void 0 : cell.field) !== params.field) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  const handleRowSet = React.useCallback(() => {\n    const cell = gridFocusCellSelector(apiRef); // If the focused cell is in a row which does not exist anymore, then remove the focus\n\n    if (cell && !apiRef.current.getRow(cell.id)) {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null,\n          columnGroupHeader: null\n        }\n      }));\n    }\n  }, [apiRef]);\n  const focusApi = {\n    setCellFocus,\n    setColumnHeaderFocus\n  };\n  const focusPrivateApi = {\n    moveFocusToRelativeCell,\n    setColumnGroupHeaderFocus,\n    getColumnGroupHeaderFocus\n  };\n  useGridApiMethod(apiRef, focusApi, 'public');\n  useGridApiMethod(apiRef, focusPrivateApi, 'private');\n  React.useEffect(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.addEventListener('mouseup', handleDocumentClick);\n    return () => {\n      doc.removeEventListener('mouseup', handleDocumentClick);\n    };\n  }, [apiRef, handleDocumentClick]);\n  useGridApiEventHandler(apiRef, 'columnHeaderBlur', handleBlur);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', handleCellDoubleClick);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', handleCellMouseDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  useGridApiEventHandler(apiRef, 'cellModeChange', handleCellModeChange);\n  useGridApiEventHandler(apiRef, 'columnHeaderFocus', handleColumnHeaderFocus);\n  useGridApiEventHandler(apiRef, 'columnGroupHeaderFocus', handleColumnGroupHeaderFocus);\n  useGridApiEventHandler(apiRef, 'rowsSet', handleRowSet);\n};","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/node_modules/@mui/x-data-grid/hooks/features/focus/useGridFocus.js"],"names":["_extends","React","unstable_ownerDocument","ownerDocument","useGridApiMethod","useGridLogger","useGridApiEventHandler","isNavigationKey","gridFocusCellSelector","unstable_gridFocusColumnGroupHeaderSelector","gridVisibleColumnDefinitionsSelector","getVisibleRows","clamp","focusStateInitializer","state","focus","cell","columnHeader","columnGroupHeader","tabIndex","useGridFocus","apiRef","props","logger","lastClickedCell","useRef","publishCellFocusOut","useCallback","event","current","getRow","id","publishEvent","getCellParams","field","setCellFocus","focusedCell","setState","debug","forceUpdate","setColumnHeaderFocus","setColumnGroupHeaderFocus","depth","getColumnGroupHeaderFocus","moveFocusToRelativeCell","direction","columnIndexToFocus","getColumnIndex","rowIndexToFocus","getRowIndexRelativeToVisibleRows","visibleColumns","currentPage","pagination","paginationMode","length","rows","rowToFocus","colSpanInfo","unstable_getCellColSpanInfo","spannedByColSpan","leftVisibleCellIndex","rightVisibleCellIndex","columnToFocus","handleCellDoubleClick","handleCellKeyDown","params","key","handleColumnHeaderFocus","target","currentTarget","focussedColumnGroup","handleColumnGroupHeaderFocus","fields","includes","handleBlur","handleCellMouseDown","handleDocumentClick","cellParams","canUpdateFocus","unstable_applyPipeProcessors","cellElement","getCellElement","contains","handleCellModeChange","cellMode","handleRowSet","focusApi","focusPrivateApi","useEffect","doc","rootElementRef","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument } from '@mui/utils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { gridFocusCellSelector, unstable_gridFocusColumnGroupHeaderSelector } from './gridFocusStateSelector';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { clamp } from '../../../utils/utils';\nexport const focusStateInitializer = state => _extends({}, state, {\n  focus: {\n    cell: null,\n    columnHeader: null,\n    columnGroupHeader: null\n  },\n  tabIndex: {\n    cell: null,\n    columnHeader: null,\n    columnGroupHeader: null\n  }\n});\n\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridRows (method)\n * @requires useGridEditing (event)\n */\nexport const useGridFocus = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridFocus');\n  const lastClickedCell = React.useRef(null);\n  const publishCellFocusOut = React.useCallback((cell, event) => {\n    if (cell) {\n      // The row might have been deleted\n      if (apiRef.current.getRow(cell.id)) {\n        apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n      }\n    }\n  }, [apiRef]);\n  const setCellFocus = React.useCallback((id, field) => {\n    const focusedCell = gridFocusCellSelector(apiRef);\n    if ((focusedCell == null ? void 0 : focusedCell.id) === id && (focusedCell == null ? void 0 : focusedCell.field) === field) {\n      return;\n    }\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on cell with id=${id} and field=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null,\n          columnGroupHeader: null\n        },\n        focus: {\n          cell: {\n            id,\n            field\n          },\n          columnHeader: null,\n          columnGroupHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n\n    // The row might have been deleted\n    if (!apiRef.current.getRow(id)) {\n      return;\n    }\n    if (focusedCell) {\n      // There's a focused cell but another cell was clicked\n      // Publishes an event to notify that the focus was lost\n      publishCellFocusOut(focusedCell, {});\n    }\n    apiRef.current.publishEvent('cellFocusIn', apiRef.current.getCellParams(id, field));\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnHeaderFocus = React.useCallback((field, event = {}) => {\n    const cell = gridFocusCellSelector(apiRef);\n    publishCellFocusOut(cell, event);\n    apiRef.current.setState(state => {\n      logger.debug(`Focusing on column header with colIndex=${field}`);\n      return _extends({}, state, {\n        tabIndex: {\n          columnHeader: {\n            field\n          },\n          cell: null,\n          columnGroupHeader: null\n        },\n        focus: {\n          columnHeader: {\n            field\n          },\n          cell: null,\n          columnGroupHeader: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, publishCellFocusOut]);\n  const setColumnGroupHeaderFocus = React.useCallback((field, depth, event = {}) => {\n    const cell = gridFocusCellSelector(apiRef);\n    if (cell) {\n      apiRef.current.publishEvent('cellFocusOut', apiRef.current.getCellParams(cell.id, cell.field), event);\n    }\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        tabIndex: {\n          columnGroupHeader: {\n            field,\n            depth\n          },\n          columnHeader: null,\n          cell: null\n        },\n        focus: {\n          columnGroupHeader: {\n            field,\n            depth\n          },\n          columnHeader: null,\n          cell: null\n        }\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const getColumnGroupHeaderFocus = React.useCallback(() => unstable_gridFocusColumnGroupHeaderSelector(apiRef), [apiRef]);\n  const moveFocusToRelativeCell = React.useCallback((id, field, direction) => {\n    let columnIndexToFocus = apiRef.current.getColumnIndex(field);\n    let rowIndexToFocus = apiRef.current.getRowIndexRelativeToVisibleRows(id);\n    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);\n    if (direction === 'right') {\n      columnIndexToFocus += 1;\n    } else if (direction === 'left') {\n      columnIndexToFocus -= 1;\n    } else {\n      rowIndexToFocus += 1;\n    }\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n    if (columnIndexToFocus >= visibleColumns.length) {\n      // Go to next row if we are after the last column\n      rowIndexToFocus += 1;\n      if (rowIndexToFocus < currentPage.rows.length) {\n        // Go to first column of the next row if there's one more row\n        columnIndexToFocus = 0;\n      }\n    } else if (columnIndexToFocus < 0) {\n      // Go to previous row if we are before the first column\n      rowIndexToFocus -= 1;\n      if (rowIndexToFocus >= 0) {\n        // Go to last column of the previous if there's one more row\n        columnIndexToFocus = visibleColumns.length - 1;\n      }\n    }\n    rowIndexToFocus = clamp(rowIndexToFocus, 0, currentPage.rows.length - 1);\n    const rowToFocus = currentPage.rows[rowIndexToFocus];\n    const colSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowToFocus.id, columnIndexToFocus);\n    if (colSpanInfo && colSpanInfo.spannedByColSpan) {\n      if (direction === 'left' || direction === 'below') {\n        columnIndexToFocus = colSpanInfo.leftVisibleCellIndex;\n      } else if (direction === 'right') {\n        columnIndexToFocus = colSpanInfo.rightVisibleCellIndex;\n      }\n    }\n    columnIndexToFocus = clamp(columnIndexToFocus, 0, visibleColumns.length - 1);\n    const columnToFocus = visibleColumns[columnIndexToFocus];\n    apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);\n  }, [apiRef, props.pagination, props.paginationMode]);\n  const handleCellDoubleClick = React.useCallback(({\n    id,\n    field\n  }) => {\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // GRID_CELL_NAVIGATION_KEY_DOWN handles the focus on Enter, Tab and navigation keys\n    if (event.key === 'Enter' || event.key === 'Tab' || event.key === 'Shift' || isNavigationKey(event.key)) {\n      return;\n    }\n    apiRef.current.setCellFocus(params.id, params.field);\n  }, [apiRef]);\n  const handleColumnHeaderFocus = React.useCallback(({\n    field\n  }, event) => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef]);\n  const focussedColumnGroup = unstable_gridFocusColumnGroupHeaderSelector(apiRef);\n  const handleColumnGroupHeaderFocus = React.useCallback(({\n    fields,\n    depth\n  }, event) => {\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n    if (focussedColumnGroup !== null && focussedColumnGroup.depth === depth && fields.includes(focussedColumnGroup.field)) {\n      // This group cell has already been focused\n      return;\n    }\n    apiRef.current.setColumnGroupHeaderFocus(fields[0], depth, event);\n  }, [apiRef, focussedColumnGroup]);\n  const handleBlur = React.useCallback(() => {\n    logger.debug(`Clearing focus`);\n    apiRef.current.setState(state => _extends({}, state, {\n      focus: {\n        cell: null,\n        columnHeader: null,\n        columnGroupHeader: null\n      }\n    }));\n  }, [logger, apiRef]);\n  const handleCellMouseDown = React.useCallback(params => {\n    lastClickedCell.current = params;\n  }, []);\n  const handleDocumentClick = React.useCallback(event => {\n    const cellParams = lastClickedCell.current;\n    lastClickedCell.current = null;\n    const focusedCell = gridFocusCellSelector(apiRef);\n    const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors('canUpdateFocus', true, {\n      event,\n      cell: cellParams\n    });\n    if (!canUpdateFocus) {\n      return;\n    }\n    if (!focusedCell) {\n      if (cellParams) {\n        apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n      }\n      return;\n    }\n    if ((cellParams == null ? void 0 : cellParams.id) === focusedCell.id && (cellParams == null ? void 0 : cellParams.field) === focusedCell.field) {\n      return;\n    }\n    const cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);\n    if (cellElement != null && cellElement.contains(event.target)) {\n      return;\n    }\n    if (cellParams) {\n      apiRef.current.setCellFocus(cellParams.id, cellParams.field);\n    } else {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null,\n          columnGroupHeader: null\n        }\n      }));\n      apiRef.current.forceUpdate();\n\n      // There's a focused cell but another element (not a cell) was clicked\n      // Publishes an event to notify that the focus was lost\n      publishCellFocusOut(focusedCell, event);\n    }\n  }, [apiRef, publishCellFocusOut]);\n  const handleCellModeChange = React.useCallback(params => {\n    if (params.cellMode === 'view') {\n      return;\n    }\n    const cell = gridFocusCellSelector(apiRef);\n    if ((cell == null ? void 0 : cell.id) !== params.id || (cell == null ? void 0 : cell.field) !== params.field) {\n      apiRef.current.setCellFocus(params.id, params.field);\n    }\n  }, [apiRef]);\n  const handleRowSet = React.useCallback(() => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    // If the focused cell is in a row which does not exist anymore, then remove the focus\n    if (cell && !apiRef.current.getRow(cell.id)) {\n      apiRef.current.setState(state => _extends({}, state, {\n        focus: {\n          cell: null,\n          columnHeader: null,\n          columnGroupHeader: null\n        }\n      }));\n    }\n  }, [apiRef]);\n  const focusApi = {\n    setCellFocus,\n    setColumnHeaderFocus\n  };\n  const focusPrivateApi = {\n    moveFocusToRelativeCell,\n    setColumnGroupHeaderFocus,\n    getColumnGroupHeaderFocus\n  };\n  useGridApiMethod(apiRef, focusApi, 'public');\n  useGridApiMethod(apiRef, focusPrivateApi, 'private');\n  React.useEffect(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.addEventListener('mouseup', handleDocumentClick);\n    return () => {\n      doc.removeEventListener('mouseup', handleDocumentClick);\n    };\n  }, [apiRef, handleDocumentClick]);\n  useGridApiEventHandler(apiRef, 'columnHeaderBlur', handleBlur);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', handleCellDoubleClick);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', handleCellMouseDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n  useGridApiEventHandler(apiRef, 'cellModeChange', handleCellModeChange);\n  useGridApiEventHandler(apiRef, 'columnHeaderFocus', handleColumnHeaderFocus);\n  useGridApiEventHandler(apiRef, 'columnGroupHeaderFocus', handleColumnGroupHeaderFocus);\n  useGridApiEventHandler(apiRef, 'rowsSet', handleRowSet);\n};"]},"metadata":{},"sourceType":"module"}