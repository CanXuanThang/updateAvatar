{"ast":null,"code":"import * as React from 'react';\nimport { unstable_debounce as debounce, unstable_ownerDocument as ownerDocument, unstable_useEnhancedEffect as useEnhancedEffect, unstable_ownerWindow as ownerWindow } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnsTotalWidthSelector } from '../columns';\nimport { gridDensityFactorSelector } from '../density';\nimport { useGridSelector } from '../../utils';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { calculatePinnedRowsHeight } from '../rows/gridRowsUtils';\nimport { getTotalHeaderHeight } from '../columns/gridColumnsUtils';\nimport { gridClasses } from '../../../constants/gridClasses';\nconst isTestEnvironment = process.env.NODE_ENV === 'test';\n\nconst hasScroll = ({\n  content,\n  container,\n  scrollBarSize\n}) => {\n  const hasScrollXIfNoYScrollBar = content.width > container.width;\n  const hasScrollYIfNoXScrollBar = content.height > container.height;\n  let hasScrollX = false;\n  let hasScrollY = false;\n\n  if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {\n    hasScrollX = hasScrollXIfNoYScrollBar;\n    hasScrollY = content.height + (hasScrollX ? scrollBarSize : 0) > container.height; // We recalculate the scroll x to consider the size of the y scrollbar.\n\n    if (hasScrollY) {\n      hasScrollX = content.width + scrollBarSize > container.width;\n    }\n  }\n\n  return {\n    hasScrollX,\n    hasScrollY\n  };\n};\n\nexport function useGridDimensions(apiRef, props) {\n  const logger = useGridLogger(apiRef, 'useResizeContainer');\n  const errorShown = React.useRef(false);\n  const rootDimensionsRef = React.useRef(null);\n  const fullDimensionsRef = React.useRef(null);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  const rowHeight = Math.floor(props.rowHeight * densityFactor);\n  const totalHeaderHeight = getTotalHeaderHeight(apiRef, props.columnHeaderHeight);\n  const updateGridDimensionsRef = React.useCallback(() => {\n    var _apiRef$current$rootE;\n\n    const rootElement = (_apiRef$current$rootE = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE.current;\n    const columnsTotalWidth = gridColumnsTotalWidthSelector(apiRef);\n    const pinnedRowsHeight = calculatePinnedRowsHeight(apiRef);\n\n    if (!rootDimensionsRef.current) {\n      return;\n    }\n\n    let scrollBarSize;\n\n    if (props.scrollbarSize != null) {\n      scrollBarSize = props.scrollbarSize;\n    } else if (!columnsTotalWidth || !rootElement) {\n      scrollBarSize = 0;\n    } else {\n      const doc = ownerDocument(rootElement);\n      const scrollDiv = doc.createElement('div');\n      scrollDiv.style.width = '99px';\n      scrollDiv.style.height = '99px';\n      scrollDiv.style.position = 'absolute';\n      scrollDiv.style.overflow = 'scroll';\n      scrollDiv.className = 'scrollDiv';\n      rootElement.appendChild(scrollDiv);\n      scrollBarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n      rootElement.removeChild(scrollDiv);\n    }\n\n    let viewportOuterSize;\n    let hasScrollX;\n    let hasScrollY;\n\n    if (props.autoHeight) {\n      hasScrollY = false;\n      hasScrollX = Math.round(columnsTotalWidth) > rootDimensionsRef.current.width;\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rowsMeta.currentPageTotalHeight + (hasScrollX ? scrollBarSize : 0)\n      };\n    } else {\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rootDimensionsRef.current.height - totalHeaderHeight\n      };\n      const scrollInformation = hasScroll({\n        content: {\n          width: Math.round(columnsTotalWidth),\n          height: rowsMeta.currentPageTotalHeight\n        },\n        container: {\n          width: viewportOuterSize.width,\n          height: viewportOuterSize.height - pinnedRowsHeight.top - pinnedRowsHeight.bottom\n        },\n        scrollBarSize\n      });\n      hasScrollY = scrollInformation.hasScrollY;\n      hasScrollX = scrollInformation.hasScrollX;\n    }\n\n    const viewportInnerSize = {\n      width: viewportOuterSize.width - (hasScrollY ? scrollBarSize : 0),\n      height: viewportOuterSize.height - (hasScrollX ? scrollBarSize : 0)\n    };\n    const newFullDimensions = {\n      viewportOuterSize,\n      viewportInnerSize,\n      hasScrollX,\n      hasScrollY,\n      scrollBarSize\n    };\n    const prevDimensions = fullDimensionsRef.current;\n    fullDimensionsRef.current = newFullDimensions;\n\n    if (newFullDimensions.viewportInnerSize.width !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.width) || newFullDimensions.viewportInnerSize.height !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.height)) {\n      apiRef.current.publishEvent('viewportInnerSizeChange', newFullDimensions.viewportInnerSize);\n    }\n  }, [apiRef, props.scrollbarSize, props.autoHeight, rowsMeta.currentPageTotalHeight, totalHeaderHeight]);\n  const [savedSize, setSavedSize] = React.useState();\n  const debouncedSetSavedSize = React.useMemo(() => debounce(setSavedSize, 60), []);\n  const previousSize = React.useRef();\n  useEnhancedEffect(() => {\n    if (savedSize) {\n      updateGridDimensionsRef();\n      apiRef.current.publishEvent('debouncedResize', rootDimensionsRef.current);\n    }\n  }, [apiRef, savedSize, updateGridDimensionsRef]); // This is the function called by apiRef.current.resize()\n\n  const resize = React.useCallback(() => {\n    apiRef.current.computeSizeAndPublishResizeEvent();\n  }, [apiRef]);\n  const getRootDimensions = React.useCallback(() => fullDimensionsRef.current, []);\n  const getViewportPageSize = React.useCallback(() => {\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (!dimensions) {\n      return 0;\n    }\n\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    }); // TODO: Use a combination of scrollTop, dimensions.viewportInnerSize.height and rowsMeta.possitions\n    // to find out the maximum number of rows that can fit in the visible part of the grid\n\n    if (props.getRowHeight) {\n      const renderContext = apiRef.current.getRenderContext();\n      const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;\n      return Math.min(viewportPageSize - 1, currentPage.rows.length);\n    }\n\n    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / rowHeight);\n    return Math.min(maximumPageSizeWithoutScrollBar, currentPage.rows.length);\n  }, [apiRef, props.pagination, props.paginationMode, props.getRowHeight, rowHeight]);\n  const computeSizeAndPublishResizeEvent = React.useCallback(() => {\n    var _apiRef$current$rootE2, _previousSize$current, _previousSize$current2;\n\n    const rootEl = (_apiRef$current$rootE2 = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE2.current;\n    const mainEl = rootEl == null ? void 0 : rootEl.querySelector(`.${gridClasses.main}`);\n\n    if (!mainEl) {\n      return;\n    }\n\n    const height = mainEl.offsetHeight || 0;\n    const width = mainEl.offsetWidth || 0;\n    const win = ownerWindow(mainEl);\n    const computedStyle = win.getComputedStyle(mainEl);\n    const paddingLeft = parseInt(computedStyle.paddingLeft, 10) || 0;\n    const paddingRight = parseInt(computedStyle.paddingRight, 10) || 0;\n    const paddingTop = parseInt(computedStyle.paddingTop, 10) || 0;\n    const paddingBottom = parseInt(computedStyle.paddingBottom, 10) || 0;\n    const newHeight = height - paddingTop - paddingBottom;\n    const newWidth = width - paddingLeft - paddingRight;\n    const hasHeightChanged = newHeight !== ((_previousSize$current = previousSize.current) == null ? void 0 : _previousSize$current.height);\n    const hasWidthChanged = newWidth !== ((_previousSize$current2 = previousSize.current) == null ? void 0 : _previousSize$current2.width);\n\n    if (!previousSize.current || hasHeightChanged || hasWidthChanged) {\n      const size = {\n        width: newWidth,\n        height: newHeight\n      };\n      apiRef.current.publishEvent('resize', size);\n      previousSize.current = size;\n    }\n  }, [apiRef]);\n  const dimensionsApi = {\n    resize,\n    getRootDimensions\n  };\n  const dimensionsPrivateApi = {\n    getViewportPageSize,\n    updateGridDimensionsRef,\n    computeSizeAndPublishResizeEvent\n  };\n  useGridApiMethod(apiRef, dimensionsApi, 'public');\n  useGridApiMethod(apiRef, dimensionsPrivateApi, 'private');\n  const isFirstSizing = React.useRef(true);\n  const handleResize = React.useCallback(size => {\n    rootDimensionsRef.current = size; // jsdom has no layout capabilities\n\n    const isJSDOM = /jsdom/.test(window.navigator.userAgent);\n\n    if (size.height === 0 && !errorShown.current && !props.autoHeight && !isJSDOM) {\n      logger.error(['The parent DOM element of the data grid has an empty height.', 'Please make sure that this element has an intrinsic height.', 'The grid displays with a height of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n\n    if (size.width === 0 && !errorShown.current && !isJSDOM) {\n      logger.error(['The parent DOM element of the data grid has an empty width.', 'Please make sure that this element has an intrinsic width.', 'The grid displays with a width of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n\n    if (isTestEnvironment) {\n      // We don't need to debounce the resize for tests.\n      setSavedSize(size);\n      isFirstSizing.current = false;\n      return;\n    }\n\n    if (isFirstSizing.current) {\n      // We want to initialize the grid dimensions as soon as possible to avoid flickering\n      setSavedSize(size);\n      isFirstSizing.current = false;\n      return;\n    }\n\n    debouncedSetSavedSize(size);\n  }, [props.autoHeight, debouncedSetSavedSize, logger]);\n  useEnhancedEffect(() => updateGridDimensionsRef(), [updateGridDimensionsRef]);\n  useGridApiOptionHandler(apiRef, 'sortedRowsSet', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'paginationModelChange', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'columnsChange', updateGridDimensionsRef);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  useGridApiOptionHandler(apiRef, 'debouncedResize', props.onResize);\n}","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/node_modules/@mui/x-data-grid/hooks/features/dimensions/useGridDimensions.js"],"names":["React","unstable_debounce","debounce","unstable_ownerDocument","ownerDocument","unstable_useEnhancedEffect","useEnhancedEffect","unstable_ownerWindow","ownerWindow","useGridApiEventHandler","useGridApiOptionHandler","useGridApiMethod","useGridLogger","gridColumnsTotalWidthSelector","gridDensityFactorSelector","useGridSelector","getVisibleRows","gridRowsMetaSelector","calculatePinnedRowsHeight","getTotalHeaderHeight","gridClasses","isTestEnvironment","process","env","NODE_ENV","hasScroll","content","container","scrollBarSize","hasScrollXIfNoYScrollBar","width","hasScrollYIfNoXScrollBar","height","hasScrollX","hasScrollY","useGridDimensions","apiRef","props","logger","errorShown","useRef","rootDimensionsRef","fullDimensionsRef","rowsMeta","densityFactor","rowHeight","Math","floor","totalHeaderHeight","columnHeaderHeight","updateGridDimensionsRef","useCallback","_apiRef$current$rootE","rootElement","current","rootElementRef","columnsTotalWidth","pinnedRowsHeight","scrollbarSize","doc","scrollDiv","createElement","style","position","overflow","className","appendChild","offsetWidth","clientWidth","removeChild","viewportOuterSize","autoHeight","round","currentPageTotalHeight","scrollInformation","top","bottom","viewportInnerSize","newFullDimensions","prevDimensions","publishEvent","savedSize","setSavedSize","useState","debouncedSetSavedSize","useMemo","previousSize","resize","computeSizeAndPublishResizeEvent","getRootDimensions","getViewportPageSize","dimensions","currentPage","pagination","paginationMode","getRowHeight","renderContext","getRenderContext","viewportPageSize","lastRowIndex","firstRowIndex","min","rows","length","maximumPageSizeWithoutScrollBar","_apiRef$current$rootE2","_previousSize$current","_previousSize$current2","rootEl","mainEl","querySelector","main","offsetHeight","win","computedStyle","getComputedStyle","paddingLeft","parseInt","paddingRight","paddingTop","paddingBottom","newHeight","newWidth","hasHeightChanged","hasWidthChanged","size","dimensionsApi","dimensionsPrivateApi","isFirstSizing","handleResize","isJSDOM","test","window","navigator","userAgent","error","join","onResize"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { unstable_debounce as debounce, unstable_ownerDocument as ownerDocument, unstable_useEnhancedEffect as useEnhancedEffect, unstable_ownerWindow as ownerWindow } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnsTotalWidthSelector } from '../columns';\nimport { gridDensityFactorSelector } from '../density';\nimport { useGridSelector } from '../../utils';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { calculatePinnedRowsHeight } from '../rows/gridRowsUtils';\nimport { getTotalHeaderHeight } from '../columns/gridColumnsUtils';\nimport { gridClasses } from '../../../constants/gridClasses';\nconst isTestEnvironment = process.env.NODE_ENV === 'test';\nconst hasScroll = ({\n  content,\n  container,\n  scrollBarSize\n}) => {\n  const hasScrollXIfNoYScrollBar = content.width > container.width;\n  const hasScrollYIfNoXScrollBar = content.height > container.height;\n  let hasScrollX = false;\n  let hasScrollY = false;\n  if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {\n    hasScrollX = hasScrollXIfNoYScrollBar;\n    hasScrollY = content.height + (hasScrollX ? scrollBarSize : 0) > container.height;\n\n    // We recalculate the scroll x to consider the size of the y scrollbar.\n    if (hasScrollY) {\n      hasScrollX = content.width + scrollBarSize > container.width;\n    }\n  }\n  return {\n    hasScrollX,\n    hasScrollY\n  };\n};\nexport function useGridDimensions(apiRef, props) {\n  const logger = useGridLogger(apiRef, 'useResizeContainer');\n  const errorShown = React.useRef(false);\n  const rootDimensionsRef = React.useRef(null);\n  const fullDimensionsRef = React.useRef(null);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  const rowHeight = Math.floor(props.rowHeight * densityFactor);\n  const totalHeaderHeight = getTotalHeaderHeight(apiRef, props.columnHeaderHeight);\n  const updateGridDimensionsRef = React.useCallback(() => {\n    var _apiRef$current$rootE;\n    const rootElement = (_apiRef$current$rootE = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE.current;\n    const columnsTotalWidth = gridColumnsTotalWidthSelector(apiRef);\n    const pinnedRowsHeight = calculatePinnedRowsHeight(apiRef);\n    if (!rootDimensionsRef.current) {\n      return;\n    }\n    let scrollBarSize;\n    if (props.scrollbarSize != null) {\n      scrollBarSize = props.scrollbarSize;\n    } else if (!columnsTotalWidth || !rootElement) {\n      scrollBarSize = 0;\n    } else {\n      const doc = ownerDocument(rootElement);\n      const scrollDiv = doc.createElement('div');\n      scrollDiv.style.width = '99px';\n      scrollDiv.style.height = '99px';\n      scrollDiv.style.position = 'absolute';\n      scrollDiv.style.overflow = 'scroll';\n      scrollDiv.className = 'scrollDiv';\n      rootElement.appendChild(scrollDiv);\n      scrollBarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n      rootElement.removeChild(scrollDiv);\n    }\n    let viewportOuterSize;\n    let hasScrollX;\n    let hasScrollY;\n    if (props.autoHeight) {\n      hasScrollY = false;\n      hasScrollX = Math.round(columnsTotalWidth) > rootDimensionsRef.current.width;\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rowsMeta.currentPageTotalHeight + (hasScrollX ? scrollBarSize : 0)\n      };\n    } else {\n      viewportOuterSize = {\n        width: rootDimensionsRef.current.width,\n        height: rootDimensionsRef.current.height - totalHeaderHeight\n      };\n      const scrollInformation = hasScroll({\n        content: {\n          width: Math.round(columnsTotalWidth),\n          height: rowsMeta.currentPageTotalHeight\n        },\n        container: {\n          width: viewportOuterSize.width,\n          height: viewportOuterSize.height - pinnedRowsHeight.top - pinnedRowsHeight.bottom\n        },\n        scrollBarSize\n      });\n      hasScrollY = scrollInformation.hasScrollY;\n      hasScrollX = scrollInformation.hasScrollX;\n    }\n    const viewportInnerSize = {\n      width: viewportOuterSize.width - (hasScrollY ? scrollBarSize : 0),\n      height: viewportOuterSize.height - (hasScrollX ? scrollBarSize : 0)\n    };\n    const newFullDimensions = {\n      viewportOuterSize,\n      viewportInnerSize,\n      hasScrollX,\n      hasScrollY,\n      scrollBarSize\n    };\n    const prevDimensions = fullDimensionsRef.current;\n    fullDimensionsRef.current = newFullDimensions;\n    if (newFullDimensions.viewportInnerSize.width !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.width) || newFullDimensions.viewportInnerSize.height !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.height)) {\n      apiRef.current.publishEvent('viewportInnerSizeChange', newFullDimensions.viewportInnerSize);\n    }\n  }, [apiRef, props.scrollbarSize, props.autoHeight, rowsMeta.currentPageTotalHeight, totalHeaderHeight]);\n  const [savedSize, setSavedSize] = React.useState();\n  const debouncedSetSavedSize = React.useMemo(() => debounce(setSavedSize, 60), []);\n  const previousSize = React.useRef();\n  useEnhancedEffect(() => {\n    if (savedSize) {\n      updateGridDimensionsRef();\n      apiRef.current.publishEvent('debouncedResize', rootDimensionsRef.current);\n    }\n  }, [apiRef, savedSize, updateGridDimensionsRef]);\n\n  // This is the function called by apiRef.current.resize()\n  const resize = React.useCallback(() => {\n    apiRef.current.computeSizeAndPublishResizeEvent();\n  }, [apiRef]);\n  const getRootDimensions = React.useCallback(() => fullDimensionsRef.current, []);\n  const getViewportPageSize = React.useCallback(() => {\n    const dimensions = apiRef.current.getRootDimensions();\n    if (!dimensions) {\n      return 0;\n    }\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    });\n\n    // TODO: Use a combination of scrollTop, dimensions.viewportInnerSize.height and rowsMeta.possitions\n    // to find out the maximum number of rows that can fit in the visible part of the grid\n    if (props.getRowHeight) {\n      const renderContext = apiRef.current.getRenderContext();\n      const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;\n      return Math.min(viewportPageSize - 1, currentPage.rows.length);\n    }\n    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / rowHeight);\n    return Math.min(maximumPageSizeWithoutScrollBar, currentPage.rows.length);\n  }, [apiRef, props.pagination, props.paginationMode, props.getRowHeight, rowHeight]);\n  const computeSizeAndPublishResizeEvent = React.useCallback(() => {\n    var _apiRef$current$rootE2, _previousSize$current, _previousSize$current2;\n    const rootEl = (_apiRef$current$rootE2 = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE2.current;\n    const mainEl = rootEl == null ? void 0 : rootEl.querySelector(`.${gridClasses.main}`);\n    if (!mainEl) {\n      return;\n    }\n    const height = mainEl.offsetHeight || 0;\n    const width = mainEl.offsetWidth || 0;\n    const win = ownerWindow(mainEl);\n    const computedStyle = win.getComputedStyle(mainEl);\n    const paddingLeft = parseInt(computedStyle.paddingLeft, 10) || 0;\n    const paddingRight = parseInt(computedStyle.paddingRight, 10) || 0;\n    const paddingTop = parseInt(computedStyle.paddingTop, 10) || 0;\n    const paddingBottom = parseInt(computedStyle.paddingBottom, 10) || 0;\n    const newHeight = height - paddingTop - paddingBottom;\n    const newWidth = width - paddingLeft - paddingRight;\n    const hasHeightChanged = newHeight !== ((_previousSize$current = previousSize.current) == null ? void 0 : _previousSize$current.height);\n    const hasWidthChanged = newWidth !== ((_previousSize$current2 = previousSize.current) == null ? void 0 : _previousSize$current2.width);\n    if (!previousSize.current || hasHeightChanged || hasWidthChanged) {\n      const size = {\n        width: newWidth,\n        height: newHeight\n      };\n      apiRef.current.publishEvent('resize', size);\n      previousSize.current = size;\n    }\n  }, [apiRef]);\n  const dimensionsApi = {\n    resize,\n    getRootDimensions\n  };\n  const dimensionsPrivateApi = {\n    getViewportPageSize,\n    updateGridDimensionsRef,\n    computeSizeAndPublishResizeEvent\n  };\n  useGridApiMethod(apiRef, dimensionsApi, 'public');\n  useGridApiMethod(apiRef, dimensionsPrivateApi, 'private');\n  const isFirstSizing = React.useRef(true);\n  const handleResize = React.useCallback(size => {\n    rootDimensionsRef.current = size;\n\n    // jsdom has no layout capabilities\n    const isJSDOM = /jsdom/.test(window.navigator.userAgent);\n    if (size.height === 0 && !errorShown.current && !props.autoHeight && !isJSDOM) {\n      logger.error(['The parent DOM element of the data grid has an empty height.', 'Please make sure that this element has an intrinsic height.', 'The grid displays with a height of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n    if (size.width === 0 && !errorShown.current && !isJSDOM) {\n      logger.error(['The parent DOM element of the data grid has an empty width.', 'Please make sure that this element has an intrinsic width.', 'The grid displays with a width of 0px.', '', 'More details: https://mui.com/r/x-data-grid-no-dimensions.'].join('\\n'));\n      errorShown.current = true;\n    }\n    if (isTestEnvironment) {\n      // We don't need to debounce the resize for tests.\n      setSavedSize(size);\n      isFirstSizing.current = false;\n      return;\n    }\n    if (isFirstSizing.current) {\n      // We want to initialize the grid dimensions as soon as possible to avoid flickering\n      setSavedSize(size);\n      isFirstSizing.current = false;\n      return;\n    }\n    debouncedSetSavedSize(size);\n  }, [props.autoHeight, debouncedSetSavedSize, logger]);\n  useEnhancedEffect(() => updateGridDimensionsRef(), [updateGridDimensionsRef]);\n  useGridApiOptionHandler(apiRef, 'sortedRowsSet', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'paginationModelChange', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'columnsChange', updateGridDimensionsRef);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  useGridApiOptionHandler(apiRef, 'debouncedResize', props.onResize);\n}"]},"metadata":{},"sourceType":"module"}