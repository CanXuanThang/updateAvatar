{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_composeClasses as composeClasses } from '@mui/utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { getDataGridUtilityClass } from '../../../constants';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_CHECKBOX_SELECTION_FIELD } from '../../../colDef';\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  return React.useMemo(() => {\n    const slots = {\n      cellCheckbox: ['cellCheckbox'],\n      columnHeaderCheckbox: ['columnHeaderCheckbox']\n    };\n    return composeClasses(slots, getDataGridUtilityClass, classes);\n  }, [classes]);\n};\n\nexport const useGridRowSelectionPreProcessors = (apiRef, props) => {\n  const ownerState = {\n    classes: props.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const updateSelectionColumn = React.useCallback(columnsState => {\n    const selectionColumn = _extends({}, GRID_CHECKBOX_SELECTION_COL_DEF, {\n      cellClassName: classes.cellCheckbox,\n      headerClassName: classes.columnHeaderCheckbox,\n      headerName: apiRef.current.getLocaleText('checkboxSelectionHeaderName')\n    });\n\n    const shouldHaveSelectionColumn = props.checkboxSelection;\n    const haveSelectionColumn = columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD] != null;\n\n    if (shouldHaveSelectionColumn && !haveSelectionColumn) {\n      columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD] = selectionColumn;\n      columnsState.orderedFields = [GRID_CHECKBOX_SELECTION_FIELD, ...columnsState.orderedFields];\n    } else if (!shouldHaveSelectionColumn && haveSelectionColumn) {\n      delete columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD];\n      columnsState.orderedFields = columnsState.orderedFields.filter(field => field !== GRID_CHECKBOX_SELECTION_FIELD);\n    } else if (shouldHaveSelectionColumn && haveSelectionColumn) {\n      columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD] = _extends({}, selectionColumn, columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD]);\n    }\n\n    return columnsState;\n  }, [apiRef, classes, props.checkboxSelection]);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateColumns', updateSelectionColumn);\n};","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/node_modules/@mui/x-data-grid/hooks/features/rowSelection/useGridRowSelectionPreProcessors.js"],"names":["_extends","React","unstable_composeClasses","composeClasses","useGridRegisterPipeProcessor","getDataGridUtilityClass","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_CHECKBOX_SELECTION_FIELD","useUtilityClasses","ownerState","classes","useMemo","slots","cellCheckbox","columnHeaderCheckbox","useGridRowSelectionPreProcessors","apiRef","props","updateSelectionColumn","useCallback","columnsState","selectionColumn","cellClassName","headerClassName","headerName","current","getLocaleText","shouldHaveSelectionColumn","checkboxSelection","haveSelectionColumn","lookup","orderedFields","filter","field"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,uBAAuB,IAAIC,cAApC,QAA0D,YAA1D;AACA,SAASC,4BAAT,QAA6C,2BAA7C;AACA,SAASC,uBAAT,QAAwC,oBAAxC;AACA,SAASC,+BAAT,EAA0CC,6BAA1C,QAA+E,iBAA/E;;AACA,MAAMC,iBAAiB,GAAGC,UAAU,IAAI;AACtC,QAAM;AACJC,IAAAA;AADI,MAEFD,UAFJ;AAGA,SAAOR,KAAK,CAACU,OAAN,CAAc,MAAM;AACzB,UAAMC,KAAK,GAAG;AACZC,MAAAA,YAAY,EAAE,CAAC,cAAD,CADF;AAEZC,MAAAA,oBAAoB,EAAE,CAAC,sBAAD;AAFV,KAAd;AAIA,WAAOX,cAAc,CAACS,KAAD,EAAQP,uBAAR,EAAiCK,OAAjC,CAArB;AACD,GANM,EAMJ,CAACA,OAAD,CANI,CAAP;AAOD,CAXD;;AAYA,OAAO,MAAMK,gCAAgC,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;AACjE,QAAMR,UAAU,GAAG;AACjBC,IAAAA,OAAO,EAAEO,KAAK,CAACP;AADE,GAAnB;AAGA,QAAMA,OAAO,GAAGF,iBAAiB,CAACC,UAAD,CAAjC;AACA,QAAMS,qBAAqB,GAAGjB,KAAK,CAACkB,WAAN,CAAkBC,YAAY,IAAI;AAC9D,UAAMC,eAAe,GAAGrB,QAAQ,CAAC,EAAD,EAAKM,+BAAL,EAAsC;AACpEgB,MAAAA,aAAa,EAAEZ,OAAO,CAACG,YAD6C;AAEpEU,MAAAA,eAAe,EAAEb,OAAO,CAACI,oBAF2C;AAGpEU,MAAAA,UAAU,EAAER,MAAM,CAACS,OAAP,CAAeC,aAAf,CAA6B,6BAA7B;AAHwD,KAAtC,CAAhC;;AAKA,UAAMC,yBAAyB,GAAGV,KAAK,CAACW,iBAAxC;AACA,UAAMC,mBAAmB,GAAGT,YAAY,CAACU,MAAb,CAAoBvB,6BAApB,KAAsD,IAAlF;;AACA,QAAIoB,yBAAyB,IAAI,CAACE,mBAAlC,EAAuD;AACrDT,MAAAA,YAAY,CAACU,MAAb,CAAoBvB,6BAApB,IAAqDc,eAArD;AACAD,MAAAA,YAAY,CAACW,aAAb,GAA6B,CAACxB,6BAAD,EAAgC,GAAGa,YAAY,CAACW,aAAhD,CAA7B;AACD,KAHD,MAGO,IAAI,CAACJ,yBAAD,IAA8BE,mBAAlC,EAAuD;AAC5D,aAAOT,YAAY,CAACU,MAAb,CAAoBvB,6BAApB,CAAP;AACAa,MAAAA,YAAY,CAACW,aAAb,GAA6BX,YAAY,CAACW,aAAb,CAA2BC,MAA3B,CAAkCC,KAAK,IAAIA,KAAK,KAAK1B,6BAArD,CAA7B;AACD,KAHM,MAGA,IAAIoB,yBAAyB,IAAIE,mBAAjC,EAAsD;AAC3DT,MAAAA,YAAY,CAACU,MAAb,CAAoBvB,6BAApB,IAAqDP,QAAQ,CAAC,EAAD,EAAKqB,eAAL,EAAsBD,YAAY,CAACU,MAAb,CAAoBvB,6BAApB,CAAtB,CAA7D;AACD;;AACD,WAAOa,YAAP;AACD,GAlB6B,EAkB3B,CAACJ,MAAD,EAASN,OAAT,EAAkBO,KAAK,CAACW,iBAAxB,CAlB2B,CAA9B;AAmBAxB,EAAAA,4BAA4B,CAACY,MAAD,EAAS,gBAAT,EAA2BE,qBAA3B,CAA5B;AACD,CAzBM","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_composeClasses as composeClasses } from '@mui/utils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { getDataGridUtilityClass } from '../../../constants';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_CHECKBOX_SELECTION_FIELD } from '../../../colDef';\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  return React.useMemo(() => {\n    const slots = {\n      cellCheckbox: ['cellCheckbox'],\n      columnHeaderCheckbox: ['columnHeaderCheckbox']\n    };\n    return composeClasses(slots, getDataGridUtilityClass, classes);\n  }, [classes]);\n};\nexport const useGridRowSelectionPreProcessors = (apiRef, props) => {\n  const ownerState = {\n    classes: props.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const updateSelectionColumn = React.useCallback(columnsState => {\n    const selectionColumn = _extends({}, GRID_CHECKBOX_SELECTION_COL_DEF, {\n      cellClassName: classes.cellCheckbox,\n      headerClassName: classes.columnHeaderCheckbox,\n      headerName: apiRef.current.getLocaleText('checkboxSelectionHeaderName')\n    });\n    const shouldHaveSelectionColumn = props.checkboxSelection;\n    const haveSelectionColumn = columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD] != null;\n    if (shouldHaveSelectionColumn && !haveSelectionColumn) {\n      columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD] = selectionColumn;\n      columnsState.orderedFields = [GRID_CHECKBOX_SELECTION_FIELD, ...columnsState.orderedFields];\n    } else if (!shouldHaveSelectionColumn && haveSelectionColumn) {\n      delete columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD];\n      columnsState.orderedFields = columnsState.orderedFields.filter(field => field !== GRID_CHECKBOX_SELECTION_FIELD);\n    } else if (shouldHaveSelectionColumn && haveSelectionColumn) {\n      columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD] = _extends({}, selectionColumn, columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD]);\n    }\n    return columnsState;\n  }, [apiRef, classes, props.checkboxSelection]);\n  useGridRegisterPipeProcessor(apiRef, 'hydrateColumns', updateSelectionColumn);\n};"]},"metadata":{},"sourceType":"module"}