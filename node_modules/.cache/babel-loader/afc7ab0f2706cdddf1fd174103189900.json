{"ast":null,"code":"import { createSelector as reselectCreateSelector } from 'reselect';\nimport { buildWarning } from './warning';\nconst cacheContainer = {\n  cache: new WeakMap()\n};\nconst missingInstanceIdWarning = buildWarning(['MUI: A selector was called without passing the instance ID, which may impact the performance of the grid.', 'To fix, call it with `apiRef`, e.g. `mySelector(apiRef)`, or pass the instance ID explicitly, e.g `mySelector(state, apiRef.current.instanceId)`.']);\nexport const createSelector = (...args) => {\n  const selector = (...selectorArgs) => {\n    var _cache$get, _cache$get3;\n\n    const [stateOrApiRef, instanceId] = selectorArgs;\n    const isApiRef = !!stateOrApiRef.current;\n    const cacheKey = isApiRef ? stateOrApiRef.current.instanceId : instanceId != null ? instanceId : {\n      id: 'default'\n    };\n    const state = isApiRef ? stateOrApiRef.current.state : stateOrApiRef;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (cacheKey.id === 'default') {\n        missingInstanceIdWarning();\n      }\n    }\n\n    const {\n      cache\n    } = cacheContainer;\n\n    if (cache.get(cacheKey) && (_cache$get = cache.get(cacheKey)) != null && _cache$get.get(args)) {\n      var _cache$get2; // We pass the cache key because the called selector might have as\n      // dependency another selector created with this `createSelector`.\n\n\n      return (_cache$get2 = cache.get(cacheKey)) == null ? void 0 : _cache$get2.get(args)(state, cacheKey);\n    }\n\n    const newSelector = reselectCreateSelector(...args);\n\n    if (!cache.get(cacheKey)) {\n      cache.set(cacheKey, new Map());\n    }\n\n    (_cache$get3 = cache.get(cacheKey)) == null ? void 0 : _cache$get3.set(args, newSelector);\n    return newSelector(state, cacheKey);\n  }; // We use this property to detect if the selector was created with createSelector\n  // or it's only a simple function the receives the state and returns part of it.\n\n\n  selector.acceptsApiRef = true;\n  return selector;\n}; // eslint-disable-next-line @typescript-eslint/naming-convention\n\nexport const unstable_resetCreateSelectorCache = () => {\n  cacheContainer.cache = new WeakMap();\n};","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/node_modules/@mui/x-data-grid/utils/createSelector.js"],"names":["createSelector","reselectCreateSelector","buildWarning","cacheContainer","cache","WeakMap","missingInstanceIdWarning","args","selector","selectorArgs","_cache$get","_cache$get3","stateOrApiRef","instanceId","isApiRef","current","cacheKey","id","state","process","env","NODE_ENV","get","_cache$get2","newSelector","set","Map","acceptsApiRef","unstable_resetCreateSelectorCache"],"mappings":"AAAA,SAASA,cAAc,IAAIC,sBAA3B,QAAyD,UAAzD;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,KAAK,EAAE,IAAIC,OAAJ;AADc,CAAvB;AAGA,MAAMC,wBAAwB,GAAGJ,YAAY,CAAC,CAAC,2GAAD,EAA8G,mJAA9G,CAAD,CAA7C;AACA,OAAO,MAAMF,cAAc,GAAG,CAAC,GAAGO,IAAJ,KAAa;AACzC,QAAMC,QAAQ,GAAG,CAAC,GAAGC,YAAJ,KAAqB;AACpC,QAAIC,UAAJ,EAAgBC,WAAhB;;AACA,UAAM,CAACC,aAAD,EAAgBC,UAAhB,IAA8BJ,YAApC;AACA,UAAMK,QAAQ,GAAG,CAAC,CAACF,aAAa,CAACG,OAAjC;AACA,UAAMC,QAAQ,GAAGF,QAAQ,GAAGF,aAAa,CAACG,OAAd,CAAsBF,UAAzB,GAAsCA,UAAU,IAAI,IAAd,GAAqBA,UAArB,GAAkC;AAC/FI,MAAAA,EAAE,EAAE;AAD2F,KAAjG;AAGA,UAAMC,KAAK,GAAGJ,QAAQ,GAAGF,aAAa,CAACG,OAAd,CAAsBG,KAAzB,GAAiCN,aAAvD;;AACA,QAAIO,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAIL,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC7BX,QAAAA,wBAAwB;AACzB;AACF;;AACD,UAAM;AACJF,MAAAA;AADI,QAEFD,cAFJ;;AAGA,QAAIC,KAAK,CAACkB,GAAN,CAAUN,QAAV,KAAuB,CAACN,UAAU,GAAGN,KAAK,CAACkB,GAAN,CAAUN,QAAV,CAAd,KAAsC,IAA7D,IAAqEN,UAAU,CAACY,GAAX,CAAef,IAAf,CAAzE,EAA+F;AAC7F,UAAIgB,WAAJ,CAD6F,CAE7F;AACA;;;AACA,aAAO,CAACA,WAAW,GAAGnB,KAAK,CAACkB,GAAN,CAAUN,QAAV,CAAf,KAAuC,IAAvC,GAA8C,KAAK,CAAnD,GAAuDO,WAAW,CAACD,GAAZ,CAAgBf,IAAhB,EAAsBW,KAAtB,EAA6BF,QAA7B,CAA9D;AACD;;AACD,UAAMQ,WAAW,GAAGvB,sBAAsB,CAAC,GAAGM,IAAJ,CAA1C;;AACA,QAAI,CAACH,KAAK,CAACkB,GAAN,CAAUN,QAAV,CAAL,EAA0B;AACxBZ,MAAAA,KAAK,CAACqB,GAAN,CAAUT,QAAV,EAAoB,IAAIU,GAAJ,EAApB;AACD;;AACD,KAACf,WAAW,GAAGP,KAAK,CAACkB,GAAN,CAAUN,QAAV,CAAf,KAAuC,IAAvC,GAA8C,KAAK,CAAnD,GAAuDL,WAAW,CAACc,GAAZ,CAAgBlB,IAAhB,EAAsBiB,WAAtB,CAAvD;AACA,WAAOA,WAAW,CAACN,KAAD,EAAQF,QAAR,CAAlB;AACD,GA5BD,CADyC,CA+BzC;AACA;;;AACAR,EAAAA,QAAQ,CAACmB,aAAT,GAAyB,IAAzB;AACA,SAAOnB,QAAP;AACD,CAnCM,C,CAqCP;;AACA,OAAO,MAAMoB,iCAAiC,GAAG,MAAM;AACrDzB,EAAAA,cAAc,CAACC,KAAf,GAAuB,IAAIC,OAAJ,EAAvB;AACD,CAFM","sourcesContent":["import { createSelector as reselectCreateSelector } from 'reselect';\nimport { buildWarning } from './warning';\nconst cacheContainer = {\n  cache: new WeakMap()\n};\nconst missingInstanceIdWarning = buildWarning(['MUI: A selector was called without passing the instance ID, which may impact the performance of the grid.', 'To fix, call it with `apiRef`, e.g. `mySelector(apiRef)`, or pass the instance ID explicitly, e.g `mySelector(state, apiRef.current.instanceId)`.']);\nexport const createSelector = (...args) => {\n  const selector = (...selectorArgs) => {\n    var _cache$get, _cache$get3;\n    const [stateOrApiRef, instanceId] = selectorArgs;\n    const isApiRef = !!stateOrApiRef.current;\n    const cacheKey = isApiRef ? stateOrApiRef.current.instanceId : instanceId != null ? instanceId : {\n      id: 'default'\n    };\n    const state = isApiRef ? stateOrApiRef.current.state : stateOrApiRef;\n    if (process.env.NODE_ENV !== 'production') {\n      if (cacheKey.id === 'default') {\n        missingInstanceIdWarning();\n      }\n    }\n    const {\n      cache\n    } = cacheContainer;\n    if (cache.get(cacheKey) && (_cache$get = cache.get(cacheKey)) != null && _cache$get.get(args)) {\n      var _cache$get2;\n      // We pass the cache key because the called selector might have as\n      // dependency another selector created with this `createSelector`.\n      return (_cache$get2 = cache.get(cacheKey)) == null ? void 0 : _cache$get2.get(args)(state, cacheKey);\n    }\n    const newSelector = reselectCreateSelector(...args);\n    if (!cache.get(cacheKey)) {\n      cache.set(cacheKey, new Map());\n    }\n    (_cache$get3 = cache.get(cacheKey)) == null ? void 0 : _cache$get3.set(args, newSelector);\n    return newSelector(state, cacheKey);\n  };\n\n  // We use this property to detect if the selector was created with createSelector\n  // or it's only a simple function the receives the state and returns part of it.\n  selector.acceptsApiRef = true;\n  return selector;\n};\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const unstable_resetCreateSelectorCache = () => {\n  cacheContainer.cache = new WeakMap();\n};"]},"metadata":{},"sourceType":"module"}