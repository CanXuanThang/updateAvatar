{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { isEnterKey } from '../../../utils/keyboardUtils';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { gridSortedRowEntriesSelector, gridSortedRowIdsSelector, gridSortModelSelector } from './gridSortingSelector';\nimport { GRID_ROOT_GROUP_ID, gridRowTreeSelector } from '../rows';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { useGridRegisterStrategyProcessor, GRID_DEFAULT_STRATEGY } from '../../core/strategyProcessing';\nimport { buildAggregatedSortingApplier, mergeStateWithSortModel, getNextGridSortDirection, sanitizeSortModel } from './gridSortingUtils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { getTreeNodeDescendants } from '../rows/gridRowsUtils';\nexport const sortingStateInitializer = (state, props) => {\n  var _ref, _props$sortModel, _props$initialState, _props$initialState$s;\n\n  const sortModel = (_ref = (_props$sortModel = props.sortModel) != null ? _props$sortModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$s = _props$initialState.sorting) == null ? void 0 : _props$initialState$s.sortModel) != null ? _ref : [];\n  return _extends({}, state, {\n    sorting: {\n      sortModel: sanitizeSortModel(sortModel, props.disableMultipleColumnsSorting),\n      sortedRows: []\n    }\n  });\n};\n/**\n * @requires useGridRows (event)\n * @requires useGridColumns (event)\n */\n\nexport const useGridSorting = (apiRef, props) => {\n  var _props$initialState3, _props$initialState3$;\n\n  const logger = useGridLogger(apiRef, 'useGridSorting');\n  apiRef.current.registerControlState({\n    stateId: 'sortModel',\n    propModel: props.sortModel,\n    propOnChange: props.onSortModelChange,\n    stateSelector: gridSortModelSelector,\n    changeEvent: 'sortModelChange'\n  });\n  const upsertSortModel = React.useCallback((field, sortItem) => {\n    const sortModel = gridSortModelSelector(apiRef);\n    const existingIdx = sortModel.findIndex(c => c.field === field);\n    let newSortModel = [...sortModel];\n\n    if (existingIdx > -1) {\n      if (!sortItem) {\n        newSortModel.splice(existingIdx, 1);\n      } else {\n        newSortModel.splice(existingIdx, 1, sortItem);\n      }\n    } else {\n      newSortModel = [...sortModel, sortItem];\n    }\n\n    return newSortModel;\n  }, [apiRef]);\n  const createSortItem = React.useCallback((col, directionOverride) => {\n    var _col$sortingOrder2;\n\n    const sortModel = gridSortModelSelector(apiRef);\n    const existing = sortModel.find(c => c.field === col.field);\n\n    if (existing) {\n      var _col$sortingOrder;\n\n      const nextSort = directionOverride === undefined ? getNextGridSortDirection((_col$sortingOrder = col.sortingOrder) != null ? _col$sortingOrder : props.sortingOrder, existing.sort) : directionOverride;\n      return nextSort == null ? undefined : _extends({}, existing, {\n        sort: nextSort\n      });\n    }\n\n    return {\n      field: col.field,\n      sort: directionOverride === undefined ? getNextGridSortDirection((_col$sortingOrder2 = col.sortingOrder) != null ? _col$sortingOrder2 : props.sortingOrder) : directionOverride\n    };\n  }, [apiRef, props.sortingOrder]);\n  const addColumnMenuItem = React.useCallback((columnMenuItems, colDef) => {\n    if (colDef == null || colDef.sortable === false) {\n      return columnMenuItems;\n    }\n\n    const sortingOrder = colDef.sortingOrder || props.sortingOrder;\n\n    if (sortingOrder.some(item => !!item)) {\n      return [...columnMenuItems, 'columnMenuSortItem'];\n    }\n\n    return columnMenuItems;\n  }, [props.sortingOrder]);\n  /**\n   * API METHODS\n   */\n\n  const applySorting = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      if (props.sortingMode === 'server') {\n        logger.debug('Skipping sorting rows as sortingMode = server');\n        return _extends({}, state, {\n          sorting: _extends({}, state.sorting, {\n            sortedRows: getTreeNodeDescendants(gridRowTreeSelector(apiRef), GRID_ROOT_GROUP_ID, false)\n          })\n        });\n      }\n\n      const sortModel = gridSortModelSelector(state, apiRef.current.instanceId);\n      const sortRowList = buildAggregatedSortingApplier(sortModel, apiRef);\n      const sortedRows = apiRef.current.applyStrategyProcessor('sorting', {\n        sortRowList\n      });\n      return _extends({}, state, {\n        sorting: _extends({}, state.sorting, {\n          sortedRows\n        })\n      });\n    });\n    apiRef.current.publishEvent('sortedRowsSet');\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, props.sortingMode]);\n  const setSortModel = React.useCallback(model => {\n    const currentModel = gridSortModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      logger.debug(`Setting sort model`);\n      apiRef.current.setState(mergeStateWithSortModel(model, props.disableMultipleColumnsSorting));\n      apiRef.current.forceUpdate();\n      apiRef.current.applySorting();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsSorting]);\n  const sortColumn = React.useCallback((column, direction, allowMultipleSorting) => {\n    if (!column.sortable) {\n      return;\n    }\n\n    const sortItem = createSortItem(column, direction);\n    let sortModel;\n\n    if (!allowMultipleSorting || props.disableMultipleColumnsSorting) {\n      sortModel = !sortItem ? [] : [sortItem];\n    } else {\n      sortModel = upsertSortModel(column.field, sortItem);\n    }\n\n    apiRef.current.setSortModel(sortModel);\n  }, [apiRef, upsertSortModel, createSortItem, props.disableMultipleColumnsSorting]);\n  const getSortModel = React.useCallback(() => gridSortModelSelector(apiRef), [apiRef]);\n  const getSortedRows = React.useCallback(() => {\n    const sortedRows = gridSortedRowEntriesSelector(apiRef);\n    return sortedRows.map(row => row.model);\n  }, [apiRef]);\n  const getSortedRowIds = React.useCallback(() => gridSortedRowIdsSelector(apiRef), [apiRef]);\n  const getRowIdFromRowIndex = React.useCallback(index => apiRef.current.getSortedRowIds()[index], [apiRef]);\n  const sortApi = {\n    getSortModel,\n    getSortedRows,\n    getSortedRowIds,\n    getRowIdFromRowIndex,\n    setSortModel,\n    sortColumn,\n    applySorting\n  };\n  useGridApiMethod(apiRef, sortApi, 'public');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState2, _props$initialState2$;\n\n    const sortModelToExport = gridSortModelSelector(apiRef);\n    const shouldExportSortModel = // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels || // Always export if the model is controlled\n    props.sortModel != null || // Always export if the model has been initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.sorting) == null ? void 0 : _props$initialState2$.sortModel) != null || // Export if the model is not empty\n    sortModelToExport.length > 0;\n\n    if (!shouldExportSortModel) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      sorting: {\n        sortModel: sortModelToExport\n      }\n    });\n  }, [apiRef, props.sortModel, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.sorting) == null ? void 0 : _props$initialState3$.sortModel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const sortModel = (_context$stateToResto = context.stateToRestore.sorting) == null ? void 0 : _context$stateToResto.sortModel;\n\n    if (sortModel == null) {\n      return params;\n    }\n\n    apiRef.current.setState(mergeStateWithSortModel(sortModel, props.disableMultipleColumnsSorting));\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.applySorting]\n    });\n  }, [apiRef, props.disableMultipleColumnsSorting]);\n  const flatSortingMethod = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(apiRef);\n    const rootGroupNode = rowTree[GRID_ROOT_GROUP_ID];\n    const sortedChildren = params.sortRowList ? params.sortRowList(rootGroupNode.children.map(childId => rowTree[childId])) : [...rootGroupNode.children];\n\n    if (rootGroupNode.footerId != null) {\n      sortedChildren.push(rootGroupNode.footerId);\n    }\n\n    return sortedChildren;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'sorting', flatSortingMethod);\n  /**\n   * EVENTS\n   */\n\n  const handleColumnHeaderClick = React.useCallback(({\n    colDef\n  }, event) => {\n    const allowMultipleSorting = event.shiftKey || event.metaKey || event.ctrlKey;\n    sortColumn(colDef, undefined, allowMultipleSorting);\n  }, [sortColumn]);\n  const handleColumnHeaderKeyDown = React.useCallback(({\n    colDef\n  }, event) => {\n    // Ctrl + Enter opens the column menu\n    if (isEnterKey(event.key) && !event.ctrlKey && !event.metaKey) {\n      sortColumn(colDef, undefined, event.shiftKey);\n    }\n  }, [sortColumn]);\n  const handleColumnsChange = React.useCallback(() => {\n    // When the columns change we check that the sorted columns are still part of the dataset\n    const sortModel = gridSortModelSelector(apiRef);\n    const latestColumns = gridColumnLookupSelector(apiRef);\n\n    if (sortModel.length > 0) {\n      const newModel = sortModel.filter(sortItem => latestColumns[sortItem.field]);\n\n      if (newModel.length < sortModel.length) {\n        apiRef.current.setSortModel(newModel);\n      }\n    }\n  }, [apiRef]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'sorting') {\n      apiRef.current.applySorting();\n    }\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItem);\n  useGridApiEventHandler(apiRef, 'columnHeaderClick', handleColumnHeaderClick);\n  useGridApiEventHandler(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'rowsSet', apiRef.current.applySorting);\n  useGridApiEventHandler(apiRef, 'columnsChange', handleColumnsChange);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  /**\n   * 1ST RENDER\n   */\n\n  useFirstRender(() => {\n    apiRef.current.applySorting();\n  });\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (props.sortModel !== undefined) {\n      apiRef.current.setSortModel(props.sortModel);\n    }\n  }, [apiRef, props.sortModel]);\n};","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/node_modules/@mui/x-data-grid/hooks/features/sorting/useGridSorting.js"],"names":["_extends","React","isEnterKey","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridColumnLookupSelector","gridSortedRowEntriesSelector","gridSortedRowIdsSelector","gridSortModelSelector","GRID_ROOT_GROUP_ID","gridRowTreeSelector","useFirstRender","useGridRegisterStrategyProcessor","GRID_DEFAULT_STRATEGY","buildAggregatedSortingApplier","mergeStateWithSortModel","getNextGridSortDirection","sanitizeSortModel","useGridRegisterPipeProcessor","getTreeNodeDescendants","sortingStateInitializer","state","props","_ref","_props$sortModel","_props$initialState","_props$initialState$s","sortModel","initialState","sorting","disableMultipleColumnsSorting","sortedRows","useGridSorting","apiRef","_props$initialState3","_props$initialState3$","logger","current","registerControlState","stateId","propModel","propOnChange","onSortModelChange","stateSelector","changeEvent","upsertSortModel","useCallback","field","sortItem","existingIdx","findIndex","c","newSortModel","splice","createSortItem","col","directionOverride","_col$sortingOrder2","existing","find","_col$sortingOrder","nextSort","undefined","sortingOrder","sort","addColumnMenuItem","columnMenuItems","colDef","sortable","some","item","applySorting","setState","sortingMode","debug","instanceId","sortRowList","applyStrategyProcessor","publishEvent","forceUpdate","setSortModel","model","currentModel","sortColumn","column","direction","allowMultipleSorting","getSortModel","getSortedRows","map","row","getSortedRowIds","getRowIdFromRowIndex","index","sortApi","stateExportPreProcessing","prevState","context","_props$initialState2","_props$initialState2$","sortModelToExport","shouldExportSortModel","exportOnlyDirtyModels","length","stateRestorePreProcessing","params","_context$stateToResto","stateToRestore","callbacks","flatSortingMethod","rowTree","rootGroupNode","sortedChildren","children","childId","footerId","push","handleColumnHeaderClick","event","shiftKey","metaKey","ctrlKey","handleColumnHeaderKeyDown","key","handleColumnsChange","latestColumns","newModel","filter","handleStrategyProcessorChange","methodName","useEffect"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { isEnterKey } from '../../../utils/keyboardUtils';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnLookupSelector } from '../columns/gridColumnsSelector';\nimport { gridSortedRowEntriesSelector, gridSortedRowIdsSelector, gridSortModelSelector } from './gridSortingSelector';\nimport { GRID_ROOT_GROUP_ID, gridRowTreeSelector } from '../rows';\nimport { useFirstRender } from '../../utils/useFirstRender';\nimport { useGridRegisterStrategyProcessor, GRID_DEFAULT_STRATEGY } from '../../core/strategyProcessing';\nimport { buildAggregatedSortingApplier, mergeStateWithSortModel, getNextGridSortDirection, sanitizeSortModel } from './gridSortingUtils';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { getTreeNodeDescendants } from '../rows/gridRowsUtils';\nexport const sortingStateInitializer = (state, props) => {\n  var _ref, _props$sortModel, _props$initialState, _props$initialState$s;\n  const sortModel = (_ref = (_props$sortModel = props.sortModel) != null ? _props$sortModel : (_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$s = _props$initialState.sorting) == null ? void 0 : _props$initialState$s.sortModel) != null ? _ref : [];\n  return _extends({}, state, {\n    sorting: {\n      sortModel: sanitizeSortModel(sortModel, props.disableMultipleColumnsSorting),\n      sortedRows: []\n    }\n  });\n};\n\n/**\n * @requires useGridRows (event)\n * @requires useGridColumns (event)\n */\nexport const useGridSorting = (apiRef, props) => {\n  var _props$initialState3, _props$initialState3$;\n  const logger = useGridLogger(apiRef, 'useGridSorting');\n  apiRef.current.registerControlState({\n    stateId: 'sortModel',\n    propModel: props.sortModel,\n    propOnChange: props.onSortModelChange,\n    stateSelector: gridSortModelSelector,\n    changeEvent: 'sortModelChange'\n  });\n  const upsertSortModel = React.useCallback((field, sortItem) => {\n    const sortModel = gridSortModelSelector(apiRef);\n    const existingIdx = sortModel.findIndex(c => c.field === field);\n    let newSortModel = [...sortModel];\n    if (existingIdx > -1) {\n      if (!sortItem) {\n        newSortModel.splice(existingIdx, 1);\n      } else {\n        newSortModel.splice(existingIdx, 1, sortItem);\n      }\n    } else {\n      newSortModel = [...sortModel, sortItem];\n    }\n    return newSortModel;\n  }, [apiRef]);\n  const createSortItem = React.useCallback((col, directionOverride) => {\n    var _col$sortingOrder2;\n    const sortModel = gridSortModelSelector(apiRef);\n    const existing = sortModel.find(c => c.field === col.field);\n    if (existing) {\n      var _col$sortingOrder;\n      const nextSort = directionOverride === undefined ? getNextGridSortDirection((_col$sortingOrder = col.sortingOrder) != null ? _col$sortingOrder : props.sortingOrder, existing.sort) : directionOverride;\n      return nextSort == null ? undefined : _extends({}, existing, {\n        sort: nextSort\n      });\n    }\n    return {\n      field: col.field,\n      sort: directionOverride === undefined ? getNextGridSortDirection((_col$sortingOrder2 = col.sortingOrder) != null ? _col$sortingOrder2 : props.sortingOrder) : directionOverride\n    };\n  }, [apiRef, props.sortingOrder]);\n  const addColumnMenuItem = React.useCallback((columnMenuItems, colDef) => {\n    if (colDef == null || colDef.sortable === false) {\n      return columnMenuItems;\n    }\n    const sortingOrder = colDef.sortingOrder || props.sortingOrder;\n    if (sortingOrder.some(item => !!item)) {\n      return [...columnMenuItems, 'columnMenuSortItem'];\n    }\n    return columnMenuItems;\n  }, [props.sortingOrder]);\n\n  /**\n   * API METHODS\n   */\n  const applySorting = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      if (props.sortingMode === 'server') {\n        logger.debug('Skipping sorting rows as sortingMode = server');\n        return _extends({}, state, {\n          sorting: _extends({}, state.sorting, {\n            sortedRows: getTreeNodeDescendants(gridRowTreeSelector(apiRef), GRID_ROOT_GROUP_ID, false)\n          })\n        });\n      }\n      const sortModel = gridSortModelSelector(state, apiRef.current.instanceId);\n      const sortRowList = buildAggregatedSortingApplier(sortModel, apiRef);\n      const sortedRows = apiRef.current.applyStrategyProcessor('sorting', {\n        sortRowList\n      });\n      return _extends({}, state, {\n        sorting: _extends({}, state.sorting, {\n          sortedRows\n        })\n      });\n    });\n    apiRef.current.publishEvent('sortedRowsSet');\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger, props.sortingMode]);\n  const setSortModel = React.useCallback(model => {\n    const currentModel = gridSortModelSelector(apiRef);\n    if (currentModel !== model) {\n      logger.debug(`Setting sort model`);\n      apiRef.current.setState(mergeStateWithSortModel(model, props.disableMultipleColumnsSorting));\n      apiRef.current.forceUpdate();\n      apiRef.current.applySorting();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsSorting]);\n  const sortColumn = React.useCallback((column, direction, allowMultipleSorting) => {\n    if (!column.sortable) {\n      return;\n    }\n    const sortItem = createSortItem(column, direction);\n    let sortModel;\n    if (!allowMultipleSorting || props.disableMultipleColumnsSorting) {\n      sortModel = !sortItem ? [] : [sortItem];\n    } else {\n      sortModel = upsertSortModel(column.field, sortItem);\n    }\n    apiRef.current.setSortModel(sortModel);\n  }, [apiRef, upsertSortModel, createSortItem, props.disableMultipleColumnsSorting]);\n  const getSortModel = React.useCallback(() => gridSortModelSelector(apiRef), [apiRef]);\n  const getSortedRows = React.useCallback(() => {\n    const sortedRows = gridSortedRowEntriesSelector(apiRef);\n    return sortedRows.map(row => row.model);\n  }, [apiRef]);\n  const getSortedRowIds = React.useCallback(() => gridSortedRowIdsSelector(apiRef), [apiRef]);\n  const getRowIdFromRowIndex = React.useCallback(index => apiRef.current.getSortedRowIds()[index], [apiRef]);\n  const sortApi = {\n    getSortModel,\n    getSortedRows,\n    getSortedRowIds,\n    getRowIdFromRowIndex,\n    setSortModel,\n    sortColumn,\n    applySorting\n  };\n  useGridApiMethod(apiRef, sortApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState2, _props$initialState2$;\n    const sortModelToExport = gridSortModelSelector(apiRef);\n    const shouldExportSortModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.sortModel != null ||\n    // Always export if the model has been initialized\n    ((_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.sorting) == null ? void 0 : _props$initialState2$.sortModel) != null ||\n    // Export if the model is not empty\n    sortModelToExport.length > 0;\n    if (!shouldExportSortModel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      sorting: {\n        sortModel: sortModelToExport\n      }\n    });\n  }, [apiRef, props.sortModel, (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.sorting) == null ? void 0 : _props$initialState3$.sortModel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n    const sortModel = (_context$stateToResto = context.stateToRestore.sorting) == null ? void 0 : _context$stateToResto.sortModel;\n    if (sortModel == null) {\n      return params;\n    }\n    apiRef.current.setState(mergeStateWithSortModel(sortModel, props.disableMultipleColumnsSorting));\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.applySorting]\n    });\n  }, [apiRef, props.disableMultipleColumnsSorting]);\n  const flatSortingMethod = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(apiRef);\n    const rootGroupNode = rowTree[GRID_ROOT_GROUP_ID];\n    const sortedChildren = params.sortRowList ? params.sortRowList(rootGroupNode.children.map(childId => rowTree[childId])) : [...rootGroupNode.children];\n    if (rootGroupNode.footerId != null) {\n      sortedChildren.push(rootGroupNode.footerId);\n    }\n    return sortedChildren;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'sorting', flatSortingMethod);\n\n  /**\n   * EVENTS\n   */\n  const handleColumnHeaderClick = React.useCallback(({\n    colDef\n  }, event) => {\n    const allowMultipleSorting = event.shiftKey || event.metaKey || event.ctrlKey;\n    sortColumn(colDef, undefined, allowMultipleSorting);\n  }, [sortColumn]);\n  const handleColumnHeaderKeyDown = React.useCallback(({\n    colDef\n  }, event) => {\n    // Ctrl + Enter opens the column menu\n    if (isEnterKey(event.key) && !event.ctrlKey && !event.metaKey) {\n      sortColumn(colDef, undefined, event.shiftKey);\n    }\n  }, [sortColumn]);\n  const handleColumnsChange = React.useCallback(() => {\n    // When the columns change we check that the sorted columns are still part of the dataset\n    const sortModel = gridSortModelSelector(apiRef);\n    const latestColumns = gridColumnLookupSelector(apiRef);\n    if (sortModel.length > 0) {\n      const newModel = sortModel.filter(sortItem => latestColumns[sortItem.field]);\n      if (newModel.length < sortModel.length) {\n        apiRef.current.setSortModel(newModel);\n      }\n    }\n  }, [apiRef]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'sorting') {\n      apiRef.current.applySorting();\n    }\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItem);\n  useGridApiEventHandler(apiRef, 'columnHeaderClick', handleColumnHeaderClick);\n  useGridApiEventHandler(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'rowsSet', apiRef.current.applySorting);\n  useGridApiEventHandler(apiRef, 'columnsChange', handleColumnsChange);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n\n  /**\n   * 1ST RENDER\n   */\n  useFirstRender(() => {\n    apiRef.current.applySorting();\n  });\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (props.sortModel !== undefined) {\n      apiRef.current.setSortModel(props.sortModel);\n    }\n  }, [apiRef, props.sortModel]);\n};"]},"metadata":{},"sourceType":"module"}