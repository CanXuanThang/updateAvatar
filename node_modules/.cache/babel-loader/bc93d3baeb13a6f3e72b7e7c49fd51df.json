{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"id\", \"value\", \"formattedValue\", \"api\", \"field\", \"row\", \"rowNode\", \"colDef\", \"cellMode\", \"isEditable\", \"tabIndex\", \"className\", \"hasFocus\", \"isValidating\", \"isProcessingProps\", \"error\", \"onValueChange\", \"initialOpen\", \"getOptionLabel\", \"getOptionValue\"],\n      _excluded2 = [\"MenuProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { isEscapeKey } from '../../utils/keyboardUtils';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { GridEditModes } from '../../models/gridEditRowModel';\nimport { getValueFromValueOptions, isSingleSelectColDef } from '../panel/filterPanel/filterPanelUtils';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { createElement as _createElement } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction isKeyboardEvent(event) {\n  return !!event.key;\n}\n\nfunction GridEditSingleSelectCell(props) {\n  var _rootProps$slotProps, _baseSelectProps$nati, _rootProps$slotProps2;\n\n  const rootProps = useGridRootProps();\n\n  const {\n    id,\n    value: valueProp,\n    field,\n    row,\n    colDef,\n    hasFocus,\n    error,\n    onValueChange,\n    initialOpen = rootProps.editMode === GridEditModes.Cell,\n    getOptionLabel: getOptionLabelProp,\n    getOptionValue: getOptionValueProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const apiRef = useGridApiContext();\n  const ref = React.useRef();\n  const inputRef = React.useRef();\n  const [open, setOpen] = React.useState(initialOpen);\n  const baseSelectProps = ((_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseSelect) || {};\n  const isSelectNative = (_baseSelectProps$nati = baseSelectProps.native) != null ? _baseSelectProps$nati : false;\n\n  const _ref = ((_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.baseSelect) || {},\n        {\n    MenuProps\n  } = _ref,\n        otherBaseSelectProps = _objectWithoutPropertiesLoose(_ref, _excluded2);\n\n  useEnhancedEffect(() => {\n    if (hasFocus) {\n      var _inputRef$current;\n\n      (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.focus();\n    }\n  }, [hasFocus]);\n\n  if (!isSingleSelectColDef(colDef)) {\n    return null;\n  }\n\n  let valueOptions;\n\n  if (typeof (colDef == null ? void 0 : colDef.valueOptions) === 'function') {\n    valueOptions = colDef == null ? void 0 : colDef.valueOptions({\n      id,\n      row,\n      field\n    });\n  } else {\n    valueOptions = colDef == null ? void 0 : colDef.valueOptions;\n  }\n\n  if (!valueOptions) {\n    return null;\n  }\n\n  const getOptionValue = getOptionValueProp || colDef.getOptionValue;\n  const getOptionLabel = getOptionLabelProp || colDef.getOptionLabel;\n\n  const handleChange = async event => {\n    if (!isSingleSelectColDef(colDef) || !valueOptions) {\n      return;\n    }\n\n    setOpen(false);\n    const target = event.target; // NativeSelect casts the value to a string.\n\n    const formattedTargetValue = getValueFromValueOptions(target.value, valueOptions, getOptionValue);\n\n    if (onValueChange) {\n      await onValueChange(event, formattedTargetValue);\n    }\n\n    await apiRef.current.setEditCellValue({\n      id,\n      field,\n      value: formattedTargetValue\n    }, event);\n  };\n\n  const handleClose = (event, reason) => {\n    if (rootProps.editMode === GridEditModes.Row) {\n      setOpen(false);\n      return;\n    }\n\n    if (reason === 'backdropClick' || isEscapeKey(event.key)) {\n      apiRef.current.stopCellEditMode({\n        id,\n        field,\n        ignoreModifications: true\n      });\n    }\n  };\n\n  const handleOpen = event => {\n    if (isKeyboardEvent(event) && event.key === 'Enter') {\n      return;\n    }\n\n    setOpen(true);\n  };\n\n  if (!valueOptions || !colDef) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsx(rootProps.slots.baseSelect, _extends({\n    ref: ref,\n    inputRef: inputRef,\n    value: valueProp,\n    onChange: handleChange,\n    open: open,\n    onOpen: handleOpen,\n    MenuProps: _extends({\n      onClose: handleClose\n    }, MenuProps),\n    error: error,\n    native: isSelectNative,\n    fullWidth: true\n  }, other, otherBaseSelectProps, {\n    children: valueOptions.map(valueOption => {\n      var _rootProps$slotProps3;\n\n      const value = getOptionValue(valueOption);\n      return /*#__PURE__*/_createElement(rootProps.slots.baseSelectOption, _extends({}, ((_rootProps$slotProps3 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps3.baseSelectOption) || {}, {\n        native: isSelectNative,\n        key: value,\n        value: value\n      }), getOptionLabel(valueOption));\n    })\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridEditSingleSelectCell.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * GridApi that let you manipulate the grid.\n   */\n  api: PropTypes.object.isRequired,\n\n  /**\n   * The mode of the cell.\n   */\n  cellMode: PropTypes.oneOf(['edit', 'view']).isRequired,\n  changeReason: PropTypes.oneOf(['debouncedSetEditCellValue', 'setEditCellValue']),\n\n  /**\n   * The column of the row that the current cell belongs to.\n   */\n  colDef: PropTypes.object.isRequired,\n\n  /**\n   * The column field of the cell that triggered the event.\n   */\n  field: PropTypes.string.isRequired,\n\n  /**\n   * The cell value formatted with the column valueFormatter.\n   */\n  formattedValue: PropTypes.any,\n\n  /**\n   * Used to determine the label displayed for a given value option.\n   * @param {ValueOptions} value The current value option.\n   * @returns {string} The text to be displayed.\n   */\n  getOptionLabel: PropTypes.func,\n\n  /**\n   * Used to determine the value used for a value option.\n   * @param {ValueOptions} value The current value option.\n   * @returns {string} The value to be used.\n   */\n  getOptionValue: PropTypes.func,\n\n  /**\n   * If true, the cell is the active element.\n   */\n  hasFocus: PropTypes.bool.isRequired,\n\n  /**\n   * The grid row id.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n\n  /**\n   * If true, the select opens by default.\n   */\n  initialOpen: PropTypes.bool,\n\n  /**\n   * If true, the cell is editable.\n   */\n  isEditable: PropTypes.bool,\n  isProcessingProps: PropTypes.bool,\n  isValidating: PropTypes.bool,\n\n  /**\n   * Callback called when the value is changed by the user.\n   * @param {SelectChangeEvent<any>} event The event source of the callback.\n   * @param {any} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.\n   * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`\n   */\n  onValueChange: PropTypes.func,\n\n  /**\n   * The row model of the row that the current cell belongs to.\n   */\n  row: PropTypes.any.isRequired,\n\n  /**\n   * The node of the row that the current cell belongs to.\n   */\n  rowNode: PropTypes.object.isRequired,\n\n  /**\n   * the tabIndex value.\n   */\n  tabIndex: PropTypes.oneOf([-1, 0]).isRequired,\n\n  /**\n   * The cell value.\n   * If the column has `valueGetter`, use `params.row` to directly access the fields.\n   */\n  value: PropTypes.any\n} : void 0;\nexport { GridEditSingleSelectCell };\nexport const renderEditSingleSelectCell = params => /*#__PURE__*/_jsx(GridEditSingleSelectCell, _extends({}, params));","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/node_modules/@mui/x-data-grid/components/cell/GridEditSingleSelectCell.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","_excluded2","React","PropTypes","unstable_useEnhancedEffect","useEnhancedEffect","isEscapeKey","useGridRootProps","GridEditModes","getValueFromValueOptions","isSingleSelectColDef","useGridApiContext","createElement","_createElement","jsx","_jsx","isKeyboardEvent","event","key","GridEditSingleSelectCell","props","_rootProps$slotProps","_baseSelectProps$nati","_rootProps$slotProps2","rootProps","id","value","valueProp","field","row","colDef","hasFocus","error","onValueChange","initialOpen","editMode","Cell","getOptionLabel","getOptionLabelProp","getOptionValue","getOptionValueProp","other","apiRef","ref","useRef","inputRef","open","setOpen","useState","baseSelectProps","slotProps","baseSelect","isSelectNative","native","_ref","MenuProps","otherBaseSelectProps","_inputRef$current","current","focus","valueOptions","handleChange","target","formattedTargetValue","setEditCellValue","handleClose","reason","Row","stopCellEditMode","ignoreModifications","handleOpen","slots","onChange","onOpen","onClose","fullWidth","children","map","valueOption","_rootProps$slotProps3","baseSelectOption","process","env","NODE_ENV","propTypes","api","object","isRequired","cellMode","oneOf","changeReason","string","formattedValue","any","func","bool","oneOfType","number","isEditable","isProcessingProps","isValidating","rowNode","tabIndex","renderEditSingleSelectCell","params"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"id\", \"value\", \"formattedValue\", \"api\", \"field\", \"row\", \"rowNode\", \"colDef\", \"cellMode\", \"isEditable\", \"tabIndex\", \"className\", \"hasFocus\", \"isValidating\", \"isProcessingProps\", \"error\", \"onValueChange\", \"initialOpen\", \"getOptionLabel\", \"getOptionValue\"],\n  _excluded2 = [\"MenuProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { isEscapeKey } from '../../utils/keyboardUtils';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { GridEditModes } from '../../models/gridEditRowModel';\nimport { getValueFromValueOptions, isSingleSelectColDef } from '../panel/filterPanel/filterPanelUtils';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { createElement as _createElement } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction isKeyboardEvent(event) {\n  return !!event.key;\n}\nfunction GridEditSingleSelectCell(props) {\n  var _rootProps$slotProps, _baseSelectProps$nati, _rootProps$slotProps2;\n  const rootProps = useGridRootProps();\n  const {\n      id,\n      value: valueProp,\n      field,\n      row,\n      colDef,\n      hasFocus,\n      error,\n      onValueChange,\n      initialOpen = rootProps.editMode === GridEditModes.Cell,\n      getOptionLabel: getOptionLabelProp,\n      getOptionValue: getOptionValueProp\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const apiRef = useGridApiContext();\n  const ref = React.useRef();\n  const inputRef = React.useRef();\n  const [open, setOpen] = React.useState(initialOpen);\n  const baseSelectProps = ((_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseSelect) || {};\n  const isSelectNative = (_baseSelectProps$nati = baseSelectProps.native) != null ? _baseSelectProps$nati : false;\n  const _ref = ((_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.baseSelect) || {},\n    {\n      MenuProps\n    } = _ref,\n    otherBaseSelectProps = _objectWithoutPropertiesLoose(_ref, _excluded2);\n  useEnhancedEffect(() => {\n    if (hasFocus) {\n      var _inputRef$current;\n      (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.focus();\n    }\n  }, [hasFocus]);\n  if (!isSingleSelectColDef(colDef)) {\n    return null;\n  }\n  let valueOptions;\n  if (typeof (colDef == null ? void 0 : colDef.valueOptions) === 'function') {\n    valueOptions = colDef == null ? void 0 : colDef.valueOptions({\n      id,\n      row,\n      field\n    });\n  } else {\n    valueOptions = colDef == null ? void 0 : colDef.valueOptions;\n  }\n  if (!valueOptions) {\n    return null;\n  }\n  const getOptionValue = getOptionValueProp || colDef.getOptionValue;\n  const getOptionLabel = getOptionLabelProp || colDef.getOptionLabel;\n  const handleChange = async event => {\n    if (!isSingleSelectColDef(colDef) || !valueOptions) {\n      return;\n    }\n    setOpen(false);\n    const target = event.target;\n    // NativeSelect casts the value to a string.\n    const formattedTargetValue = getValueFromValueOptions(target.value, valueOptions, getOptionValue);\n    if (onValueChange) {\n      await onValueChange(event, formattedTargetValue);\n    }\n    await apiRef.current.setEditCellValue({\n      id,\n      field,\n      value: formattedTargetValue\n    }, event);\n  };\n  const handleClose = (event, reason) => {\n    if (rootProps.editMode === GridEditModes.Row) {\n      setOpen(false);\n      return;\n    }\n    if (reason === 'backdropClick' || isEscapeKey(event.key)) {\n      apiRef.current.stopCellEditMode({\n        id,\n        field,\n        ignoreModifications: true\n      });\n    }\n  };\n  const handleOpen = event => {\n    if (isKeyboardEvent(event) && event.key === 'Enter') {\n      return;\n    }\n    setOpen(true);\n  };\n  if (!valueOptions || !colDef) {\n    return null;\n  }\n  return /*#__PURE__*/_jsx(rootProps.slots.baseSelect, _extends({\n    ref: ref,\n    inputRef: inputRef,\n    value: valueProp,\n    onChange: handleChange,\n    open: open,\n    onOpen: handleOpen,\n    MenuProps: _extends({\n      onClose: handleClose\n    }, MenuProps),\n    error: error,\n    native: isSelectNative,\n    fullWidth: true\n  }, other, otherBaseSelectProps, {\n    children: valueOptions.map(valueOption => {\n      var _rootProps$slotProps3;\n      const value = getOptionValue(valueOption);\n      return /*#__PURE__*/_createElement(rootProps.slots.baseSelectOption, _extends({}, ((_rootProps$slotProps3 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps3.baseSelectOption) || {}, {\n        native: isSelectNative,\n        key: value,\n        value: value\n      }), getOptionLabel(valueOption));\n    })\n  }));\n}\nprocess.env.NODE_ENV !== \"production\" ? GridEditSingleSelectCell.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * GridApi that let you manipulate the grid.\n   */\n  api: PropTypes.object.isRequired,\n  /**\n   * The mode of the cell.\n   */\n  cellMode: PropTypes.oneOf(['edit', 'view']).isRequired,\n  changeReason: PropTypes.oneOf(['debouncedSetEditCellValue', 'setEditCellValue']),\n  /**\n   * The column of the row that the current cell belongs to.\n   */\n  colDef: PropTypes.object.isRequired,\n  /**\n   * The column field of the cell that triggered the event.\n   */\n  field: PropTypes.string.isRequired,\n  /**\n   * The cell value formatted with the column valueFormatter.\n   */\n  formattedValue: PropTypes.any,\n  /**\n   * Used to determine the label displayed for a given value option.\n   * @param {ValueOptions} value The current value option.\n   * @returns {string} The text to be displayed.\n   */\n  getOptionLabel: PropTypes.func,\n  /**\n   * Used to determine the value used for a value option.\n   * @param {ValueOptions} value The current value option.\n   * @returns {string} The value to be used.\n   */\n  getOptionValue: PropTypes.func,\n  /**\n   * If true, the cell is the active element.\n   */\n  hasFocus: PropTypes.bool.isRequired,\n  /**\n   * The grid row id.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  /**\n   * If true, the select opens by default.\n   */\n  initialOpen: PropTypes.bool,\n  /**\n   * If true, the cell is editable.\n   */\n  isEditable: PropTypes.bool,\n  isProcessingProps: PropTypes.bool,\n  isValidating: PropTypes.bool,\n  /**\n   * Callback called when the value is changed by the user.\n   * @param {SelectChangeEvent<any>} event The event source of the callback.\n   * @param {any} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.\n   * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`\n   */\n  onValueChange: PropTypes.func,\n  /**\n   * The row model of the row that the current cell belongs to.\n   */\n  row: PropTypes.any.isRequired,\n  /**\n   * The node of the row that the current cell belongs to.\n   */\n  rowNode: PropTypes.object.isRequired,\n  /**\n   * the tabIndex value.\n   */\n  tabIndex: PropTypes.oneOf([-1, 0]).isRequired,\n  /**\n   * The cell value.\n   * If the column has `valueGetter`, use `params.row` to directly access the fields.\n   */\n  value: PropTypes.any\n} : void 0;\nexport { GridEditSingleSelectCell };\nexport const renderEditSingleSelectCell = params => /*#__PURE__*/_jsx(GridEditSingleSelectCell, _extends({}, params));"]},"metadata":{},"sourceType":"module"}