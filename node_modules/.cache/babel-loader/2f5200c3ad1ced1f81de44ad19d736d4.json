{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_composeClasses as composeClasses } from '@mui/utils';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { gridColumnGroupsLookupSelector } from '../../hooks/features/columnGrouping/gridColumnGroupsSelector';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { useGridSelector } from '../../hooks/utils/useGridSelector';\nimport { GridGenericColumnHeaderItem } from './GridGenericColumnHeaderItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    headerAlign,\n    isDragging,\n    showColumnBorder,\n    groupId\n  } = ownerState;\n  const slots = {\n    root: ['columnHeader', headerAlign === 'left' && 'columnHeader--alignLeft', headerAlign === 'center' && 'columnHeader--alignCenter', headerAlign === 'right' && 'columnHeader--alignRight', isDragging && 'columnHeader--moving', showColumnBorder && 'columnHeader--showColumnBorder', showColumnBorder && 'columnHeader--withRightBorder', 'withBorderColor', groupId === null ? 'columnHeader--emptyGroup' : 'columnHeader--filledGroup'],\n    draggableContainer: ['columnHeaderDraggableContainer'],\n    titleContainer: ['columnHeaderTitleContainer', 'withBorderColor'],\n    titleContainerContent: ['columnHeaderTitleContainerContent']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nfunction GridColumnGroupHeader(props) {\n  var _columnGroupsLookup$g;\n\n  const {\n    groupId,\n    width,\n    depth,\n    maxDepth,\n    fields,\n    height,\n    colIndex,\n    hasFocus,\n    tabIndex,\n    isLastColumn\n  } = props;\n  const rootProps = useGridRootProps();\n  const headerCellRef = React.useRef(null);\n  const apiRef = useGridApiContext();\n  const columnGroupsLookup = useGridSelector(apiRef, gridColumnGroupsLookupSelector);\n  const group = groupId ? columnGroupsLookup[groupId] : {};\n  const {\n    headerName = groupId != null ? groupId : '',\n    description = '',\n    headerAlign = undefined\n  } = group;\n  let headerComponent;\n  const render = groupId && ((_columnGroupsLookup$g = columnGroupsLookup[groupId]) == null ? void 0 : _columnGroupsLookup$g.renderHeaderGroup);\n  const renderParams = React.useMemo(() => ({\n    groupId,\n    headerName,\n    description,\n    depth,\n    maxDepth,\n    fields,\n    colIndex,\n    isLastColumn\n  }), [groupId, headerName, description, depth, maxDepth, fields, colIndex, isLastColumn]);\n\n  if (groupId && render) {\n    headerComponent = render(renderParams);\n  }\n\n  const showColumnBorder = rootProps.showColumnVerticalBorder;\n\n  const ownerState = _extends({}, props, {\n    classes: rootProps.classes,\n    showColumnBorder,\n    headerAlign,\n    depth,\n    isDragging: false\n  });\n\n  const label = headerName != null ? headerName : groupId;\n  const id = useId();\n  const elementId = groupId === null ? `empty-group-cell-${id}` : groupId;\n  const classes = useUtilityClasses(ownerState);\n  React.useLayoutEffect(() => {\n    if (hasFocus) {\n      const focusableElement = headerCellRef.current.querySelector('[tabindex=\"0\"]');\n      const elementToFocus = focusableElement || headerCellRef.current;\n      elementToFocus == null ? void 0 : elementToFocus.focus();\n    }\n  }, [apiRef, hasFocus]);\n  const publish = React.useCallback(eventName => event => {\n    // Ignore portal\n    // See https://github.com/mui/mui-x/issues/1721\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n\n    apiRef.current.publishEvent(eventName, renderParams, event);\n  }, // For now this is stupid, because renderParams change all the time.\n  // Need to move it's computation in the api, such that for a given depth+columnField, I can get the group parameters\n  [apiRef, renderParams]);\n  const mouseEventsHandlers = React.useMemo(() => ({\n    onKeyDown: publish('columnGroupHeaderKeyDown'),\n    onFocus: publish('columnGroupHeaderFocus'),\n    onBlur: publish('columnGroupHeaderBlur')\n  }), [publish]);\n  const headerClassName = typeof group.headerClassName === 'function' ? group.headerClassName(renderParams) : group.headerClassName;\n  return /*#__PURE__*/_jsx(GridGenericColumnHeaderItem, _extends({\n    ref: headerCellRef,\n    classes: classes,\n    columnMenuOpen: false,\n    colIndex: colIndex,\n    height: height,\n    isResizing: false,\n    sortDirection: null,\n    hasFocus: false,\n    tabIndex: tabIndex,\n    isDraggable: false,\n    headerComponent: headerComponent,\n    headerClassName: headerClassName,\n    description: description,\n    elementId: elementId,\n    width: width,\n    columnMenuIconButton: null,\n    columnTitleIconButtons: null,\n    resizable: false,\n    label: label,\n    \"aria-colspan\": fields.length // The fields are wrapped between |-...-| to avoid confusion between fields \"id\" and \"id2\" when using selector data-fields~=\n    ,\n    \"data-fields\": `|-${fields.join('-|-')}-|`\n  }, mouseEventsHandlers));\n}\n\nexport { GridColumnGroupHeader };","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnGroupHeader.js"],"names":["_extends","React","unstable_useId","useId","unstable_composeClasses","composeClasses","getDataGridUtilityClass","useGridRootProps","gridColumnGroupsLookupSelector","useGridApiContext","useGridSelector","GridGenericColumnHeaderItem","jsx","_jsx","useUtilityClasses","ownerState","classes","headerAlign","isDragging","showColumnBorder","groupId","slots","root","draggableContainer","titleContainer","titleContainerContent","GridColumnGroupHeader","props","_columnGroupsLookup$g","width","depth","maxDepth","fields","height","colIndex","hasFocus","tabIndex","isLastColumn","rootProps","headerCellRef","useRef","apiRef","columnGroupsLookup","group","headerName","description","undefined","headerComponent","render","renderHeaderGroup","renderParams","useMemo","showColumnVerticalBorder","label","id","elementId","useLayoutEffect","focusableElement","current","querySelector","elementToFocus","focus","publish","useCallback","eventName","event","currentTarget","contains","target","publishEvent","mouseEventsHandlers","onKeyDown","onFocus","onBlur","headerClassName","ref","columnMenuOpen","isResizing","sortDirection","isDraggable","columnMenuIconButton","columnTitleIconButtons","resizable","length","join"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_composeClasses as composeClasses } from '@mui/utils';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { gridColumnGroupsLookupSelector } from '../../hooks/features/columnGrouping/gridColumnGroupsSelector';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { useGridSelector } from '../../hooks/utils/useGridSelector';\nimport { GridGenericColumnHeaderItem } from './GridGenericColumnHeaderItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    headerAlign,\n    isDragging,\n    showColumnBorder,\n    groupId\n  } = ownerState;\n  const slots = {\n    root: ['columnHeader', headerAlign === 'left' && 'columnHeader--alignLeft', headerAlign === 'center' && 'columnHeader--alignCenter', headerAlign === 'right' && 'columnHeader--alignRight', isDragging && 'columnHeader--moving', showColumnBorder && 'columnHeader--showColumnBorder', showColumnBorder && 'columnHeader--withRightBorder', 'withBorderColor', groupId === null ? 'columnHeader--emptyGroup' : 'columnHeader--filledGroup'],\n    draggableContainer: ['columnHeaderDraggableContainer'],\n    titleContainer: ['columnHeaderTitleContainer', 'withBorderColor'],\n    titleContainerContent: ['columnHeaderTitleContainerContent']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nfunction GridColumnGroupHeader(props) {\n  var _columnGroupsLookup$g;\n  const {\n    groupId,\n    width,\n    depth,\n    maxDepth,\n    fields,\n    height,\n    colIndex,\n    hasFocus,\n    tabIndex,\n    isLastColumn\n  } = props;\n  const rootProps = useGridRootProps();\n  const headerCellRef = React.useRef(null);\n  const apiRef = useGridApiContext();\n  const columnGroupsLookup = useGridSelector(apiRef, gridColumnGroupsLookupSelector);\n  const group = groupId ? columnGroupsLookup[groupId] : {};\n  const {\n    headerName = groupId != null ? groupId : '',\n    description = '',\n    headerAlign = undefined\n  } = group;\n  let headerComponent;\n  const render = groupId && ((_columnGroupsLookup$g = columnGroupsLookup[groupId]) == null ? void 0 : _columnGroupsLookup$g.renderHeaderGroup);\n  const renderParams = React.useMemo(() => ({\n    groupId,\n    headerName,\n    description,\n    depth,\n    maxDepth,\n    fields,\n    colIndex,\n    isLastColumn\n  }), [groupId, headerName, description, depth, maxDepth, fields, colIndex, isLastColumn]);\n  if (groupId && render) {\n    headerComponent = render(renderParams);\n  }\n  const showColumnBorder = rootProps.showColumnVerticalBorder;\n  const ownerState = _extends({}, props, {\n    classes: rootProps.classes,\n    showColumnBorder,\n    headerAlign,\n    depth,\n    isDragging: false\n  });\n  const label = headerName != null ? headerName : groupId;\n  const id = useId();\n  const elementId = groupId === null ? `empty-group-cell-${id}` : groupId;\n  const classes = useUtilityClasses(ownerState);\n  React.useLayoutEffect(() => {\n    if (hasFocus) {\n      const focusableElement = headerCellRef.current.querySelector('[tabindex=\"0\"]');\n      const elementToFocus = focusableElement || headerCellRef.current;\n      elementToFocus == null ? void 0 : elementToFocus.focus();\n    }\n  }, [apiRef, hasFocus]);\n  const publish = React.useCallback(eventName => event => {\n    // Ignore portal\n    // See https://github.com/mui/mui-x/issues/1721\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    apiRef.current.publishEvent(eventName, renderParams, event);\n  },\n  // For now this is stupid, because renderParams change all the time.\n  // Need to move it's computation in the api, such that for a given depth+columnField, I can get the group parameters\n  [apiRef, renderParams]);\n  const mouseEventsHandlers = React.useMemo(() => ({\n    onKeyDown: publish('columnGroupHeaderKeyDown'),\n    onFocus: publish('columnGroupHeaderFocus'),\n    onBlur: publish('columnGroupHeaderBlur')\n  }), [publish]);\n  const headerClassName = typeof group.headerClassName === 'function' ? group.headerClassName(renderParams) : group.headerClassName;\n  return /*#__PURE__*/_jsx(GridGenericColumnHeaderItem, _extends({\n    ref: headerCellRef,\n    classes: classes,\n    columnMenuOpen: false,\n    colIndex: colIndex,\n    height: height,\n    isResizing: false,\n    sortDirection: null,\n    hasFocus: false,\n    tabIndex: tabIndex,\n    isDraggable: false,\n    headerComponent: headerComponent,\n    headerClassName: headerClassName,\n    description: description,\n    elementId: elementId,\n    width: width,\n    columnMenuIconButton: null,\n    columnTitleIconButtons: null,\n    resizable: false,\n    label: label,\n    \"aria-colspan\": fields.length\n    // The fields are wrapped between |-...-| to avoid confusion between fields \"id\" and \"id2\" when using selector data-fields~=\n    ,\n    \"data-fields\": `|-${fields.join('-|-')}-|`\n  }, mouseEventsHandlers));\n}\nexport { GridColumnGroupHeader };"]},"metadata":{},"sourceType":"module"}