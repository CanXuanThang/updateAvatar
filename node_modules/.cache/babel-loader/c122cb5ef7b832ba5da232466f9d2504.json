{"ast":null,"code":"const validateEmail = username => {\n  if (!username) {\n    return 'usernameRequire';\n  }\n\n  return '';\n};\n\nconst validatePassword = password => {\n  if (!password) {\n    return 'passwordRequire';\n  }\n\n  if (password.length < 4) {\n    return 'minPasswordInvalid';\n  }\n\n  return '';\n};\n\nconst validateFactory = factory => {\n  if (!factory) {\n    return 'factoryRequire';\n  }\n\n  return '';\n};\n\nconst validateRepeatPassword = (password, repeatPassword) => {\n  if (!repeatPassword) {\n    return 'passwordRequire';\n  }\n\n  if (password.length < 8 && password.length > 16) {\n    return 'minPasswordInvalid';\n  }\n\n  if (password !== repeatPassword) {\n    return 'matchPasswordInvalid';\n  }\n\n  return '';\n};\n\nconst validateField = (field, value) => {\n  if (value) return '';\n  let fieldRequire = '';\n\n  switch (field) {\n    case 'name':\n      fieldRequire = 'nameRequire';\n      break;\n\n    case 'gender':\n      fieldRequire = 'genderRequire';\n      break;\n\n    case 'region':\n      fieldRequire = 'regionRequire';\n      break;\n\n    case 'state':\n      fieldRequire = 'stateRequire';\n      break;\n  }\n\n  return fieldRequire;\n};\n\nconst validateFieldAddEmployee = (field, value) => {\n  if (value) return '';\n  let fieldRequire = '';\n\n  switch (field) {\n    case 'name':\n      fieldRequire = 'nameRequire';\n      break;\n\n    case 'gender':\n      fieldRequire = 'genderRequire';\n      break;\n\n    case 'ktp':\n      fieldRequire = 'ktpRequire';\n      break;\n\n    case 'ncId':\n      fieldRequire = 'ncIdRequire';\n      break;\n\n    case 'type':\n      fieldRequire = 'type';\n      break;\n  }\n\n  return fieldRequire;\n};\n\nconst validateName = name => {\n  if (!name) {\n    return 'nameRequire';\n  }\n\n  if (name.length > 50) {\n    return 'maxNameValid';\n  }\n\n  return '';\n};\n\nexport const validateFieldName = name => {\n  return {\n    name: validName(name.name)\n  };\n};\nexport const validName = name => {\n  return !name;\n};\nexport const validateLogin = values => {\n  return {\n    username: validateEmail(values.username),\n    password: validatePassword(values.password),\n    factory: validateFactory(Number(values.company_id))\n  };\n};\nexport const validLogin = values => {\n  return !values.username && !values.password;\n};\nexport const validateSignUp = values => {\n  return {\n    email: validateEmail(values.email),\n    password: validatePassword(values.password),\n    repeatPassword: validateRepeatPassword(values.password, values.repeatPassword),\n    name: validateField('name', values.name),\n    gender: validateField('gender', values.gender),\n    region: validateField('region', values.region),\n    state: validateField('state', values.state)\n  };\n};\nexport const validSignUp = values => {\n  return !values.email && !values.password && !values.repeatPassword && !values.name && !values.gender && !values.region && !values.state;\n};\nexport const validateAddEmployee = values => {\n  return {\n    name: validateFieldAddEmployee('name', values.name),\n    gender: validateFieldAddEmployee('gender', values.gender),\n    ktp: validateFieldAddEmployee('ktp', values.ktp),\n    ncId: validateFieldAddEmployee('ncId', values.ncId),\n    type: validateFieldAddEmployee('type', values.type)\n  };\n};\nexport const validAddEmployee = values => {\n  return !values.gender && !values.ktp && !values.name && !values.ncId && !values.type;\n};","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/src/modules/auth/utils.ts"],"names":["validateEmail","username","validatePassword","password","length","validateFactory","factory","validateRepeatPassword","repeatPassword","validateField","field","value","fieldRequire","validateFieldAddEmployee","validateName","name","validateFieldName","validName","validateLogin","values","Number","company_id","validLogin","validateSignUp","email","gender","region","state","validSignUp","validateAddEmployee","ktp","ncId","type","validAddEmployee"],"mappings":"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","sourcesContent":["import { ILoginParams, ILoginValidation } from '../../models/auth';\nimport { EmployeeParams, EmployeeValidate } from '../../models/employee';\nimport { ISignUpParams, ISignUpValidation } from '../../models/singup';\n\nconst validateEmail = (username: string) => {\n  if (!username) {\n    return 'usernameRequire';\n  }\n\n  return '';\n};\n\nconst validatePassword = (password: string) => {\n  if (!password) {\n    return 'passwordRequire';\n  }\n\n  if (password.length < 4) {\n    return 'minPasswordInvalid';\n  }\n\n  return '';\n};\n\nconst validateFactory = (factory: number) => {\n  if (!factory) {\n    return 'factoryRequire';\n  }\n  return '';\n};\n\nconst validateRepeatPassword = (password: string, repeatPassword: string) => {\n  if (!repeatPassword) {\n    return 'passwordRequire';\n  }\n\n  if (password.length < 8 && password.length > 16) {\n    return 'minPasswordInvalid';\n  }\n\n  if (password !== repeatPassword) {\n    return 'matchPasswordInvalid';\n  }\n\n  return '';\n};\n\nconst validateField = (field: string, value: string) => {\n  if (value) return '';\n  let fieldRequire = '';\n  switch (field) {\n    case 'name':\n      fieldRequire = 'nameRequire';\n      break;\n\n    case 'gender':\n      fieldRequire = 'genderRequire';\n      break;\n\n    case 'region':\n      fieldRequire = 'regionRequire';\n      break;\n\n    case 'state':\n      fieldRequire = 'stateRequire';\n      break;\n  }\n\n  return fieldRequire;\n};\n\nconst validateFieldAddEmployee = (field: string, value?: string) => {\n  if (value) return '';\n  let fieldRequire = '';\n  switch (field) {\n    case 'name':\n      fieldRequire = 'nameRequire';\n      break;\n    case 'gender':\n      fieldRequire = 'genderRequire';\n      break;\n    case 'ktp':\n      fieldRequire = 'ktpRequire';\n      break;\n    case 'ncId':\n      fieldRequire = 'ncIdRequire';\n      break;\n    case 'type':\n      fieldRequire = 'type';\n      break;\n  }\n  return fieldRequire;\n};\n\nconst validateName = (name: string) => {\n  if (!name) {\n    return 'nameRequire';\n  }\n  if (name.length > 50) {\n    return 'maxNameValid';\n  }\n  return '';\n};\n\nexport const validateFieldName = (name: any) => {\n  return {\n    name: validName(name.name),\n  };\n};\n\nexport const validName = (name: string) => {\n  return !name;\n};\n\nexport const validateLogin = (values: ILoginParams): ILoginValidation => {\n  return {\n    username: validateEmail(values.username),\n    password: validatePassword(values.password),\n    factory: validateFactory(Number(values.company_id)),\n  };\n};\n\nexport const validLogin = (values: ILoginValidation) => {\n  return !values.username && !values.password;\n};\n\nexport const validateSignUp = (values: ISignUpParams): ISignUpValidation => {\n  return {\n    email: validateEmail(values.email),\n    password: validatePassword(values.password),\n    repeatPassword: validateRepeatPassword(values.password, values.repeatPassword),\n    name: validateField('name', values.name),\n    gender: validateField('gender', values.gender),\n    region: validateField('region', values.region),\n    state: validateField('state', values.state),\n  };\n};\n\nexport const validSignUp = (values: ISignUpValidation) => {\n  return (\n    !values.email &&\n    !values.password &&\n    !values.repeatPassword &&\n    !values.name &&\n    !values.gender &&\n    !values.region &&\n    !values.state\n  );\n};\n\nexport const validateAddEmployee = (values: EmployeeParams): EmployeeValidate => {\n  return {\n    name: validateFieldAddEmployee('name', values.name),\n    gender: validateFieldAddEmployee('gender', values.gender),\n    ktp: validateFieldAddEmployee('ktp', values.ktp),\n    ncId: validateFieldAddEmployee('ncId', values.ncId),\n    type: validateFieldAddEmployee('type', values.type),\n  };\n};\n\nexport const validAddEmployee = (values: EmployeeValidate) => {\n  return !values.gender && !values.ktp && !values.name && !values.ncId && !values.type;\n};\n"]},"metadata":{},"sourceType":"module"}