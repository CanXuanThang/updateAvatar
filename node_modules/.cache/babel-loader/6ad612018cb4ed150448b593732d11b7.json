{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"logicOperators\", \"columnsSort\", \"filterFormProps\", \"getColumnForNewFilter\", \"children\", \"disableAddFilterButton\", \"disableRemoveAllButton\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GridLogicOperator } from '../../../models/gridFilterItem';\nimport { useGridApiContext } from '../../../hooks/utils/useGridApiContext';\nimport { GridPanelContent } from '../GridPanelContent';\nimport { GridPanelFooter } from '../GridPanelFooter';\nimport { GridPanelWrapper } from '../GridPanelWrapper';\nimport { GridFilterForm } from './GridFilterForm';\nimport { useGridRootProps } from '../../../hooks/utils/useGridRootProps';\nimport { useGridSelector } from '../../../hooks/utils/useGridSelector';\nimport { gridFilterModelSelector } from '../../../hooks/features/filter/gridFilterSelector';\nimport { gridFilterableColumnDefinitionsSelector } from '../../../hooks/features/columns/gridColumnsSelector';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst getGridFilter = col => ({\n  field: col.field,\n  operator: col.filterOperators[0].value,\n  id: Math.round(Math.random() * 1e5)\n});\n\nconst GridFilterPanel = /*#__PURE__*/React.forwardRef(function GridFilterPanel(props, ref) {\n  var _rootProps$slotProps, _rootProps$slotProps2;\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const filterModel = useGridSelector(apiRef, gridFilterModelSelector);\n  const filterableColumns = useGridSelector(apiRef, gridFilterableColumnDefinitionsSelector);\n  const lastFilterRef = React.useRef(null);\n  const placeholderFilter = React.useRef(null);\n\n  const {\n    logicOperators = [GridLogicOperator.And, GridLogicOperator.Or],\n    columnsSort,\n    filterFormProps,\n    getColumnForNewFilter,\n    disableAddFilterButton = false,\n    disableRemoveAllButton = false\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const applyFilter = React.useCallback(item => {\n    apiRef.current.upsertFilterItem(item);\n  }, [apiRef]);\n  const applyFilterLogicOperator = React.useCallback(operator => {\n    apiRef.current.setFilterLogicOperator(operator);\n  }, [apiRef]);\n  const getDefaultFilter = React.useCallback(() => {\n    let nextColumnWithOperator;\n\n    if (getColumnForNewFilter && typeof getColumnForNewFilter === 'function') {\n      // To allow override the column for default (first) filter\n      const nextFieldName = getColumnForNewFilter({\n        currentFilters: (filterModel == null ? void 0 : filterModel.items) || [],\n        columns: filterableColumns\n      });\n\n      if (nextFieldName === null) {\n        return null;\n      }\n\n      nextColumnWithOperator = filterableColumns.find(({\n        field\n      }) => field === nextFieldName);\n    } else {\n      nextColumnWithOperator = filterableColumns.find(colDef => {\n        var _colDef$filterOperato;\n\n        return (_colDef$filterOperato = colDef.filterOperators) == null ? void 0 : _colDef$filterOperato.length;\n      });\n    }\n\n    if (!nextColumnWithOperator) {\n      return null;\n    }\n\n    return getGridFilter(nextColumnWithOperator);\n  }, [filterModel == null ? void 0 : filterModel.items, filterableColumns, getColumnForNewFilter]);\n  const getNewFilter = React.useCallback(() => {\n    if (getColumnForNewFilter === undefined || typeof getColumnForNewFilter !== 'function') {\n      return getDefaultFilter();\n    }\n\n    const currentFilters = filterModel.items.length ? filterModel.items : [getDefaultFilter()].filter(Boolean); // If no items are there in filterModel, we have to pass defaultFilter\n\n    const nextColumnFieldName = getColumnForNewFilter({\n      currentFilters: currentFilters,\n      columns: filterableColumns\n    });\n\n    if (nextColumnFieldName === null) {\n      return null;\n    }\n\n    const nextColumnWithOperator = filterableColumns.find(({\n      field\n    }) => field === nextColumnFieldName);\n\n    if (!nextColumnWithOperator) {\n      return null;\n    }\n\n    return getGridFilter(nextColumnWithOperator);\n  }, [filterModel.items, filterableColumns, getColumnForNewFilter, getDefaultFilter]);\n  const items = React.useMemo(() => {\n    if (filterModel.items.length) {\n      return filterModel.items;\n    }\n\n    if (!placeholderFilter.current) {\n      placeholderFilter.current = getDefaultFilter();\n    }\n\n    return placeholderFilter.current ? [placeholderFilter.current] : [];\n  }, [filterModel.items, getDefaultFilter]);\n  const hasMultipleFilters = items.length > 1;\n\n  const addNewFilter = () => {\n    const newFilter = getNewFilter();\n\n    if (!newFilter) {\n      return;\n    }\n\n    apiRef.current.upsertFilterItems([...items, newFilter]);\n  };\n\n  const deleteFilter = React.useCallback(item => {\n    const shouldCloseFilterPanel = items.length === 1;\n    apiRef.current.deleteFilterItem(item);\n\n    if (shouldCloseFilterPanel) {\n      apiRef.current.hideFilterPanel();\n    }\n  }, [apiRef, items.length]);\n\n  const handleRemoveAll = () => {\n    if (items.length === 1 && items[0].value === undefined) {\n      apiRef.current.deleteFilterItem(items[0]);\n      apiRef.current.hideFilterPanel();\n    }\n\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items: []\n    }));\n  };\n\n  React.useEffect(() => {\n    if (logicOperators.length > 0 && filterModel.logicOperator && !logicOperators.includes(filterModel.logicOperator)) {\n      applyFilterLogicOperator(logicOperators[0]);\n    }\n  }, [logicOperators, applyFilterLogicOperator, filterModel.logicOperator]);\n  React.useEffect(() => {\n    if (items.length > 0) {\n      lastFilterRef.current.focus();\n    }\n  }, [items.length]);\n  return /*#__PURE__*/_jsxs(GridPanelWrapper, _extends({\n    ref: ref\n  }, other, {\n    children: [/*#__PURE__*/_jsx(GridPanelContent, {\n      children: items.map((item, index) => /*#__PURE__*/_jsx(GridFilterForm, _extends({\n        item: item,\n        applyFilterChanges: applyFilter,\n        deleteFilter: deleteFilter,\n        hasMultipleFilters: hasMultipleFilters,\n        showMultiFilterOperators: index > 0,\n        multiFilterOperator: filterModel.logicOperator,\n        disableMultiFilterOperator: index !== 1,\n        applyMultiFilterOperatorChanges: applyFilterLogicOperator,\n        focusElementRef: index === items.length - 1 ? lastFilterRef : null,\n        logicOperators: logicOperators,\n        columnsSort: columnsSort\n      }, filterFormProps), item.id == null ? index : item.id))\n    }), !rootProps.disableMultipleColumnsFiltering && !(disableAddFilterButton && disableRemoveAllButton) ? /*#__PURE__*/_jsxs(GridPanelFooter, {\n      children: [!disableAddFilterButton ? /*#__PURE__*/_jsx(rootProps.slots.baseButton, _extends({\n        onClick: addNewFilter,\n        startIcon: /*#__PURE__*/_jsx(rootProps.slots.filterPanelAddIcon, {})\n      }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseButton, {\n        children: apiRef.current.getLocaleText('filterPanelAddFilter')\n      })) : /*#__PURE__*/_jsx(\"span\", {}), !disableRemoveAllButton ? /*#__PURE__*/_jsx(rootProps.slots.baseButton, _extends({\n        onClick: handleRemoveAll,\n        startIcon: /*#__PURE__*/_jsx(rootProps.slots.filterPanelRemoveAllIcon, {})\n      }, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.baseButton, {\n        children: apiRef.current.getLocaleText('filterPanelRemoveAll')\n      })) : null]\n    }) : null]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridFilterPanel.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore - do not document.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Changes how the options in the columns selector should be ordered.\n   * If not specified, the order is derived from the `columns` prop.\n   */\n  columnsSort: PropTypes.oneOf(['asc', 'desc']),\n  disableAddFilterButton: PropTypes.bool,\n  disableRemoveAllButton: PropTypes.bool,\n\n  /**\n   * Props passed to each filter form.\n   */\n  filterFormProps: PropTypes.shape({\n    columnInputProps: PropTypes.any,\n    columnsSort: PropTypes.oneOf(['asc', 'desc']),\n    deleteIconProps: PropTypes.any,\n    filterColumns: PropTypes.func,\n    logicOperatorInputProps: PropTypes.any,\n    operatorInputProps: PropTypes.any,\n    valueInputProps: PropTypes.any\n  }),\n\n  /**\n   * Function that returns the next filter item to be picked as default filter.\n   * @param {GetColumnForNewFilterArgs} args Currently configured filters and columns.\n   * @returns {GridColDef['field']} The field to be used for the next filter or `null` to prevent adding a filter.\n   */\n  getColumnForNewFilter: PropTypes.func,\n\n  /**\n   * Sets the available logic operators.\n   * @default [GridLogicOperator.And, GridLogicOperator.Or]\n   */\n  logicOperators: PropTypes.arrayOf(PropTypes.oneOf(['and', 'or']).isRequired),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport { GridFilterPanel };","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterPanel.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","GridLogicOperator","useGridApiContext","GridPanelContent","GridPanelFooter","GridPanelWrapper","GridFilterForm","useGridRootProps","useGridSelector","gridFilterModelSelector","gridFilterableColumnDefinitionsSelector","jsx","_jsx","jsxs","_jsxs","getGridFilter","col","field","operator","filterOperators","value","id","Math","round","random","GridFilterPanel","forwardRef","props","ref","_rootProps$slotProps","_rootProps$slotProps2","apiRef","rootProps","filterModel","filterableColumns","lastFilterRef","useRef","placeholderFilter","logicOperators","And","Or","columnsSort","filterFormProps","getColumnForNewFilter","disableAddFilterButton","disableRemoveAllButton","other","applyFilter","useCallback","item","current","upsertFilterItem","applyFilterLogicOperator","setFilterLogicOperator","getDefaultFilter","nextColumnWithOperator","nextFieldName","currentFilters","items","columns","find","colDef","_colDef$filterOperato","length","getNewFilter","undefined","filter","Boolean","nextColumnFieldName","useMemo","hasMultipleFilters","addNewFilter","newFilter","upsertFilterItems","deleteFilter","shouldCloseFilterPanel","deleteFilterItem","hideFilterPanel","handleRemoveAll","setFilterModel","useEffect","logicOperator","includes","focus","children","map","index","applyFilterChanges","showMultiFilterOperators","multiFilterOperator","disableMultiFilterOperator","applyMultiFilterOperatorChanges","focusElementRef","disableMultipleColumnsFiltering","slots","baseButton","onClick","startIcon","filterPanelAddIcon","slotProps","getLocaleText","filterPanelRemoveAllIcon","process","env","NODE_ENV","propTypes","node","oneOf","bool","shape","columnInputProps","any","deleteIconProps","filterColumns","func","logicOperatorInputProps","operatorInputProps","valueInputProps","arrayOf","isRequired","sx","oneOfType","object"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"logicOperators\", \"columnsSort\", \"filterFormProps\", \"getColumnForNewFilter\", \"children\", \"disableAddFilterButton\", \"disableRemoveAllButton\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GridLogicOperator } from '../../../models/gridFilterItem';\nimport { useGridApiContext } from '../../../hooks/utils/useGridApiContext';\nimport { GridPanelContent } from '../GridPanelContent';\nimport { GridPanelFooter } from '../GridPanelFooter';\nimport { GridPanelWrapper } from '../GridPanelWrapper';\nimport { GridFilterForm } from './GridFilterForm';\nimport { useGridRootProps } from '../../../hooks/utils/useGridRootProps';\nimport { useGridSelector } from '../../../hooks/utils/useGridSelector';\nimport { gridFilterModelSelector } from '../../../hooks/features/filter/gridFilterSelector';\nimport { gridFilterableColumnDefinitionsSelector } from '../../../hooks/features/columns/gridColumnsSelector';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst getGridFilter = col => ({\n  field: col.field,\n  operator: col.filterOperators[0].value,\n  id: Math.round(Math.random() * 1e5)\n});\nconst GridFilterPanel = /*#__PURE__*/React.forwardRef(function GridFilterPanel(props, ref) {\n  var _rootProps$slotProps, _rootProps$slotProps2;\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const filterModel = useGridSelector(apiRef, gridFilterModelSelector);\n  const filterableColumns = useGridSelector(apiRef, gridFilterableColumnDefinitionsSelector);\n  const lastFilterRef = React.useRef(null);\n  const placeholderFilter = React.useRef(null);\n  const {\n      logicOperators = [GridLogicOperator.And, GridLogicOperator.Or],\n      columnsSort,\n      filterFormProps,\n      getColumnForNewFilter,\n      disableAddFilterButton = false,\n      disableRemoveAllButton = false\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const applyFilter = React.useCallback(item => {\n    apiRef.current.upsertFilterItem(item);\n  }, [apiRef]);\n  const applyFilterLogicOperator = React.useCallback(operator => {\n    apiRef.current.setFilterLogicOperator(operator);\n  }, [apiRef]);\n  const getDefaultFilter = React.useCallback(() => {\n    let nextColumnWithOperator;\n    if (getColumnForNewFilter && typeof getColumnForNewFilter === 'function') {\n      // To allow override the column for default (first) filter\n      const nextFieldName = getColumnForNewFilter({\n        currentFilters: (filterModel == null ? void 0 : filterModel.items) || [],\n        columns: filterableColumns\n      });\n      if (nextFieldName === null) {\n        return null;\n      }\n      nextColumnWithOperator = filterableColumns.find(({\n        field\n      }) => field === nextFieldName);\n    } else {\n      nextColumnWithOperator = filterableColumns.find(colDef => {\n        var _colDef$filterOperato;\n        return (_colDef$filterOperato = colDef.filterOperators) == null ? void 0 : _colDef$filterOperato.length;\n      });\n    }\n    if (!nextColumnWithOperator) {\n      return null;\n    }\n    return getGridFilter(nextColumnWithOperator);\n  }, [filterModel == null ? void 0 : filterModel.items, filterableColumns, getColumnForNewFilter]);\n  const getNewFilter = React.useCallback(() => {\n    if (getColumnForNewFilter === undefined || typeof getColumnForNewFilter !== 'function') {\n      return getDefaultFilter();\n    }\n    const currentFilters = filterModel.items.length ? filterModel.items : [getDefaultFilter()].filter(Boolean);\n\n    // If no items are there in filterModel, we have to pass defaultFilter\n    const nextColumnFieldName = getColumnForNewFilter({\n      currentFilters: currentFilters,\n      columns: filterableColumns\n    });\n    if (nextColumnFieldName === null) {\n      return null;\n    }\n    const nextColumnWithOperator = filterableColumns.find(({\n      field\n    }) => field === nextColumnFieldName);\n    if (!nextColumnWithOperator) {\n      return null;\n    }\n    return getGridFilter(nextColumnWithOperator);\n  }, [filterModel.items, filterableColumns, getColumnForNewFilter, getDefaultFilter]);\n  const items = React.useMemo(() => {\n    if (filterModel.items.length) {\n      return filterModel.items;\n    }\n    if (!placeholderFilter.current) {\n      placeholderFilter.current = getDefaultFilter();\n    }\n    return placeholderFilter.current ? [placeholderFilter.current] : [];\n  }, [filterModel.items, getDefaultFilter]);\n  const hasMultipleFilters = items.length > 1;\n  const addNewFilter = () => {\n    const newFilter = getNewFilter();\n    if (!newFilter) {\n      return;\n    }\n    apiRef.current.upsertFilterItems([...items, newFilter]);\n  };\n  const deleteFilter = React.useCallback(item => {\n    const shouldCloseFilterPanel = items.length === 1;\n    apiRef.current.deleteFilterItem(item);\n    if (shouldCloseFilterPanel) {\n      apiRef.current.hideFilterPanel();\n    }\n  }, [apiRef, items.length]);\n  const handleRemoveAll = () => {\n    if (items.length === 1 && items[0].value === undefined) {\n      apiRef.current.deleteFilterItem(items[0]);\n      apiRef.current.hideFilterPanel();\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items: []\n    }));\n  };\n  React.useEffect(() => {\n    if (logicOperators.length > 0 && filterModel.logicOperator && !logicOperators.includes(filterModel.logicOperator)) {\n      applyFilterLogicOperator(logicOperators[0]);\n    }\n  }, [logicOperators, applyFilterLogicOperator, filterModel.logicOperator]);\n  React.useEffect(() => {\n    if (items.length > 0) {\n      lastFilterRef.current.focus();\n    }\n  }, [items.length]);\n  return /*#__PURE__*/_jsxs(GridPanelWrapper, _extends({\n    ref: ref\n  }, other, {\n    children: [/*#__PURE__*/_jsx(GridPanelContent, {\n      children: items.map((item, index) => /*#__PURE__*/_jsx(GridFilterForm, _extends({\n        item: item,\n        applyFilterChanges: applyFilter,\n        deleteFilter: deleteFilter,\n        hasMultipleFilters: hasMultipleFilters,\n        showMultiFilterOperators: index > 0,\n        multiFilterOperator: filterModel.logicOperator,\n        disableMultiFilterOperator: index !== 1,\n        applyMultiFilterOperatorChanges: applyFilterLogicOperator,\n        focusElementRef: index === items.length - 1 ? lastFilterRef : null,\n        logicOperators: logicOperators,\n        columnsSort: columnsSort\n      }, filterFormProps), item.id == null ? index : item.id))\n    }), !rootProps.disableMultipleColumnsFiltering && !(disableAddFilterButton && disableRemoveAllButton) ? /*#__PURE__*/_jsxs(GridPanelFooter, {\n      children: [!disableAddFilterButton ? /*#__PURE__*/_jsx(rootProps.slots.baseButton, _extends({\n        onClick: addNewFilter,\n        startIcon: /*#__PURE__*/_jsx(rootProps.slots.filterPanelAddIcon, {})\n      }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseButton, {\n        children: apiRef.current.getLocaleText('filterPanelAddFilter')\n      })) : /*#__PURE__*/_jsx(\"span\", {}), !disableRemoveAllButton ? /*#__PURE__*/_jsx(rootProps.slots.baseButton, _extends({\n        onClick: handleRemoveAll,\n        startIcon: /*#__PURE__*/_jsx(rootProps.slots.filterPanelRemoveAllIcon, {})\n      }, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.baseButton, {\n        children: apiRef.current.getLocaleText('filterPanelRemoveAll')\n      })) : null]\n    }) : null]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridFilterPanel.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore - do not document.\n   */\n  children: PropTypes.node,\n  /**\n   * Changes how the options in the columns selector should be ordered.\n   * If not specified, the order is derived from the `columns` prop.\n   */\n  columnsSort: PropTypes.oneOf(['asc', 'desc']),\n  disableAddFilterButton: PropTypes.bool,\n  disableRemoveAllButton: PropTypes.bool,\n  /**\n   * Props passed to each filter form.\n   */\n  filterFormProps: PropTypes.shape({\n    columnInputProps: PropTypes.any,\n    columnsSort: PropTypes.oneOf(['asc', 'desc']),\n    deleteIconProps: PropTypes.any,\n    filterColumns: PropTypes.func,\n    logicOperatorInputProps: PropTypes.any,\n    operatorInputProps: PropTypes.any,\n    valueInputProps: PropTypes.any\n  }),\n  /**\n   * Function that returns the next filter item to be picked as default filter.\n   * @param {GetColumnForNewFilterArgs} args Currently configured filters and columns.\n   * @returns {GridColDef['field']} The field to be used for the next filter or `null` to prevent adding a filter.\n   */\n  getColumnForNewFilter: PropTypes.func,\n  /**\n   * Sets the available logic operators.\n   * @default [GridLogicOperator.And, GridLogicOperator.Or]\n   */\n  logicOperators: PropTypes.arrayOf(PropTypes.oneOf(['and', 'or']).isRequired),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport { GridFilterPanel };"]},"metadata":{},"sourceType":"module"}