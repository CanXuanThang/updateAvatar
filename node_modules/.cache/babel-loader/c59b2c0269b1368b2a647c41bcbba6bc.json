{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridDensitySelector } from './densitySelector';\nimport { isDeepEqual } from '../../../utils/utils';\nexport const COMPACT_DENSITY_FACTOR = 0.7;\nexport const COMFORTABLE_DENSITY_FACTOR = 1.3;\nconst DENSITY_FACTORS = {\n  compact: COMPACT_DENSITY_FACTOR,\n  comfortable: COMFORTABLE_DENSITY_FACTOR,\n  standard: 1\n};\nexport const densityStateInitializer = (state, props) => _extends({}, state, {\n  density: {\n    value: props.density,\n    factor: DENSITY_FACTORS[props.density]\n  }\n});\nexport const useGridDensity = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useDensity');\n  const setDensity = React.useCallback(newDensity => {\n    logger.debug(`Set grid density to ${newDensity}`);\n    apiRef.current.setState(state => {\n      const currentDensityState = gridDensitySelector(state);\n      const newDensityState = {\n        value: newDensity,\n        factor: DENSITY_FACTORS[newDensity]\n      };\n\n      if (isDeepEqual(currentDensityState, newDensityState)) {\n        return state;\n      }\n\n      return _extends({}, state, {\n        density: newDensityState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [logger, apiRef]);\n  React.useEffect(() => {\n    apiRef.current.setDensity(props.density);\n  }, [apiRef, props.density]);\n  const densityApi = {\n    setDensity\n  };\n  useGridApiMethod(apiRef, densityApi, 'public');\n};","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/node_modules/@mui/x-data-grid/hooks/features/density/useGridDensity.js"],"names":["_extends","React","useGridLogger","useGridApiMethod","gridDensitySelector","isDeepEqual","COMPACT_DENSITY_FACTOR","COMFORTABLE_DENSITY_FACTOR","DENSITY_FACTORS","compact","comfortable","standard","densityStateInitializer","state","props","density","value","factor","useGridDensity","apiRef","logger","setDensity","useCallback","newDensity","debug","current","setState","currentDensityState","newDensityState","forceUpdate","useEffect","densityApi"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,mBAAT,QAAoC,mBAApC;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,OAAO,MAAMC,sBAAsB,GAAG,GAA/B;AACP,OAAO,MAAMC,0BAA0B,GAAG,GAAnC;AACP,MAAMC,eAAe,GAAG;AACtBC,EAAAA,OAAO,EAAEH,sBADa;AAEtBI,EAAAA,WAAW,EAAEH,0BAFS;AAGtBI,EAAAA,QAAQ,EAAE;AAHY,CAAxB;AAKA,OAAO,MAAMC,uBAAuB,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkBd,QAAQ,CAAC,EAAD,EAAKa,KAAL,EAAY;AAC3EE,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,EAAEF,KAAK,CAACC,OADN;AAEPE,IAAAA,MAAM,EAAET,eAAe,CAACM,KAAK,CAACC,OAAP;AAFhB;AADkE,CAAZ,CAA1D;AAMP,OAAO,MAAMG,cAAc,GAAG,CAACC,MAAD,EAASL,KAAT,KAAmB;AAC/C,QAAMM,MAAM,GAAGlB,aAAa,CAACiB,MAAD,EAAS,YAAT,CAA5B;AACA,QAAME,UAAU,GAAGpB,KAAK,CAACqB,WAAN,CAAkBC,UAAU,IAAI;AACjDH,IAAAA,MAAM,CAACI,KAAP,CAAc,uBAAsBD,UAAW,EAA/C;AACAJ,IAAAA,MAAM,CAACM,OAAP,CAAeC,QAAf,CAAwBb,KAAK,IAAI;AAC/B,YAAMc,mBAAmB,GAAGvB,mBAAmB,CAACS,KAAD,CAA/C;AACA,YAAMe,eAAe,GAAG;AACtBZ,QAAAA,KAAK,EAAEO,UADe;AAEtBN,QAAAA,MAAM,EAAET,eAAe,CAACe,UAAD;AAFD,OAAxB;;AAIA,UAAIlB,WAAW,CAACsB,mBAAD,EAAsBC,eAAtB,CAAf,EAAuD;AACrD,eAAOf,KAAP;AACD;;AACD,aAAOb,QAAQ,CAAC,EAAD,EAAKa,KAAL,EAAY;AACzBE,QAAAA,OAAO,EAAEa;AADgB,OAAZ,CAAf;AAGD,KAZD;AAaAT,IAAAA,MAAM,CAACM,OAAP,CAAeI,WAAf;AACD,GAhBkB,EAgBhB,CAACT,MAAD,EAASD,MAAT,CAhBgB,CAAnB;AAiBAlB,EAAAA,KAAK,CAAC6B,SAAN,CAAgB,MAAM;AACpBX,IAAAA,MAAM,CAACM,OAAP,CAAeJ,UAAf,CAA0BP,KAAK,CAACC,OAAhC;AACD,GAFD,EAEG,CAACI,MAAD,EAASL,KAAK,CAACC,OAAf,CAFH;AAGA,QAAMgB,UAAU,GAAG;AACjBV,IAAAA;AADiB,GAAnB;AAGAlB,EAAAA,gBAAgB,CAACgB,MAAD,EAASY,UAAT,EAAqB,QAArB,CAAhB;AACD,CA1BM","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridDensitySelector } from './densitySelector';\nimport { isDeepEqual } from '../../../utils/utils';\nexport const COMPACT_DENSITY_FACTOR = 0.7;\nexport const COMFORTABLE_DENSITY_FACTOR = 1.3;\nconst DENSITY_FACTORS = {\n  compact: COMPACT_DENSITY_FACTOR,\n  comfortable: COMFORTABLE_DENSITY_FACTOR,\n  standard: 1\n};\nexport const densityStateInitializer = (state, props) => _extends({}, state, {\n  density: {\n    value: props.density,\n    factor: DENSITY_FACTORS[props.density]\n  }\n});\nexport const useGridDensity = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useDensity');\n  const setDensity = React.useCallback(newDensity => {\n    logger.debug(`Set grid density to ${newDensity}`);\n    apiRef.current.setState(state => {\n      const currentDensityState = gridDensitySelector(state);\n      const newDensityState = {\n        value: newDensity,\n        factor: DENSITY_FACTORS[newDensity]\n      };\n      if (isDeepEqual(currentDensityState, newDensityState)) {\n        return state;\n      }\n      return _extends({}, state, {\n        density: newDensityState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [logger, apiRef]);\n  React.useEffect(() => {\n    apiRef.current.setDensity(props.density);\n  }, [apiRef, props.density]);\n  const densityApi = {\n    setDensity\n  };\n  useGridApiMethod(apiRef, densityApi, 'public');\n};"]},"metadata":{},"sourceType":"module"}