{"ast":null,"code":"const validateEmail = username => {\n  if (!username) {\n    return 'usernameRequire';\n  }\n\n  return '';\n};\n\nconst validatePassword = password => {\n  if (!password) {\n    return 'passwordRequire';\n  }\n\n  if (password.length < 4) {\n    return 'minPasswordInvalid';\n  }\n\n  return '';\n};\n\nconst validateFactory = factory => {\n  if (!factory) {\n    return 'factoryRequire';\n  }\n\n  return '';\n};\n\nconst validateRepeatPassword = (password, repeatPassword) => {\n  if (!repeatPassword) {\n    return 'passwordRequire';\n  }\n\n  if (password.length < 8 && password.length > 16) {\n    return 'minPasswordInvalid';\n  }\n\n  if (password !== repeatPassword) {\n    return 'matchPasswordInvalid';\n  }\n\n  return '';\n};\n\nconst validateField = (field, value) => {\n  if (value) return '';\n  let fieldRequire = '';\n\n  switch (field) {\n    case 'name':\n      fieldRequire = 'nameRequire';\n      break;\n\n    case 'gender':\n      fieldRequire = 'genderRequire';\n      break;\n\n    case 'region':\n      fieldRequire = 'regionRequire';\n      break;\n\n    case 'state':\n      fieldRequire = 'stateRequire';\n      break;\n  }\n\n  return fieldRequire;\n};\n\nexport const validateLogin = values => {\n  return {\n    username: validateEmail(values.username),\n    password: validatePassword(values.password),\n    factory: validateFactory(Number(values.company_id))\n  };\n};\nexport const validLogin = values => {\n  return !values.username && !values.password;\n};\nexport const validateSignUp = values => {\n  return {\n    email: validateEmail(values.email),\n    password: validatePassword(values.password),\n    repeatPassword: validateRepeatPassword(values.password, values.repeatPassword),\n    name: validateField('name', values.name),\n    gender: validateField('gender', values.gender),\n    region: validateField('region', values.region),\n    state: validateField('state', values.state)\n  };\n};\nexport const validSignUp = values => {\n  return !values.email && !values.password && !values.repeatPassword && !values.name && !values.gender && !values.region && !values.state;\n};\n\nconst validateFieldAddEmployee = (field, value) => {\n  if (value) return '';\n  let fieldRequire = '';\n\n  switch (field) {\n    case 'gender':\n      fieldRequire = 'genderRequire';\n      break;\n\n    case 'ktp':\n      fieldRequire = 'ktpRequire';\n      break;\n\n    case 'ncId':\n      fieldRequire = 'ncIdRequire';\n      break;\n\n    case 'type':\n      fieldRequire = 'type';\n      break;\n  }\n\n  return fieldRequire;\n};\n\nconst validateName = name => {\n  if (!name) {\n    return 'nameRequire';\n  }\n\n  if (name.length > 50) {\n    return 'maxximumValid';\n  }\n\n  return '';\n};\n\nconst validateGender = gender => {\n  if (gender === '') {\n    return 'genderRequire';\n  }\n};\n\nconst validateKtp = ktp => {\n  if (!ktp) {\n    return 'ktpRequire';\n  }\n\n  if (ktp.length > 50) {\n    return 'maxximumValid';\n  }\n\n  return '';\n};\n\nconst validateNcId = ncId => {\n  if (!ncId) {\n    return 'ncIdRequire';\n  }\n\n  if (ncId.length > 50) {\n    return 'maxximumValid';\n  }\n\n  return '';\n};\n\nconst validateFieldMother = motherName => {\n  if (motherName && motherName.length > 50) {\n    return 'maxximumValid';\n  }\n\n  return '';\n};\n\nexport const validateAddEmployee = values => {\n  return {\n    name: validateName(values.name),\n    gender: validateGender(values.gender),\n    motherName: validateFieldMother(values.motherName),\n    ktp: validateKtp(values.ktp),\n    ncId: validateNcId(values.ncId),\n    type: validateFieldAddEmployee('type', values.type)\n  };\n};\nexport const validAddEmployee = values => {\n  return !values.gender && !values.ktp && !values.name && !values.ncId && !values.type;\n};","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/src/modules/auth/utils.ts"],"names":["validateEmail","username","validatePassword","password","length","validateFactory","factory","validateRepeatPassword","repeatPassword","validateField","field","value","fieldRequire","validateLogin","values","Number","company_id","validLogin","validateSignUp","email","name","gender","region","state","validSignUp","validateFieldAddEmployee","validateName","validateGender","validateKtp","ktp","validateNcId","ncId","validateFieldMother","motherName","validateAddEmployee","type","validAddEmployee"],"mappings":"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","sourcesContent":["import { ILoginParams, ILoginValidation } from '../../models/auth';\nimport { EmployeeParams, EmployeeValidate } from '../../models/employee';\nimport { ISignUpParams, ISignUpValidation } from '../../models/singup';\n\nconst validateEmail = (username: string) => {\n  if (!username) {\n    return 'usernameRequire';\n  }\n\n  return '';\n};\n\nconst validatePassword = (password: string) => {\n  if (!password) {\n    return 'passwordRequire';\n  }\n\n  if (password.length < 4) {\n    return 'minPasswordInvalid';\n  }\n\n  return '';\n};\n\nconst validateFactory = (factory: number) => {\n  if (!factory) {\n    return 'factoryRequire';\n  }\n  return '';\n};\n\nconst validateRepeatPassword = (password: string, repeatPassword: string) => {\n  if (!repeatPassword) {\n    return 'passwordRequire';\n  }\n\n  if (password.length < 8 && password.length > 16) {\n    return 'minPasswordInvalid';\n  }\n\n  if (password !== repeatPassword) {\n    return 'matchPasswordInvalid';\n  }\n\n  return '';\n};\n\nconst validateField = (field: string, value: string) => {\n  if (value) return '';\n  let fieldRequire = '';\n  switch (field) {\n    case 'name':\n      fieldRequire = 'nameRequire';\n      break;\n\n    case 'gender':\n      fieldRequire = 'genderRequire';\n      break;\n\n    case 'region':\n      fieldRequire = 'regionRequire';\n      break;\n\n    case 'state':\n      fieldRequire = 'stateRequire';\n      break;\n  }\n\n  return fieldRequire;\n};\n\nexport const validateLogin = (values: ILoginParams): ILoginValidation => {\n  return {\n    username: validateEmail(values.username),\n    password: validatePassword(values.password),\n    factory: validateFactory(Number(values.company_id)),\n  };\n};\n\nexport const validLogin = (values: ILoginValidation) => {\n  return !values.username && !values.password;\n};\n\nexport const validateSignUp = (values: ISignUpParams): ISignUpValidation => {\n  return {\n    email: validateEmail(values.email),\n    password: validatePassword(values.password),\n    repeatPassword: validateRepeatPassword(values.password, values.repeatPassword),\n    name: validateField('name', values.name),\n    gender: validateField('gender', values.gender),\n    region: validateField('region', values.region),\n    state: validateField('state', values.state),\n  };\n};\n\nexport const validSignUp = (values: ISignUpValidation) => {\n  return (\n    !values.email &&\n    !values.password &&\n    !values.repeatPassword &&\n    !values.name &&\n    !values.gender &&\n    !values.region &&\n    !values.state\n  );\n};\n\nconst validateFieldAddEmployee = (field: string, value?: string) => {\n  if (value) return '';\n  let fieldRequire = '';\n  switch (field) {\n    case 'gender':\n      fieldRequire = 'genderRequire';\n      break;\n    case 'ktp':\n      fieldRequire = 'ktpRequire';\n      break;\n    case 'ncId':\n      fieldRequire = 'ncIdRequire';\n      break;\n    case 'type':\n      fieldRequire = 'type';\n      break;\n  }\n  return fieldRequire;\n};\n\nconst validateName = (name: string) => {\n  if (!name) {\n    return 'nameRequire';\n  }\n  if (name.length > 50) {\n    return 'maxximumValid';\n  }\n  return '';\n};\n\nconst validateGender = (gender: any) => {\n  if (gender === '') {\n    return 'genderRequire';\n  }\n};\n\nconst validateKtp = (ktp: string) => {\n  if (!ktp) {\n    return 'ktpRequire';\n  }\n  if (ktp.length > 50) {\n    return 'maxximumValid';\n  }\n  return '';\n};\n\nconst validateNcId = (ncId: string) => {\n  if (!ncId) {\n    return 'ncIdRequire';\n  }\n  if (ncId.length > 50) {\n    return 'maxximumValid';\n  }\n  return '';\n};\n\nconst validateFieldMother = (motherName: string) => {\n  if (motherName && motherName.length > 50) {\n    return 'maxximumValid';\n  }\n  return '';\n};\n\nexport const validateAddEmployee = (values: EmployeeParams): EmployeeValidate => {\n  return {\n    name: validateName(values.name),\n    gender: validateGender(values.gender),\n    motherName: validateFieldMother(values.motherName),\n    ktp: validateKtp(values.ktp),\n    ncId: validateNcId(values.ncId),\n    type: validateFieldAddEmployee('type', values.type),\n  };\n};\n\nexport const validAddEmployee = (values: EmployeeValidate) => {\n  return !values.gender && !values.ktp && !values.name && !values.ncId && !values.type;\n};\n"]},"metadata":{},"sourceType":"module"}