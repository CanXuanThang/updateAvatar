{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"field\", \"colDef\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '@mui/utils';\nimport { useGridSelector } from '../../hooks/utils/useGridSelector';\nimport { gridTabIndexColumnHeaderSelector } from '../../hooks/features/focus/gridFocusStateSelector';\nimport { gridRowSelectionStateSelector } from '../../hooks/features/rowSelection/gridRowSelectionSelector';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { gridExpandedSortedRowIdsSelector } from '../../hooks/features/filter/gridFilterSelector';\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from '../../hooks/features/pagination/gridPaginationSelector';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['checkboxInput']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nconst GridHeaderCheckbox = /*#__PURE__*/React.forwardRef(function GridHeaderCheckbox(props, ref) {\n  var _rootProps$slotProps;\n\n  const other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const [, forceUpdate] = React.useState(false);\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const ownerState = {\n    classes: rootProps.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const tabIndexState = useGridSelector(apiRef, gridTabIndexColumnHeaderSelector);\n  const selection = useGridSelector(apiRef, gridRowSelectionStateSelector);\n  const visibleRowIds = useGridSelector(apiRef, gridExpandedSortedRowIdsSelector);\n  const paginatedVisibleRowIds = useGridSelector(apiRef, gridPaginatedVisibleSortedGridRowIdsSelector);\n  const filteredSelection = React.useMemo(() => {\n    if (typeof rootProps.isRowSelectable !== 'function') {\n      return selection;\n    }\n\n    return selection.filter(id => {\n      // The row might have been deleted\n      if (!apiRef.current.getRow(id)) {\n        return false;\n      }\n\n      return rootProps.isRowSelectable(apiRef.current.getRowParams(id));\n    });\n  }, [apiRef, rootProps.isRowSelectable, selection]); // All the rows that could be selected / unselected by toggling this checkbox\n\n  const selectionCandidates = React.useMemo(() => {\n    const rowIds = !rootProps.pagination || !rootProps.checkboxSelectionVisibleOnly ? visibleRowIds : paginatedVisibleRowIds; // Convert to an object to make O(1) checking if a row exists or not\n    // TODO create selector that returns visibleRowIds/paginatedVisibleRowIds as an object\n\n    return rowIds.reduce((acc, id) => {\n      acc[id] = true;\n      return acc;\n    }, {});\n  }, [rootProps.pagination, rootProps.checkboxSelectionVisibleOnly, paginatedVisibleRowIds, visibleRowIds]); // Amount of rows selected and that are visible in the current page\n\n  const currentSelectionSize = React.useMemo(() => filteredSelection.filter(id => selectionCandidates[id]).length, [filteredSelection, selectionCandidates]);\n  const isIndeterminate = currentSelectionSize > 0 && currentSelectionSize < Object.keys(selectionCandidates).length;\n  const isChecked = currentSelectionSize > 0;\n\n  const handleChange = event => {\n    const params = {\n      value: event.target.checked\n    };\n    apiRef.current.publishEvent('headerSelectionCheckboxChange', params);\n  };\n\n  const tabIndex = tabIndexState !== null && tabIndexState.field === props.field ? 0 : -1;\n  React.useLayoutEffect(() => {\n    const element = apiRef.current.getColumnHeaderElement(props.field);\n\n    if (tabIndex === 0 && element) {\n      element.tabIndex = -1;\n    }\n  }, [tabIndex, apiRef, props.field]);\n  const handleKeyDown = React.useCallback(event => {\n    if (event.key === ' ') {\n      // imperative toggle the checkbox because Space is disable by some preventDefault\n      apiRef.current.publishEvent('headerSelectionCheckboxChange', {\n        value: !isChecked\n      });\n    }\n  }, [apiRef, isChecked]);\n  const handleSelectionChange = React.useCallback(() => {\n    forceUpdate(p => !p);\n  }, []);\n  React.useEffect(() => {\n    return apiRef.current.subscribeEvent('rowSelectionChange', handleSelectionChange);\n  }, [apiRef, handleSelectionChange]);\n  const label = apiRef.current.getLocaleText(isChecked ? 'checkboxSelectionUnselectAllRows' : 'checkboxSelectionSelectAllRows');\n  return /*#__PURE__*/_jsx(rootProps.slots.baseCheckbox, _extends({\n    ref: ref,\n    indeterminate: isIndeterminate,\n    checked: isChecked,\n    onChange: handleChange,\n    className: classes.root,\n    inputProps: {\n      'aria-label': label\n    },\n    tabIndex: tabIndex,\n    onKeyDown: handleKeyDown\n  }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseCheckbox, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridHeaderCheckbox.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The column of the current header component.\n   */\n  colDef: PropTypes.object.isRequired,\n\n  /**\n   * The column field of the column that triggered the event\n   */\n  field: PropTypes.string.isRequired\n} : void 0;\nexport { GridHeaderCheckbox };","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/node_modules/@mui/x-data-grid/components/columnSelection/GridHeaderCheckbox.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","unstable_composeClasses","composeClasses","useGridSelector","gridTabIndexColumnHeaderSelector","gridRowSelectionStateSelector","useGridApiContext","getDataGridUtilityClass","useGridRootProps","gridExpandedSortedRowIdsSelector","gridPaginatedVisibleSortedGridRowIdsSelector","jsx","_jsx","useUtilityClasses","ownerState","classes","slots","root","GridHeaderCheckbox","forwardRef","props","ref","_rootProps$slotProps","other","forceUpdate","useState","apiRef","rootProps","tabIndexState","selection","visibleRowIds","paginatedVisibleRowIds","filteredSelection","useMemo","isRowSelectable","filter","id","current","getRow","getRowParams","selectionCandidates","rowIds","pagination","checkboxSelectionVisibleOnly","reduce","acc","currentSelectionSize","length","isIndeterminate","Object","keys","isChecked","handleChange","event","params","value","target","checked","publishEvent","tabIndex","field","useLayoutEffect","element","getColumnHeaderElement","handleKeyDown","useCallback","key","handleSelectionChange","p","useEffect","subscribeEvent","label","getLocaleText","baseCheckbox","indeterminate","onChange","className","inputProps","onKeyDown","slotProps","process","env","NODE_ENV","propTypes","colDef","object","isRequired","string"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"field\", \"colDef\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '@mui/utils';\nimport { useGridSelector } from '../../hooks/utils/useGridSelector';\nimport { gridTabIndexColumnHeaderSelector } from '../../hooks/features/focus/gridFocusStateSelector';\nimport { gridRowSelectionStateSelector } from '../../hooks/features/rowSelection/gridRowSelectionSelector';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { gridExpandedSortedRowIdsSelector } from '../../hooks/features/filter/gridFilterSelector';\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from '../../hooks/features/pagination/gridPaginationSelector';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['checkboxInput']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nconst GridHeaderCheckbox = /*#__PURE__*/React.forwardRef(function GridHeaderCheckbox(props, ref) {\n  var _rootProps$slotProps;\n  const other = _objectWithoutPropertiesLoose(props, _excluded);\n  const [, forceUpdate] = React.useState(false);\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const ownerState = {\n    classes: rootProps.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const tabIndexState = useGridSelector(apiRef, gridTabIndexColumnHeaderSelector);\n  const selection = useGridSelector(apiRef, gridRowSelectionStateSelector);\n  const visibleRowIds = useGridSelector(apiRef, gridExpandedSortedRowIdsSelector);\n  const paginatedVisibleRowIds = useGridSelector(apiRef, gridPaginatedVisibleSortedGridRowIdsSelector);\n  const filteredSelection = React.useMemo(() => {\n    if (typeof rootProps.isRowSelectable !== 'function') {\n      return selection;\n    }\n    return selection.filter(id => {\n      // The row might have been deleted\n      if (!apiRef.current.getRow(id)) {\n        return false;\n      }\n      return rootProps.isRowSelectable(apiRef.current.getRowParams(id));\n    });\n  }, [apiRef, rootProps.isRowSelectable, selection]);\n\n  // All the rows that could be selected / unselected by toggling this checkbox\n  const selectionCandidates = React.useMemo(() => {\n    const rowIds = !rootProps.pagination || !rootProps.checkboxSelectionVisibleOnly ? visibleRowIds : paginatedVisibleRowIds;\n\n    // Convert to an object to make O(1) checking if a row exists or not\n    // TODO create selector that returns visibleRowIds/paginatedVisibleRowIds as an object\n    return rowIds.reduce((acc, id) => {\n      acc[id] = true;\n      return acc;\n    }, {});\n  }, [rootProps.pagination, rootProps.checkboxSelectionVisibleOnly, paginatedVisibleRowIds, visibleRowIds]);\n\n  // Amount of rows selected and that are visible in the current page\n  const currentSelectionSize = React.useMemo(() => filteredSelection.filter(id => selectionCandidates[id]).length, [filteredSelection, selectionCandidates]);\n  const isIndeterminate = currentSelectionSize > 0 && currentSelectionSize < Object.keys(selectionCandidates).length;\n  const isChecked = currentSelectionSize > 0;\n  const handleChange = event => {\n    const params = {\n      value: event.target.checked\n    };\n    apiRef.current.publishEvent('headerSelectionCheckboxChange', params);\n  };\n  const tabIndex = tabIndexState !== null && tabIndexState.field === props.field ? 0 : -1;\n  React.useLayoutEffect(() => {\n    const element = apiRef.current.getColumnHeaderElement(props.field);\n    if (tabIndex === 0 && element) {\n      element.tabIndex = -1;\n    }\n  }, [tabIndex, apiRef, props.field]);\n  const handleKeyDown = React.useCallback(event => {\n    if (event.key === ' ') {\n      // imperative toggle the checkbox because Space is disable by some preventDefault\n      apiRef.current.publishEvent('headerSelectionCheckboxChange', {\n        value: !isChecked\n      });\n    }\n  }, [apiRef, isChecked]);\n  const handleSelectionChange = React.useCallback(() => {\n    forceUpdate(p => !p);\n  }, []);\n  React.useEffect(() => {\n    return apiRef.current.subscribeEvent('rowSelectionChange', handleSelectionChange);\n  }, [apiRef, handleSelectionChange]);\n  const label = apiRef.current.getLocaleText(isChecked ? 'checkboxSelectionUnselectAllRows' : 'checkboxSelectionSelectAllRows');\n  return /*#__PURE__*/_jsx(rootProps.slots.baseCheckbox, _extends({\n    ref: ref,\n    indeterminate: isIndeterminate,\n    checked: isChecked,\n    onChange: handleChange,\n    className: classes.root,\n    inputProps: {\n      'aria-label': label\n    },\n    tabIndex: tabIndex,\n    onKeyDown: handleKeyDown\n  }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseCheckbox, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridHeaderCheckbox.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The column of the current header component.\n   */\n  colDef: PropTypes.object.isRequired,\n  /**\n   * The column field of the column that triggered the event\n   */\n  field: PropTypes.string.isRequired\n} : void 0;\nexport { GridHeaderCheckbox };"]},"metadata":{},"sourceType":"module"}