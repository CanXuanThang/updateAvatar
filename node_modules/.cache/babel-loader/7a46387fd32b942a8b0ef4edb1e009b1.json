{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\", \"field\"],\n      _excluded2 = [\"id\", \"field\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditingSelectors';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsDataRowIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { deepClone } from '../../../utils/utils';\nimport { GridCellEditStartReasons, GridCellEditStopReasons } from '../../../models/params/gridEditCellParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridCellEditing = (apiRef, props) => {\n  const [cellModesModel, setCellModesModel] = React.useState({});\n  const cellModesModelRef = React.useRef(cellModesModel);\n  const prevCellModesModel = React.useRef({});\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    cellModesModel: cellModesModelProp,\n    onCellModesModelChange\n  } = props;\n\n  const runIfEditModeIsCell = callback => (...args) => {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...args);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (params.cellMode === GridCellModes.Edit) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent('cellEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.View) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStopReasons.cellFocusOut\n    });\n\n    apiRef.current.publishEvent('cellEditStop', newParams, event);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is deprecated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n\n        apiRef.current.publishEvent('cellEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n\n      if (event.key === ' ') {\n        return; // Space scrolls to the last row\n      }\n\n      if (isPrintableKey(event)) {\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete' || event.key === 'Backspace') {\n        // Delete on Windows, Backspace on macOS\n        reason = GridCellEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason,\n          key: event.key\n        });\n\n        apiRef.current.publishEvent('cellEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleCellEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason,\n      key\n    } = params;\n    const startCellEditModeParams = {\n      id,\n      field\n    };\n\n    if (reason === GridCellEditStartReasons.printableKeyDown) {\n      if (React.version.startsWith('17')) {\n        // In React 17, cleaning the input is enough.\n        // The sequence of events makes the key pressed by the end-users update the textbox directly.\n        startCellEditModeParams.deleteValue = true;\n      } else {\n        startCellEditModeParams.initialValue = key;\n      }\n    } else if (reason === GridCellEditStartReasons.deleteKeyDown) {\n      startCellEditModeParams.deleteValue = true;\n    }\n\n    apiRef.current.startCellEditMode(startCellEditModeParams);\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    let cellToFocusAfter;\n\n    if (reason === GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopCellEditMode({\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsCell(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsCell(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsCell(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellEditStart', runIfEditModeIsCell(handleCellEditStart));\n  useGridApiEventHandler(apiRef, 'cellEditStop', runIfEditModeIsCell(handleCellEditStop));\n  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, 'cellEditStop', props.onCellEditStop);\n  const getCellMode = React.useCallback((id, field) => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]);\n  const updateCellModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.cellModesModel;\n\n    if (onCellModesModelChange && isNewModelDifferentFromProp) {\n      onCellModesModelChange(newModel, {});\n    }\n\n    if (props.cellModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setCellModesModel(newModel);\n    cellModesModelRef.current = newModel;\n    apiRef.current.publishEvent('cellModesModelChange', newModel);\n  });\n  const updateFieldInCellModesModel = React.useCallback((id, field, newProps) => {\n    // We use the ref because it always contain the up-to-date value, different from the state\n    // that needs a rerender to reflect the new value\n    const newModel = _extends({}, cellModesModelRef.current);\n\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newModel[id], {\n        [field]: _extends({}, newProps)\n      });\n    } else {\n      const _newModel$id = newModel[id],\n            otherFields = _objectWithoutPropertiesLoose(_newModel$id, [field].map(_toPropertyKey)); // Ensure that we have a new object, not a reference\n\n\n      newModel[id] = otherFields;\n\n      if (Object.keys(newModel[id]).length === 0) {\n        delete newModel[id];\n      }\n    }\n\n    updateCellModesModel(newModel);\n  }, [updateCellModesModel]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded);\n\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.View);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.Edit\n    }, other));\n  }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStartCellEditMode = useEventCallback(params => {\n    const {\n      id,\n      field,\n      deleteValue,\n      initialValue\n    } = params;\n    let newValue = apiRef.current.getCellValue(id, field); // eslint-disable-next-line @typescript-eslint/naming-convention\n\n    let unstable_updateValueOnRender = false;\n\n    if (deleteValue || initialValue) {\n      newValue = deleteValue ? '' : initialValue;\n      unstable_updateValueOnRender = true;\n    }\n\n    const newProps = {\n      value: newValue,\n      error: false,\n      isProcessingProps: false,\n      unstable_updateValueOnRender\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n  });\n  const stopCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded2);\n\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.View\n    }, other));\n  }, [throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStopCellEditMode = useEventCallback(async params => {\n    const {\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n\n    const finishCellEditMode = () => {\n      updateOrDeleteFieldState(id, field, null);\n      updateFieldInCellModesModel(id, field, null);\n\n      if (cellToFocusAfter !== 'none') {\n        apiRef.current.moveFocusToRelativeCell(id, field, cellToFocusAfter);\n      }\n    };\n\n    if (ignoreModifications) {\n      finishCellEditMode();\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      error,\n      isProcessingProps\n    } = editingState[id][field];\n\n    if (error || isProcessingProps) {\n      // Attempt to change cell mode to \"view\" was not successful\n      // Update previous mode to allow another attempt\n      prevCellModesModel.current[id][field].mode = GridCellModes.Edit; // Revert the mode in the cellModesModel prop back to \"edit\"\n\n      updateFieldInCellModesModel(id, field, {\n        mode: GridCellModes.Edit\n      });\n      return;\n    }\n\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromCellEditing(id, field);\n\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevCellModesModel.current[id][field].mode = GridCellModes.Edit; // Revert the mode in the cellModesModel prop back to \"edit\"\n\n        updateFieldInCellModesModel(id, field, {\n          mode: GridCellModes.Edit\n        });\n\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        const row = apiRef.current.getRow(id);\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishCellEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishCellEditMode();\n    }\n  });\n  const setCellEditingEditCellValue = React.useCallback(async params => {\n    var _editingState$id, _editingState$id$fiel;\n\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n\n    if (column.preProcessEditCellProps) {\n      const hasChanged = value !== editingState[id][field].value;\n      newProps = _extends({}, newProps, {\n        isProcessingProps: true\n      });\n      updateOrDeleteFieldState(id, field, newProps);\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps,\n        hasChanged\n      }));\n    } // Check again if the cell is in edit mode because the user may have\n    // discarded the changes while the props were being processed.\n\n\n    if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {\n      return false;\n    }\n\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    newProps = _extends({}, newProps, {\n      isProcessingProps: false\n    }); // We don't update the value with the one coming from the props pre-processing\n    // because when the promise resolves it may be already outdated. The only\n    // exception to this rule is when there's no pre-processing.\n\n    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n    updateOrDeleteFieldState(id, field, newProps);\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return !((_editingState$id = editingState[id]) != null && (_editingState$id$fiel = _editingState$id[field]) != null && _editingState$id$fiel.error);\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromCellEditing = React.useCallback((id, field) => {\n    const column = apiRef.current.getColumn(field);\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n\n    if (!editingState[id] || !editingState[id][field]) {\n      return apiRef.current.getRow(id);\n    }\n\n    const {\n      value\n    } = editingState[id][field];\n    return column.valueSetter ? column.valueSetter({\n      value,\n      row\n    }) : _extends({}, row, {\n      [field]: value\n    });\n  }, [apiRef]);\n  const editingApi = {\n    getCellMode,\n    startCellEditMode,\n    stopCellEditMode\n  };\n  const editingPrivateApi = {\n    setCellEditingEditCellValue,\n    getRowWithUpdatedValuesFromCellEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'public');\n  useGridApiMethod(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (cellModesModelProp) {\n      updateCellModesModel(cellModesModelProp);\n    }\n  }, [cellModesModelProp, updateCellModesModel]);\n  React.useEffect(() => {\n    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef); // Update the ref here because updateStateToStopCellEditMode may change it later\n\n    const copyOfPrevCellModes = prevCellModesModel.current;\n    prevCellModesModel.current = deepClone(cellModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(cellModesModel).forEach(([id, fields]) => {\n      Object.entries(fields).forEach(([field, params]) => {\n        var _copyOfPrevCellModes$, _copyOfPrevCellModes$2, _idToIdLookup$id;\n\n        const prevMode = ((_copyOfPrevCellModes$ = copyOfPrevCellModes[id]) == null ? void 0 : (_copyOfPrevCellModes$2 = _copyOfPrevCellModes$[field]) == null ? void 0 : _copyOfPrevCellModes$2.mode) || GridCellModes.View;\n        const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n\n        if (params.mode === GridCellModes.Edit && prevMode === GridCellModes.View) {\n          updateStateToStartCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        } else if (params.mode === GridCellModes.View && prevMode === GridCellModes.Edit) {\n          updateStateToStopCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        }\n      });\n    });\n  }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);\n};","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/node_modules/@mui/x-data-grid/hooks/features/editing/useGridCellEditing.js"],"names":["_objectWithoutPropertiesLoose","_toPropertyKey","_extends","_excluded","_excluded2","React","unstable_useEventCallback","useEventCallback","useGridApiEventHandler","useGridApiOptionHandler","GridEditModes","GridCellModes","useGridApiMethod","gridEditRowsStateSelector","isPrintableKey","buildWarning","gridRowsDataRowIdToIdLookupSelector","deepClone","GridCellEditStartReasons","GridCellEditStopReasons","missingOnProcessRowUpdateErrorWarning","useGridCellEditing","apiRef","props","cellModesModel","setCellModesModel","useState","cellModesModelRef","useRef","prevCellModesModel","processRowUpdate","onProcessRowUpdateError","cellModesModelProp","onCellModesModelChange","runIfEditModeIsCell","callback","args","editMode","Cell","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","throwIfNotInMode","mode","getCellMode","handleCellDoubleClick","event","isEditable","cellMode","Edit","newParams","reason","cellDoubleClick","publishEvent","handleCellFocusOut","View","cellFocusOut","handleCellKeyDown","which","key","escapeKeyDown","enterKeyDown","shiftKey","shiftTabKeyDown","tabKeyDown","preventDefault","printableKeyDown","ctrlKey","metaKey","deleteKeyDown","handleCellEditStart","startCellEditModeParams","version","startsWith","deleteValue","initialValue","startCellEditMode","handleCellEditStop","runPendingEditCellValueMutation","cellToFocusAfter","ignoreModifications","stopCellEditMode","onCellEditStart","onCellEditStop","editingState","state","isEditing","updateCellModesModel","newModel","isNewModelDifferentFromProp","updateFieldInCellModesModel","newProps","_newModel$id","otherFields","map","Object","keys","length","updateOrDeleteFieldState","setState","newEditingState","editRows","forceUpdate","other","updateStateToStartCellEditMode","newValue","getCellValue","unstable_updateValueOnRender","value","error","isProcessingProps","setCellFocus","updateStateToStopCellEditMode","finishCellEditMode","moveFocusToRelativeCell","rowUpdate","getRowWithUpdatedValuesFromCellEditing","handleError","errorThrown","row","getRow","Promise","resolve","then","finalRowUpdate","updateRows","catch","setCellEditingEditCellValue","_editingState$id","_editingState$id$fiel","debounceMs","unstable_skipValueParser","skipValueParser","column","getColumn","parsedValue","valueParser","changeReason","preProcessEditCellProps","hasChanged","valueSetter","editingApi","editingPrivateApi","useEffect","idToIdLookup","copyOfPrevCellModes","entries","forEach","fields","_copyOfPrevCellModes$","_copyOfPrevCellModes$2","_idToIdLookup$id","prevMode","originalId"],"mappings":"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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\", \"field\"],\n  _excluded2 = [\"id\", \"field\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditingSelectors';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsDataRowIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { deepClone } from '../../../utils/utils';\nimport { GridCellEditStartReasons, GridCellEditStopReasons } from '../../../models/params/gridEditCellParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridCellEditing = (apiRef, props) => {\n  const [cellModesModel, setCellModesModel] = React.useState({});\n  const cellModesModelRef = React.useRef(cellModesModel);\n  const prevCellModesModel = React.useRef({});\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    cellModesModel: cellModesModelProp,\n    onCellModesModelChange\n  } = props;\n  const runIfEditModeIsCell = callback => (...args) => {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...args);\n    }\n  };\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (params.cellMode === GridCellModes.Edit) {\n      return;\n    }\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStartReasons.cellDoubleClick\n    });\n    apiRef.current.publishEvent('cellEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.View) {\n      return;\n    }\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStopReasons.cellFocusOut\n    });\n    apiRef.current.publishEvent('cellEditStop', newParams, event);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is deprecated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n      let reason;\n      if (event.key === 'Escape') {\n        reason = GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n        apiRef.current.publishEvent('cellEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n      if (event.key === ' ') {\n        return; // Space scrolls to the last row\n      }\n\n      if (isPrintableKey(event)) {\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete' || event.key === 'Backspace') {\n        // Delete on Windows, Backspace on macOS\n        reason = GridCellEditStartReasons.deleteKeyDown;\n      }\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason,\n          key: event.key\n        });\n        apiRef.current.publishEvent('cellEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleCellEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason,\n      key\n    } = params;\n    const startCellEditModeParams = {\n      id,\n      field\n    };\n    if (reason === GridCellEditStartReasons.printableKeyDown) {\n      if (React.version.startsWith('17')) {\n        // In React 17, cleaning the input is enough.\n        // The sequence of events makes the key pressed by the end-users update the textbox directly.\n        startCellEditModeParams.deleteValue = true;\n      } else {\n        startCellEditModeParams.initialValue = key;\n      }\n    } else if (reason === GridCellEditStartReasons.deleteKeyDown) {\n      startCellEditModeParams.deleteValue = true;\n    }\n    apiRef.current.startCellEditMode(startCellEditModeParams);\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    let cellToFocusAfter;\n    if (reason === GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopCellEditMode({\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsCell(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsCell(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsCell(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellEditStart', runIfEditModeIsCell(handleCellEditStart));\n  useGridApiEventHandler(apiRef, 'cellEditStop', runIfEditModeIsCell(handleCellEditStop));\n  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, 'cellEditStop', props.onCellEditStop);\n  const getCellMode = React.useCallback((id, field) => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]);\n  const updateCellModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.cellModesModel;\n    if (onCellModesModelChange && isNewModelDifferentFromProp) {\n      onCellModesModelChange(newModel, {});\n    }\n    if (props.cellModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setCellModesModel(newModel);\n    cellModesModelRef.current = newModel;\n    apiRef.current.publishEvent('cellModesModelChange', newModel);\n  });\n  const updateFieldInCellModesModel = React.useCallback((id, field, newProps) => {\n    // We use the ref because it always contain the up-to-date value, different from the state\n    // that needs a rerender to reflect the new value\n    const newModel = _extends({}, cellModesModelRef.current);\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newModel[id], {\n        [field]: _extends({}, newProps)\n      });\n    } else {\n      const _newModel$id = newModel[id],\n        otherFields = _objectWithoutPropertiesLoose(_newModel$id, [field].map(_toPropertyKey)); // Ensure that we have a new object, not a reference\n      newModel[id] = otherFields;\n      if (Object.keys(newModel[id]).length === 0) {\n        delete newModel[id];\n      }\n    }\n    updateCellModesModel(newModel);\n  }, [updateCellModesModel]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startCellEditMode = React.useCallback(params => {\n    const {\n        id,\n        field\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded);\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.View);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.Edit\n    }, other));\n  }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStartCellEditMode = useEventCallback(params => {\n    const {\n      id,\n      field,\n      deleteValue,\n      initialValue\n    } = params;\n    let newValue = apiRef.current.getCellValue(id, field);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    let unstable_updateValueOnRender = false;\n    if (deleteValue || initialValue) {\n      newValue = deleteValue ? '' : initialValue;\n      unstable_updateValueOnRender = true;\n    }\n    const newProps = {\n      value: newValue,\n      error: false,\n      isProcessingProps: false,\n      unstable_updateValueOnRender\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n  });\n  const stopCellEditMode = React.useCallback(params => {\n    const {\n        id,\n        field\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded2);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.View\n    }, other));\n  }, [throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStopCellEditMode = useEventCallback(async params => {\n    const {\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    const finishCellEditMode = () => {\n      updateOrDeleteFieldState(id, field, null);\n      updateFieldInCellModesModel(id, field, null);\n      if (cellToFocusAfter !== 'none') {\n        apiRef.current.moveFocusToRelativeCell(id, field, cellToFocusAfter);\n      }\n    };\n    if (ignoreModifications) {\n      finishCellEditMode();\n      return;\n    }\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      error,\n      isProcessingProps\n    } = editingState[id][field];\n    if (error || isProcessingProps) {\n      // Attempt to change cell mode to \"view\" was not successful\n      // Update previous mode to allow another attempt\n      prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n      // Revert the mode in the cellModesModel prop back to \"edit\"\n      updateFieldInCellModesModel(id, field, {\n        mode: GridCellModes.Edit\n      });\n      return;\n    }\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromCellEditing(id, field);\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n        // Revert the mode in the cellModesModel prop back to \"edit\"\n        updateFieldInCellModesModel(id, field, {\n          mode: GridCellModes.Edit\n        });\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n      try {\n        const row = apiRef.current.getRow(id);\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishCellEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishCellEditMode();\n    }\n  });\n  const setCellEditingEditCellValue = React.useCallback(async params => {\n    var _editingState$id, _editingState$id$fiel;\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n    if (column.preProcessEditCellProps) {\n      const hasChanged = value !== editingState[id][field].value;\n      newProps = _extends({}, newProps, {\n        isProcessingProps: true\n      });\n      updateOrDeleteFieldState(id, field, newProps);\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps,\n        hasChanged\n      }));\n    }\n\n    // Check again if the cell is in edit mode because the user may have\n    // discarded the changes while the props were being processed.\n    if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {\n      return false;\n    }\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    newProps = _extends({}, newProps, {\n      isProcessingProps: false\n    });\n    // We don't update the value with the one coming from the props pre-processing\n    // because when the promise resolves it may be already outdated. The only\n    // exception to this rule is when there's no pre-processing.\n    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n    updateOrDeleteFieldState(id, field, newProps);\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return !((_editingState$id = editingState[id]) != null && (_editingState$id$fiel = _editingState$id[field]) != null && _editingState$id$fiel.error);\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromCellEditing = React.useCallback((id, field) => {\n    const column = apiRef.current.getColumn(field);\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    if (!editingState[id] || !editingState[id][field]) {\n      return apiRef.current.getRow(id);\n    }\n    const {\n      value\n    } = editingState[id][field];\n    return column.valueSetter ? column.valueSetter({\n      value,\n      row\n    }) : _extends({}, row, {\n      [field]: value\n    });\n  }, [apiRef]);\n  const editingApi = {\n    getCellMode,\n    startCellEditMode,\n    stopCellEditMode\n  };\n  const editingPrivateApi = {\n    setCellEditingEditCellValue,\n    getRowWithUpdatedValuesFromCellEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'public');\n  useGridApiMethod(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (cellModesModelProp) {\n      updateCellModesModel(cellModesModelProp);\n    }\n  }, [cellModesModelProp, updateCellModesModel]);\n  React.useEffect(() => {\n    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);\n\n    // Update the ref here because updateStateToStopCellEditMode may change it later\n    const copyOfPrevCellModes = prevCellModesModel.current;\n    prevCellModesModel.current = deepClone(cellModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(cellModesModel).forEach(([id, fields]) => {\n      Object.entries(fields).forEach(([field, params]) => {\n        var _copyOfPrevCellModes$, _copyOfPrevCellModes$2, _idToIdLookup$id;\n        const prevMode = ((_copyOfPrevCellModes$ = copyOfPrevCellModes[id]) == null ? void 0 : (_copyOfPrevCellModes$2 = _copyOfPrevCellModes$[field]) == null ? void 0 : _copyOfPrevCellModes$2.mode) || GridCellModes.View;\n        const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n        if (params.mode === GridCellModes.Edit && prevMode === GridCellModes.View) {\n          updateStateToStartCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        } else if (params.mode === GridCellModes.View && prevMode === GridCellModes.Edit) {\n          updateStateToStopCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        }\n      });\n    });\n  }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);\n};"]},"metadata":{},"sourceType":"module"}