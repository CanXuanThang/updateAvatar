{"ast":null,"code":"import { validEmailRegex } from '../../utils';\n\nconst validateEmail = email => {\n  if (!email) {\n    return 'emailRequire';\n  }\n\n  if (!validEmailRegex.test(email)) {\n    return 'emailInvalid';\n  }\n\n  return '';\n};\n\nconst validatePassword = password => {\n  if (!password) {\n    return 'passwordRequire';\n  }\n\n  if (password.length < 4) {\n    return 'minPasswordInvalid';\n  }\n\n  return '';\n};\n\nconst validateRepeatPassword = (password, repeatPassword) => {\n  if (!repeatPassword) {\n    return 'passwordRequire';\n  }\n\n  if (password !== repeatPassword) {\n    return 'matchPasswordInvalid';\n  }\n\n  return '';\n};\n\nconst validateField = (field, value) => {\n  if (value) return '';\n  let fieldRequire = '';\n\n  switch (field) {\n    case 'name':\n      fieldRequire = 'nameRequire';\n      break;\n\n    case 'gender':\n      fieldRequire = 'genderRequire';\n      break;\n\n    case 'region':\n      fieldRequire = 'regionRequire';\n      break;\n\n    case 'state':\n      fieldRequire = 'stateRequire';\n      break;\n  }\n\n  return fieldRequire;\n};\n\nexport const validateLogin = values => {\n  return {\n    email: validateEmail(values.email),\n    password: validatePassword(values.password)\n  };\n};\nexport const validLogin = values => {\n  return !values.email && !values.password;\n};\nexport const validateSignUp = values => {\n  return {\n    email: validateEmail(values.email),\n    password: validatePassword(values.password),\n    repeatPassword: validateRepeatPassword(values.password, values.repeatPassword),\n    name: validateField('name', values.name),\n    gender: validateField('gender', values.gender),\n    region: validateField('region', values.region),\n    state: validateField('state', values.state)\n  };\n};\nexport const validSignUp = values => {\n  return !values.email && !values.password && !values.repeatPassword && !values.name && !values.gender && !values.region && !values.state;\n};","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/src/modules/auth/utils.ts"],"names":["validEmailRegex","validateEmail","email","test","validatePassword","password","length","validateRepeatPassword","repeatPassword","validateField","field","value","fieldRequire","validateLogin","values","validLogin","validateSignUp","name","gender","region","state","validSignUp"],"mappings":"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","sourcesContent":["import { ILoginParams, ILoginValidation } from '../../models/auth';\nimport { ISignUpParams, ISignUpValidation } from '../../models/singup';\nimport { validEmailRegex } from '../../utils';\n\nconst validateEmail = (email: string) => {\n  if (!email) {\n    return 'emailRequire';\n  }\n\n  if (!validEmailRegex.test(email)) {\n    return 'emailInvalid';\n  }\n\n  return '';\n};\n\nconst validatePassword = (password: string) => {\n  if (!password) {\n    return 'passwordRequire';\n  }\n\n  if (password.length < 4) {\n    return 'minPasswordInvalid';\n  }\n\n  return '';\n};\n\nconst validateRepeatPassword = (password: string, repeatPassword: string) => {\n  if (!repeatPassword) {\n    return 'passwordRequire';\n  }\n\n  if (password !== repeatPassword) {\n    return 'matchPasswordInvalid';\n  }\n\n  return '';\n};\n\nconst validateField = (field: string, value: string) => {\n  if (value) return '';\n  let fieldRequire = '';\n  switch (field) {\n    case 'name':\n      fieldRequire = 'nameRequire';\n      break;\n\n    case 'gender':\n      fieldRequire = 'genderRequire';\n      break;\n\n    case 'region':\n      fieldRequire = 'regionRequire';\n      break;\n\n    case 'state':\n      fieldRequire = 'stateRequire';\n      break;\n  }\n\n  return fieldRequire;\n};\n\nexport const validateLogin = (values: ILoginParams): ILoginValidation => {\n  return {\n    email: validateEmail(values.email),\n    password: validatePassword(values.password),\n  };\n};\n\nexport const validLogin = (values: ILoginValidation) => {\n  return !values.email && !values.password;\n};\n\nexport const validateSignUp = (values: ISignUpParams): ISignUpValidation => {\n  return {\n    email: validateEmail(values.email),\n    password: validatePassword(values.password),\n    repeatPassword: validateRepeatPassword(values.password, values.repeatPassword),\n    name: validateField('name', values.name),\n    gender: validateField('gender', values.gender),\n    region: validateField('region', values.region),\n    state: validateField('state', values.state),\n  };\n};\n\nexport const validSignUp = (values: ISignUpValidation) => {\n  return !values.email && !values.password && !values.repeatPassword && !values.name && !values.gender && !values.region && !values.state;\n};"]},"metadata":{},"sourceType":"module"}