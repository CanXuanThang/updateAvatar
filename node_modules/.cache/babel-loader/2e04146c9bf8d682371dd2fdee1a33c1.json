{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowsLookupSelector } from '../rows/gridRowsSelector';\nimport { gridRowSelectionStateSelector, selectedGridRowsSelector, selectedIdsLookupSelector } from './gridRowSelectionSelector';\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from '../pagination';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridExpandedSortedRowIdsSelector } from '../filter/gridFilterSelector';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from '../../../colDef';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isNavigationKey } from '../../../utils/keyboardUtils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridClasses } from '../../../constants/gridClasses';\n\nconst getSelectionModelPropValue = (selectionModelProp, prevSelectionModel) => {\n  if (selectionModelProp == null) {\n    return selectionModelProp;\n  }\n\n  if (Array.isArray(selectionModelProp)) {\n    return selectionModelProp;\n  }\n\n  if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {\n    return prevSelectionModel;\n  }\n\n  return [selectionModelProp];\n};\n\nexport const rowSelectionStateInitializer = (state, props) => {\n  var _getSelectionModelPro;\n\n  return _extends({}, state, {\n    rowSelection: props.rowSelection ? (_getSelectionModelPro = getSelectionModelPropValue(props.rowSelectionModel)) != null ? _getSelectionModelPro : [] : []\n  });\n};\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\n\nexport const useGridRowSelection = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n\n  const runIfRowSelectionIsEnabled = callback => (...args) => {\n    if (props.rowSelection) {\n      callback(...args);\n    }\n  };\n\n  const propRowSelectionModel = React.useMemo(() => {\n    return getSelectionModelPropValue(props.rowSelectionModel, gridRowSelectionStateSelector(apiRef.current.state));\n  }, [apiRef, props.rowSelectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.registerControlState({\n    stateId: 'rowSelection',\n    propModel: propRowSelectionModel,\n    propOnChange: props.onRowSelectionModelChange,\n    stateSelector: gridRowSelectionStateSelector,\n    changeEvent: 'rowSelectionChange'\n  });\n  const {\n    checkboxSelection,\n    disableMultipleRowSelection,\n    disableRowSelectionOnClick,\n    isRowSelectable: propIsRowSelectable\n  } = props;\n  const canHaveMultipleSelection = !disableMultipleRowSelection || checkboxSelection;\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    var _lastRowToggled$curre;\n\n    let endId = id;\n    const startId = (_lastRowToggled$curre = lastRowToggled.current) != null ? _lastRowToggled$curre : id;\n    const isSelected = apiRef.current.isRowSelected(id);\n\n    if (isSelected) {\n      const visibleRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n\n      if (startIndex === endIndex) {\n        return;\n      }\n\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const setRowSelectionModel = React.useCallback(model => {\n    if (props.signature === GridSignature.DataGrid && !props.checkboxSelection && Array.isArray(model) && model.length > 1) {\n      throw new Error(['MUI: `rowSelectionModel` can only contain 1 item in DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection.'].join('\\n'));\n    }\n\n    const currentModel = gridRowSelectionStateSelector(apiRef.current.state);\n\n    if (currentModel !== model) {\n      logger.debug(`Setting selection model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        rowSelection: props.rowSelection ? model : []\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger, props.rowSelection, props.signature, props.checkboxSelection]);\n  const isRowSelected = React.useCallback(id => gridRowSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);\n  const isRowSelectable = React.useCallback(id => {\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n\n    const rowNode = apiRef.current.getRowNode(id);\n\n    if ((rowNode == null ? void 0 : rowNode.type) === 'footer' || (rowNode == null ? void 0 : rowNode.type) === 'pinnedRow') {\n      return false;\n    }\n\n    return true;\n  }, [apiRef, propIsRowSelectable]);\n  const getSelectedRows = React.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback((id, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n\n    lastRowToggled.current = id;\n\n    if (resetSelection) {\n      logger.debug(`Setting selection for row ${id}`);\n      apiRef.current.setRowSelectionModel(isSelected ? [id] : []);\n    } else {\n      logger.debug(`Toggling selection for row ${id}`);\n      const selection = gridRowSelectionStateSelector(apiRef.current.state);\n      const newSelection = selection.filter(el => el !== id);\n\n      if (isSelected) {\n        newSelection.push(id);\n      }\n\n      const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n\n      if (isSelectionValid) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRows = React.useCallback((ids, isSelected = true, resetSelection = false) => {\n    logger.debug(`Setting selection for several rows`);\n    const selectableIds = ids.filter(id => apiRef.current.isRowSelectable(id));\n    let newSelection;\n\n    if (resetSelection) {\n      newSelection = isSelected ? selectableIds : [];\n    } else {\n      // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n      const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n\n      selectableIds.forEach(id => {\n        if (isSelected) {\n          selectionLookup[id] = id;\n        } else {\n          delete selectionLookup[id];\n        }\n      });\n      newSelection = Object.values(selectionLookup);\n    }\n\n    const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n\n    if (isSelectionValid) {\n      apiRef.current.setRowSelectionModel(newSelection);\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRowRange = React.useCallback(({\n    startId,\n    endId\n  }, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n\n    logger.debug(`Expanding selection from row ${startId} to row ${endId}`); // Using rows from all pages allow to select a range across several pages\n\n    const allPagesRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionPublicApi = {\n    selectRow,\n    setRowSelectionModel,\n    getSelectedRows,\n    isRowSelected,\n    isRowSelectable\n  };\n  const selectionPrivateApi = {\n    selectRows,\n    selectRowRange\n  };\n  useGridApiMethod(apiRef, selectionPublicApi, 'public');\n  useGridApiMethod(apiRef, selectionPrivateApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n  /**\n   * EVENTS\n   */\n\n  const removeOutdatedSelection = React.useCallback(() => {\n    if (props.keepNonExistentRowsSelected) {\n      return;\n    }\n\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    const rowsLookup = gridRowsLookupSelector(apiRef); // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n\n    const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n\n    let hasChanged = false;\n    currentSelection.forEach(id => {\n      if (!rowsLookup[id]) {\n        delete selectionLookup[id];\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      apiRef.current.setRowSelectionModel(Object.values(selectionLookup));\n    }\n  }, [apiRef, props.keepNonExistentRowsSelected]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey; // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n\n    if (resetSelection) {\n      apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);\n    } else {\n      apiRef.current.selectRow(id, !isSelected, false);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleRowClick = React.useCallback((params, event) => {\n    var _closest;\n\n    if (disableRowSelectionOnClick) {\n      return;\n    }\n\n    const field = (_closest = event.target.closest(`.${gridClasses.cell}`)) == null ? void 0 : _closest.getAttribute('data-field');\n\n    if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n\n    if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n\n    if (field) {\n      const column = apiRef.current.getColumn(field);\n\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n\n    const rowNode = apiRef.current.getRowNode(params.id);\n\n    if (rowNode.type === 'pinnedRow') {\n      return;\n    }\n\n    if (event.shiftKey && (canHaveMultipleSelection || checkboxSelection)) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableRowSelectionOnClick, canHaveMultipleSelection, checkboxSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      var _window$getSelection;\n\n      (_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value);\n    }\n  }, [apiRef, expandMouseRowRangeSelection]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    const shouldLimitSelectionToCurrentPage = props.checkboxSelectionVisibleOnly && props.pagination;\n    const rowsToBeSelected = shouldLimitSelectionToCurrentPage ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridExpandedSortedRowIdsSelector(apiRef);\n    apiRef.current.selectRows(rowsToBeSelected, params.value);\n  }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    } // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n\n\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = gridFocusCellSelector(apiRef);\n\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n\n        const rowsBetweenStartAndEnd = visibleRows.rows.slice(start, end + 1).map(row => row.id);\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n\n    if (event.key === 'a' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      selectRows(apiRef.current.getAllRowIds(), true);\n    }\n  }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);\n  useGridApiEventHandler(apiRef, 'sortedRowsSet', runIfRowSelectionIsEnabled(removeOutdatedSelection));\n  useGridApiEventHandler(apiRef, 'rowClick', runIfRowSelectionIsEnabled(handleRowClick));\n  useGridApiEventHandler(apiRef, 'rowSelectionCheckboxChange', runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange));\n  useGridApiEventHandler(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', runIfRowSelectionIsEnabled(preventSelectionOnShift));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfRowSelectionIsEnabled(handleCellKeyDown));\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (propRowSelectionModel !== undefined) {\n      apiRef.current.setRowSelectionModel(propRowSelectionModel);\n    }\n  }, [apiRef, propRowSelectionModel, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection) {\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, props.rowSelection]);\n  const isStateControlled = propRowSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled || !props.rowSelection) {\n      return;\n    } // props.isRowSelectable changed\n\n\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n\n    if (isRowSelectable) {\n      const newSelection = currentSelection.filter(id => isRowSelectable(id));\n\n      if (newSelection.length < currentSelection.length) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection || isStateControlled) {\n      return;\n    }\n\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n\n    if (!canHaveMultipleSelection && currentSelection.length > 1) {\n      // See https://github.com/mui/mui-x/issues/8455\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, isStateControlled, props.rowSelection]);\n};","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/node_modules/@mui/x-data-grid/hooks/features/rowSelection/useGridRowSelection.js"],"names":["_extends","React","GridSignature","useGridApiEventHandler","useGridApiMethod","useGridLogger","gridRowsLookupSelector","gridRowSelectionStateSelector","selectedGridRowsSelector","selectedIdsLookupSelector","gridPaginatedVisibleSortedGridRowIdsSelector","gridFocusCellSelector","gridExpandedSortedRowIdsSelector","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_ACTIONS_COLUMN_TYPE","GridCellModes","isKeyboardEvent","isNavigationKey","useGridVisibleRows","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridClasses","getSelectionModelPropValue","selectionModelProp","prevSelectionModel","Array","isArray","rowSelectionStateInitializer","state","props","_getSelectionModelPro","rowSelection","rowSelectionModel","useGridRowSelection","apiRef","logger","runIfRowSelectionIsEnabled","callback","args","propRowSelectionModel","useMemo","current","lastRowToggled","useRef","registerControlState","stateId","propModel","propOnChange","onRowSelectionModelChange","stateSelector","changeEvent","checkboxSelection","disableMultipleRowSelection","disableRowSelectionOnClick","isRowSelectable","propIsRowSelectable","canHaveMultipleSelection","visibleRows","expandMouseRowRangeSelection","useCallback","id","_lastRowToggled$curre","endId","startId","isSelected","isRowSelected","visibleRowIds","startIndex","findIndex","rowId","endIndex","selectRowRange","setRowSelectionModel","model","signature","DataGrid","length","Error","join","currentModel","debug","setState","forceUpdate","includes","getRowParams","rowNode","getRowNode","type","getSelectedRows","selectRow","resetSelection","selection","newSelection","filter","el","push","isSelectionValid","selectRows","ids","selectableIds","selectionLookup","forEach","Object","values","getRow","allPagesRowIds","indexOf","start","end","rowsBetweenStartAndEnd","slice","selectionPublicApi","selectionPrivateApi","removeOutdatedSelection","keepNonExistentRowsSelected","currentSelection","rowsLookup","hasChanged","handleSingleRowSelection","event","hasCtrlKey","metaKey","ctrlKey","isMultipleSelectionDisabled","handleRowClick","params","_closest","field","target","closest","cell","getAttribute","column","getColumn","shiftKey","preventSelectionOnShift","_window$getSelection","window","getSelection","removeAllRanges","handleRowSelectionCheckboxChange","nativeEvent","value","handleHeaderSelectionCheckboxChange","shouldLimitSelectionToCurrentPage","checkboxSelectionVisibleOnly","pagination","rowsToBeSelected","handleCellKeyDown","getCellMode","Edit","currentTarget","contains","key","focusCell","preventDefault","isNextRowSelected","newRowIndex","getRowIndexRelativeToVisibleRows","previousRowIndex","rows","map","row","getAllRowIds","useEffect","undefined","isStateControlled"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,EAAwBC,sBAAxB,QAAsD,oCAAtD;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,SAASC,6BAAT,EAAwCC,wBAAxC,EAAkEC,yBAAlE,QAAmG,4BAAnG;AACA,SAASC,4CAAT,QAA6D,eAA7D;AACA,SAASC,qBAAT,QAAsC,iCAAtC;AACA,SAASC,gCAAT,QAAiD,8BAAjD;AACA,SAASC,+BAAT,EAA0CC,wBAA1C,QAA0E,iBAA1E;AACA,SAASC,aAAT,QAA8B,kCAA9B;AACA,SAASC,eAAT,EAA0BC,eAA1B,QAAiD,8BAAjD;AACA,SAASC,kBAAT,QAAmC,gCAAnC;AACA,SAASC,8BAAT,QAA+C,+CAA/C;AACA,SAASC,WAAT,QAA4B,gCAA5B;;AACA,MAAMC,0BAA0B,GAAG,CAACC,kBAAD,EAAqBC,kBAArB,KAA4C;AAC7E,MAAID,kBAAkB,IAAI,IAA1B,EAAgC;AAC9B,WAAOA,kBAAP;AACD;;AACD,MAAIE,KAAK,CAACC,OAAN,CAAcH,kBAAd,CAAJ,EAAuC;AACrC,WAAOA,kBAAP;AACD;;AACD,MAAIC,kBAAkB,IAAIA,kBAAkB,CAAC,CAAD,CAAlB,KAA0BD,kBAApD,EAAwE;AACtE,WAAOC,kBAAP;AACD;;AACD,SAAO,CAACD,kBAAD,CAAP;AACD,CAXD;;AAYA,OAAO,MAAMI,4BAA4B,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC5D,MAAIC,qBAAJ;;AACA,SAAO7B,QAAQ,CAAC,EAAD,EAAK2B,KAAL,EAAY;AACzBG,IAAAA,YAAY,EAAEF,KAAK,CAACE,YAAN,GAAqB,CAACD,qBAAqB,GAAGR,0BAA0B,CAACO,KAAK,CAACG,iBAAP,CAAnD,KAAiF,IAAjF,GAAwFF,qBAAxF,GAAgH,EAArI,GAA0I;AAD/H,GAAZ,CAAf;AAGD,CALM;AAOP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMG,mBAAmB,GAAG,CAACC,MAAD,EAASL,KAAT,KAAmB;AACpD,QAAMM,MAAM,GAAG7B,aAAa,CAAC4B,MAAD,EAAS,kBAAT,CAA5B;;AACA,QAAME,0BAA0B,GAAGC,QAAQ,IAAI,CAAC,GAAGC,IAAJ,KAAa;AAC1D,QAAIT,KAAK,CAACE,YAAV,EAAwB;AACtBM,MAAAA,QAAQ,CAAC,GAAGC,IAAJ,CAAR;AACD;AACF,GAJD;;AAKA,QAAMC,qBAAqB,GAAGrC,KAAK,CAACsC,OAAN,CAAc,MAAM;AAChD,WAAOlB,0BAA0B,CAACO,KAAK,CAACG,iBAAP,EAA0BxB,6BAA6B,CAAC0B,MAAM,CAACO,OAAP,CAAeb,KAAhB,CAAvD,CAAjC;AACD,GAF6B,EAE3B,CAACM,MAAD,EAASL,KAAK,CAACG,iBAAf,CAF2B,CAA9B;AAGA,QAAMU,cAAc,GAAGxC,KAAK,CAACyC,MAAN,CAAa,IAAb,CAAvB;AACAT,EAAAA,MAAM,CAACO,OAAP,CAAeG,oBAAf,CAAoC;AAClCC,IAAAA,OAAO,EAAE,cADyB;AAElCC,IAAAA,SAAS,EAAEP,qBAFuB;AAGlCQ,IAAAA,YAAY,EAAElB,KAAK,CAACmB,yBAHc;AAIlCC,IAAAA,aAAa,EAAEzC,6BAJmB;AAKlC0C,IAAAA,WAAW,EAAE;AALqB,GAApC;AAOA,QAAM;AACJC,IAAAA,iBADI;AAEJC,IAAAA,2BAFI;AAGJC,IAAAA,0BAHI;AAIJC,IAAAA,eAAe,EAAEC;AAJb,MAKF1B,KALJ;AAMA,QAAM2B,wBAAwB,GAAG,CAACJ,2BAAD,IAAgCD,iBAAjE;AACA,QAAMM,WAAW,GAAGtC,kBAAkB,CAACe,MAAD,EAASL,KAAT,CAAtC;AACA,QAAM6B,4BAA4B,GAAGxD,KAAK,CAACyD,WAAN,CAAkBC,EAAE,IAAI;AAC3D,QAAIC,qBAAJ;;AACA,QAAIC,KAAK,GAAGF,EAAZ;AACA,UAAMG,OAAO,GAAG,CAACF,qBAAqB,GAAGnB,cAAc,CAACD,OAAxC,KAAoD,IAApD,GAA2DoB,qBAA3D,GAAmFD,EAAnG;AACA,UAAMI,UAAU,GAAG9B,MAAM,CAACO,OAAP,CAAewB,aAAf,CAA6BL,EAA7B,CAAnB;;AACA,QAAII,UAAJ,EAAgB;AACd,YAAME,aAAa,GAAGrD,gCAAgC,CAACqB,MAAD,CAAtD;AACA,YAAMiC,UAAU,GAAGD,aAAa,CAACE,SAAd,CAAwBC,KAAK,IAAIA,KAAK,KAAKN,OAA3C,CAAnB;AACA,YAAMO,QAAQ,GAAGJ,aAAa,CAACE,SAAd,CAAwBC,KAAK,IAAIA,KAAK,KAAKP,KAA3C,CAAjB;;AACA,UAAIK,UAAU,KAAKG,QAAnB,EAA6B;AAC3B;AACD;;AACD,UAAIH,UAAU,GAAGG,QAAjB,EAA2B;AACzBR,QAAAA,KAAK,GAAGI,aAAa,CAACI,QAAQ,GAAG,CAAZ,CAArB;AACD,OAFD,MAEO;AACLR,QAAAA,KAAK,GAAGI,aAAa,CAACI,QAAQ,GAAG,CAAZ,CAArB;AACD;AACF;;AACD5B,IAAAA,cAAc,CAACD,OAAf,GAAyBmB,EAAzB;AACA1B,IAAAA,MAAM,CAACO,OAAP,CAAe8B,cAAf,CAA8B;AAC5BR,MAAAA,OAD4B;AAE5BD,MAAAA;AAF4B,KAA9B,EAGG,CAACE,UAHJ;AAID,GAvBoC,EAuBlC,CAAC9B,MAAD,CAvBkC,CAArC;AAyBA;AACF;AACA;;AACE,QAAMsC,oBAAoB,GAAGtE,KAAK,CAACyD,WAAN,CAAkBc,KAAK,IAAI;AACtD,QAAI5C,KAAK,CAAC6C,SAAN,KAAoBvE,aAAa,CAACwE,QAAlC,IAA8C,CAAC9C,KAAK,CAACsB,iBAArD,IAA0E1B,KAAK,CAACC,OAAN,CAAc+C,KAAd,CAA1E,IAAkGA,KAAK,CAACG,MAAN,GAAe,CAArH,EAAwH;AACtH,YAAM,IAAIC,KAAJ,CAAU,CAAC,+DAAD,EAAkE,+FAAlE,EAAmKC,IAAnK,CAAwK,IAAxK,CAAV,CAAN;AACD;;AACD,UAAMC,YAAY,GAAGvE,6BAA6B,CAAC0B,MAAM,CAACO,OAAP,CAAeb,KAAhB,CAAlD;;AACA,QAAImD,YAAY,KAAKN,KAArB,EAA4B;AAC1BtC,MAAAA,MAAM,CAAC6C,KAAP,CAAc,yBAAd;AACA9C,MAAAA,MAAM,CAACO,OAAP,CAAewC,QAAf,CAAwBrD,KAAK,IAAI3B,QAAQ,CAAC,EAAD,EAAK2B,KAAL,EAAY;AACnDG,QAAAA,YAAY,EAAEF,KAAK,CAACE,YAAN,GAAqB0C,KAArB,GAA6B;AADQ,OAAZ,CAAzC;AAGAvC,MAAAA,MAAM,CAACO,OAAP,CAAeyC,WAAf;AACD;AACF,GAZ4B,EAY1B,CAAChD,MAAD,EAASC,MAAT,EAAiBN,KAAK,CAACE,YAAvB,EAAqCF,KAAK,CAAC6C,SAA3C,EAAsD7C,KAAK,CAACsB,iBAA5D,CAZ0B,CAA7B;AAaA,QAAMc,aAAa,GAAG/D,KAAK,CAACyD,WAAN,CAAkBC,EAAE,IAAIpD,6BAA6B,CAAC0B,MAAM,CAACO,OAAP,CAAeb,KAAhB,CAA7B,CAAoDuD,QAApD,CAA6DvB,EAA7D,CAAxB,EAA0F,CAAC1B,MAAD,CAA1F,CAAtB;AACA,QAAMoB,eAAe,GAAGpD,KAAK,CAACyD,WAAN,CAAkBC,EAAE,IAAI;AAC9C,QAAIL,mBAAmB,IAAI,CAACA,mBAAmB,CAACrB,MAAM,CAACO,OAAP,CAAe2C,YAAf,CAA4BxB,EAA5B,CAAD,CAA/C,EAAkF;AAChF,aAAO,KAAP;AACD;;AACD,UAAMyB,OAAO,GAAGnD,MAAM,CAACO,OAAP,CAAe6C,UAAf,CAA0B1B,EAA1B,CAAhB;;AACA,QAAI,CAACyB,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACE,IAApC,MAA8C,QAA9C,IAA0D,CAACF,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACE,IAApC,MAA8C,WAA5G,EAAyH;AACvH,aAAO,KAAP;AACD;;AACD,WAAO,IAAP;AACD,GATuB,EASrB,CAACrD,MAAD,EAASqB,mBAAT,CATqB,CAAxB;AAUA,QAAMiC,eAAe,GAAGtF,KAAK,CAACyD,WAAN,CAAkB,MAAMlD,wBAAwB,CAACyB,MAAD,CAAhD,EAA0D,CAACA,MAAD,CAA1D,CAAxB;AACA,QAAMuD,SAAS,GAAGvF,KAAK,CAACyD,WAAN,CAAkB,CAACC,EAAD,EAAKI,UAAU,GAAG,IAAlB,EAAwB0B,cAAc,GAAG,KAAzC,KAAmD;AACrF,QAAI,CAACxD,MAAM,CAACO,OAAP,CAAea,eAAf,CAA+BM,EAA/B,CAAL,EAAyC;AACvC;AACD;;AACDlB,IAAAA,cAAc,CAACD,OAAf,GAAyBmB,EAAzB;;AACA,QAAI8B,cAAJ,EAAoB;AAClBvD,MAAAA,MAAM,CAAC6C,KAAP,CAAc,6BAA4BpB,EAAG,EAA7C;AACA1B,MAAAA,MAAM,CAACO,OAAP,CAAe+B,oBAAf,CAAoCR,UAAU,GAAG,CAACJ,EAAD,CAAH,GAAU,EAAxD;AACD,KAHD,MAGO;AACLzB,MAAAA,MAAM,CAAC6C,KAAP,CAAc,8BAA6BpB,EAAG,EAA9C;AACA,YAAM+B,SAAS,GAAGnF,6BAA6B,CAAC0B,MAAM,CAACO,OAAP,CAAeb,KAAhB,CAA/C;AACA,YAAMgE,YAAY,GAAGD,SAAS,CAACE,MAAV,CAAiBC,EAAE,IAAIA,EAAE,KAAKlC,EAA9B,CAArB;;AACA,UAAII,UAAJ,EAAgB;AACd4B,QAAAA,YAAY,CAACG,IAAb,CAAkBnC,EAAlB;AACD;;AACD,YAAMoC,gBAAgB,GAAGJ,YAAY,CAAChB,MAAb,GAAsB,CAAtB,IAA2BpB,wBAApD;;AACA,UAAIwC,gBAAJ,EAAsB;AACpB9D,QAAAA,MAAM,CAACO,OAAP,CAAe+B,oBAAf,CAAoCoB,YAApC;AACD;AACF;AACF,GApBiB,EAoBf,CAAC1D,MAAD,EAASC,MAAT,EAAiBqB,wBAAjB,CApBe,CAAlB;AAqBA,QAAMyC,UAAU,GAAG/F,KAAK,CAACyD,WAAN,CAAkB,CAACuC,GAAD,EAAMlC,UAAU,GAAG,IAAnB,EAAyB0B,cAAc,GAAG,KAA1C,KAAoD;AACvFvD,IAAAA,MAAM,CAAC6C,KAAP,CAAc,oCAAd;AACA,UAAMmB,aAAa,GAAGD,GAAG,CAACL,MAAJ,CAAWjC,EAAE,IAAI1B,MAAM,CAACO,OAAP,CAAea,eAAf,CAA+BM,EAA/B,CAAjB,CAAtB;AACA,QAAIgC,YAAJ;;AACA,QAAIF,cAAJ,EAAoB;AAClBE,MAAAA,YAAY,GAAG5B,UAAU,GAAGmC,aAAH,GAAmB,EAA5C;AACD,KAFD,MAEO;AACL;AACA,YAAMC,eAAe,GAAGnG,QAAQ,CAAC,EAAD,EAAKS,yBAAyB,CAACwB,MAAD,CAA9B,CAAhC;;AACAiE,MAAAA,aAAa,CAACE,OAAd,CAAsBzC,EAAE,IAAI;AAC1B,YAAII,UAAJ,EAAgB;AACdoC,UAAAA,eAAe,CAACxC,EAAD,CAAf,GAAsBA,EAAtB;AACD,SAFD,MAEO;AACL,iBAAOwC,eAAe,CAACxC,EAAD,CAAtB;AACD;AACF,OAND;AAOAgC,MAAAA,YAAY,GAAGU,MAAM,CAACC,MAAP,CAAcH,eAAd,CAAf;AACD;;AACD,UAAMJ,gBAAgB,GAAGJ,YAAY,CAAChB,MAAb,GAAsB,CAAtB,IAA2BpB,wBAApD;;AACA,QAAIwC,gBAAJ,EAAsB;AACpB9D,MAAAA,MAAM,CAACO,OAAP,CAAe+B,oBAAf,CAAoCoB,YAApC;AACD;AACF,GAtBkB,EAsBhB,CAAC1D,MAAD,EAASC,MAAT,EAAiBqB,wBAAjB,CAtBgB,CAAnB;AAuBA,QAAMe,cAAc,GAAGrE,KAAK,CAACyD,WAAN,CAAkB,CAAC;AACxCI,IAAAA,OADwC;AAExCD,IAAAA;AAFwC,GAAD,EAGtCE,UAAU,GAAG,IAHyB,EAGnB0B,cAAc,GAAG,KAHE,KAGQ;AAC/C,QAAI,CAACxD,MAAM,CAACO,OAAP,CAAe+D,MAAf,CAAsBzC,OAAtB,CAAD,IAAmC,CAAC7B,MAAM,CAACO,OAAP,CAAe+D,MAAf,CAAsB1C,KAAtB,CAAxC,EAAsE;AACpE;AACD;;AACD3B,IAAAA,MAAM,CAAC6C,KAAP,CAAc,gCAA+BjB,OAAQ,WAAUD,KAAM,EAArE,EAJ+C,CAM/C;;AACA,UAAM2C,cAAc,GAAG5F,gCAAgC,CAACqB,MAAD,CAAvD;AACA,UAAMiC,UAAU,GAAGsC,cAAc,CAACC,OAAf,CAAuB3C,OAAvB,CAAnB;AACA,UAAMO,QAAQ,GAAGmC,cAAc,CAACC,OAAf,CAAuB5C,KAAvB,CAAjB;AACA,UAAM,CAAC6C,KAAD,EAAQC,GAAR,IAAezC,UAAU,GAAGG,QAAb,GAAwB,CAACA,QAAD,EAAWH,UAAX,CAAxB,GAAiD,CAACA,UAAD,EAAaG,QAAb,CAAtE;AACA,UAAMuC,sBAAsB,GAAGJ,cAAc,CAACK,KAAf,CAAqBH,KAArB,EAA4BC,GAAG,GAAG,CAAlC,CAA/B;AACA1E,IAAAA,MAAM,CAACO,OAAP,CAAewD,UAAf,CAA0BY,sBAA1B,EAAkD7C,UAAlD,EAA8D0B,cAA9D;AACD,GAhBsB,EAgBpB,CAACxD,MAAD,EAASC,MAAT,CAhBoB,CAAvB;AAiBA,QAAM4E,kBAAkB,GAAG;AACzBtB,IAAAA,SADyB;AAEzBjB,IAAAA,oBAFyB;AAGzBgB,IAAAA,eAHyB;AAIzBvB,IAAAA,aAJyB;AAKzBX,IAAAA;AALyB,GAA3B;AAOA,QAAM0D,mBAAmB,GAAG;AAC1Bf,IAAAA,UAD0B;AAE1B1B,IAAAA;AAF0B,GAA5B;AAIAlE,EAAAA,gBAAgB,CAAC6B,MAAD,EAAS6E,kBAAT,EAA6B,QAA7B,CAAhB;AACA1G,EAAAA,gBAAgB,CAAC6B,MAAD,EAAS8E,mBAAT,EAA8BnF,KAAK,CAAC6C,SAAN,KAAoBvE,aAAa,CAACwE,QAAlC,GAA6C,SAA7C,GAAyD,QAAvF,CAAhB;AAEA;AACF;AACA;;AACE,QAAMsC,uBAAuB,GAAG/G,KAAK,CAACyD,WAAN,CAAkB,MAAM;AACtD,QAAI9B,KAAK,CAACqF,2BAAV,EAAuC;AACrC;AACD;;AACD,UAAMC,gBAAgB,GAAG3G,6BAA6B,CAAC0B,MAAM,CAACO,OAAP,CAAeb,KAAhB,CAAtD;AACA,UAAMwF,UAAU,GAAG7G,sBAAsB,CAAC2B,MAAD,CAAzC,CALsD,CAOtD;;AACA,UAAMkE,eAAe,GAAGnG,QAAQ,CAAC,EAAD,EAAKS,yBAAyB,CAACwB,MAAD,CAA9B,CAAhC;;AACA,QAAImF,UAAU,GAAG,KAAjB;AACAF,IAAAA,gBAAgB,CAACd,OAAjB,CAAyBzC,EAAE,IAAI;AAC7B,UAAI,CAACwD,UAAU,CAACxD,EAAD,CAAf,EAAqB;AACnB,eAAOwC,eAAe,CAACxC,EAAD,CAAtB;AACAyD,QAAAA,UAAU,GAAG,IAAb;AACD;AACF,KALD;;AAMA,QAAIA,UAAJ,EAAgB;AACdnF,MAAAA,MAAM,CAACO,OAAP,CAAe+B,oBAAf,CAAoC8B,MAAM,CAACC,MAAP,CAAcH,eAAd,CAApC;AACD;AACF,GAnB+B,EAmB7B,CAAClE,MAAD,EAASL,KAAK,CAACqF,2BAAf,CAnB6B,CAAhC;AAoBA,QAAMI,wBAAwB,GAAGpH,KAAK,CAACyD,WAAN,CAAkB,CAACC,EAAD,EAAK2D,KAAL,KAAe;AAChE,UAAMC,UAAU,GAAGD,KAAK,CAACE,OAAN,IAAiBF,KAAK,CAACG,OAA1C,CADgE,CAGhE;AACA;AACA;AACA;;AAEA,UAAMC,2BAA2B,GAAG,CAACxE,iBAAD,IAAsB,CAACqE,UAAvB,IAAqC,CAACvG,eAAe,CAACsG,KAAD,CAAzF;AACA,UAAM7B,cAAc,GAAG,CAAClC,wBAAD,IAA6BmE,2BAApD;AACA,UAAM3D,UAAU,GAAG9B,MAAM,CAACO,OAAP,CAAewB,aAAf,CAA6BL,EAA7B,CAAnB;;AACA,QAAI8B,cAAJ,EAAoB;AAClBxD,MAAAA,MAAM,CAACO,OAAP,CAAegD,SAAf,CAAyB7B,EAAzB,EAA6B,CAAC+D,2BAAD,GAA+B,CAAC3D,UAAhC,GAA6C,IAA1E,EAAgF,IAAhF;AACD,KAFD,MAEO;AACL9B,MAAAA,MAAM,CAACO,OAAP,CAAegD,SAAf,CAAyB7B,EAAzB,EAA6B,CAACI,UAA9B,EAA0C,KAA1C;AACD;AACF,GAhBgC,EAgB9B,CAAC9B,MAAD,EAASsB,wBAAT,EAAmCL,iBAAnC,CAhB8B,CAAjC;AAiBA,QAAMyE,cAAc,GAAG1H,KAAK,CAACyD,WAAN,CAAkB,CAACkE,MAAD,EAASN,KAAT,KAAmB;AAC1D,QAAIO,QAAJ;;AACA,QAAIzE,0BAAJ,EAAgC;AAC9B;AACD;;AACD,UAAM0E,KAAK,GAAG,CAACD,QAAQ,GAAGP,KAAK,CAACS,MAAN,CAAaC,OAAb,CAAsB,IAAG5G,WAAW,CAAC6G,IAAK,EAA1C,CAAZ,KAA6D,IAA7D,GAAoE,KAAK,CAAzE,GAA6EJ,QAAQ,CAACK,YAAT,CAAsB,YAAtB,CAA3F;;AACA,QAAIJ,KAAK,KAAKjH,+BAA+B,CAACiH,KAA9C,EAAqD;AACnD;AACA;AACD;;AACD,QAAIA,KAAK,KAAK3G,8BAAd,EAA8C;AAC5C;AACA;AACD;;AACD,QAAI2G,KAAJ,EAAW;AACT,YAAMK,MAAM,GAAGlG,MAAM,CAACO,OAAP,CAAe4F,SAAf,CAAyBN,KAAzB,CAAf;;AACA,UAAIK,MAAM,CAAC7C,IAAP,KAAgBxE,wBAApB,EAA8C;AAC5C;AACD;AACF;;AACD,UAAMsE,OAAO,GAAGnD,MAAM,CAACO,OAAP,CAAe6C,UAAf,CAA0BuC,MAAM,CAACjE,EAAjC,CAAhB;;AACA,QAAIyB,OAAO,CAACE,IAAR,KAAiB,WAArB,EAAkC;AAChC;AACD;;AACD,QAAIgC,KAAK,CAACe,QAAN,KAAmB9E,wBAAwB,IAAIL,iBAA/C,CAAJ,EAAuE;AACrEO,MAAAA,4BAA4B,CAACmE,MAAM,CAACjE,EAAR,CAA5B;AACD,KAFD,MAEO;AACL0D,MAAAA,wBAAwB,CAACO,MAAM,CAACjE,EAAR,EAAY2D,KAAZ,CAAxB;AACD;AACF,GA7BsB,EA6BpB,CAAClE,0BAAD,EAA6BG,wBAA7B,EAAuDL,iBAAvD,EAA0EjB,MAA1E,EAAkFwB,4BAAlF,EAAgH4D,wBAAhH,CA7BoB,CAAvB;AA8BA,QAAMiB,uBAAuB,GAAGrI,KAAK,CAACyD,WAAN,CAAkB,CAACkE,MAAD,EAASN,KAAT,KAAmB;AACnE,QAAI/D,wBAAwB,IAAI+D,KAAK,CAACe,QAAtC,EAAgD;AAC9C,UAAIE,oBAAJ;;AACA,OAACA,oBAAoB,GAAGC,MAAM,CAACC,YAAP,EAAxB,KAAkD,IAAlD,GAAyD,KAAK,CAA9D,GAAkEF,oBAAoB,CAACG,eAArB,EAAlE;AACD;AACF,GAL+B,EAK7B,CAACnF,wBAAD,CAL6B,CAAhC;AAMA,QAAMoF,gCAAgC,GAAG1I,KAAK,CAACyD,WAAN,CAAkB,CAACkE,MAAD,EAASN,KAAT,KAAmB;AAC5E,QAAIA,KAAK,CAACsB,WAAN,CAAkBP,QAAtB,EAAgC;AAC9B5E,MAAAA,4BAA4B,CAACmE,MAAM,CAACjE,EAAR,CAA5B;AACD,KAFD,MAEO;AACL1B,MAAAA,MAAM,CAACO,OAAP,CAAegD,SAAf,CAAyBoC,MAAM,CAACjE,EAAhC,EAAoCiE,MAAM,CAACiB,KAA3C;AACD;AACF,GANwC,EAMtC,CAAC5G,MAAD,EAASwB,4BAAT,CANsC,CAAzC;AAOA,QAAMqF,mCAAmC,GAAG7I,KAAK,CAACyD,WAAN,CAAkBkE,MAAM,IAAI;AACtE,UAAMmB,iCAAiC,GAAGnH,KAAK,CAACoH,4BAAN,IAAsCpH,KAAK,CAACqH,UAAtF;AACA,UAAMC,gBAAgB,GAAGH,iCAAiC,GAAGrI,4CAA4C,CAACuB,MAAD,CAA/C,GAA0DrB,gCAAgC,CAACqB,MAAD,CAApJ;AACAA,IAAAA,MAAM,CAACO,OAAP,CAAewD,UAAf,CAA0BkD,gBAA1B,EAA4CtB,MAAM,CAACiB,KAAnD;AACD,GAJ2C,EAIzC,CAAC5G,MAAD,EAASL,KAAK,CAACoH,4BAAf,EAA6CpH,KAAK,CAACqH,UAAnD,CAJyC,CAA5C;AAKA,QAAME,iBAAiB,GAAGlJ,KAAK,CAACyD,WAAN,CAAkB,CAACkE,MAAD,EAASN,KAAT,KAAmB;AAC7D;AACA,QAAIrF,MAAM,CAACO,OAAP,CAAe4G,WAAf,CAA2BxB,MAAM,CAACjE,EAAlC,EAAsCiE,MAAM,CAACE,KAA7C,MAAwD/G,aAAa,CAACsI,IAA1E,EAAgF;AAC9E;AACD,KAJ4D,CAM7D;AACA;;;AACA,QAAI,CAAC/B,KAAK,CAACgC,aAAN,CAAoBC,QAApB,CAA6BjC,KAAK,CAACS,MAAnC,CAAL,EAAiD;AAC/C;AACD;;AACD,QAAI9G,eAAe,CAACqG,KAAK,CAACkC,GAAP,CAAf,IAA8BlC,KAAK,CAACe,QAAxC,EAAkD;AAChD;AACA,YAAMoB,SAAS,GAAG9I,qBAAqB,CAACsB,MAAD,CAAvC;;AACA,UAAIwH,SAAS,IAAIA,SAAS,CAAC9F,EAAV,KAAiBiE,MAAM,CAACjE,EAAzC,EAA6C;AAC3C2D,QAAAA,KAAK,CAACoC,cAAN;AACA,cAAMC,iBAAiB,GAAG1H,MAAM,CAACO,OAAP,CAAewB,aAAf,CAA6ByF,SAAS,CAAC9F,EAAvC,CAA1B;;AACA,YAAI,CAACJ,wBAAL,EAA+B;AAC7BtB,UAAAA,MAAM,CAACO,OAAP,CAAegD,SAAf,CAAyBiE,SAAS,CAAC9F,EAAnC,EAAuC,CAACgG,iBAAxC,EAA2D,IAA3D;AACA;AACD;;AACD,cAAMC,WAAW,GAAG3H,MAAM,CAACO,OAAP,CAAeqH,gCAAf,CAAgDJ,SAAS,CAAC9F,EAA1D,CAApB;AACA,cAAMmG,gBAAgB,GAAG7H,MAAM,CAACO,OAAP,CAAeqH,gCAAf,CAAgDjC,MAAM,CAACjE,EAAvD,CAAzB;AACA,YAAI+C,KAAJ;AACA,YAAIC,GAAJ;;AACA,YAAIiD,WAAW,GAAGE,gBAAlB,EAAoC;AAClC,cAAIH,iBAAJ,EAAuB;AACrB;AACAjD,YAAAA,KAAK,GAAGoD,gBAAR;AACAnD,YAAAA,GAAG,GAAGiD,WAAW,GAAG,CAApB;AACD,WAJD,MAIO;AACL;AACAlD,YAAAA,KAAK,GAAGoD,gBAAR;AACAnD,YAAAA,GAAG,GAAGiD,WAAN;AACD;AACF,SAVD,MAUO;AACL;AACA,cAAID,iBAAJ,EAAuB;AACrB;AACAjD,YAAAA,KAAK,GAAGkD,WAAW,GAAG,CAAtB;AACAjD,YAAAA,GAAG,GAAGmD,gBAAN;AACD,WAJD,MAIO;AACL;AACApD,YAAAA,KAAK,GAAGkD,WAAR;AACAjD,YAAAA,GAAG,GAAGmD,gBAAN;AACD;AACF;;AACD,cAAMlD,sBAAsB,GAAGpD,WAAW,CAACuG,IAAZ,CAAiBlD,KAAjB,CAAuBH,KAAvB,EAA8BC,GAAG,GAAG,CAApC,EAAuCqD,GAAvC,CAA2CC,GAAG,IAAIA,GAAG,CAACtG,EAAtD,CAA/B;AACA1B,QAAAA,MAAM,CAACO,OAAP,CAAewD,UAAf,CAA0BY,sBAA1B,EAAkD,CAAC+C,iBAAnD;AACA;AACD;AACF;;AACD,QAAIrC,KAAK,CAACkC,GAAN,KAAc,GAAd,IAAqBlC,KAAK,CAACe,QAA/B,EAAyC;AACvCf,MAAAA,KAAK,CAACoC,cAAN;AACArC,MAAAA,wBAAwB,CAACO,MAAM,CAACjE,EAAR,EAAY2D,KAAZ,CAAxB;AACA;AACD;;AACD,QAAIA,KAAK,CAACkC,GAAN,KAAc,GAAd,KAAsBlC,KAAK,CAACG,OAAN,IAAiBH,KAAK,CAACE,OAA7C,CAAJ,EAA2D;AACzDF,MAAAA,KAAK,CAACoC,cAAN;AACA1D,MAAAA,UAAU,CAAC/D,MAAM,CAACO,OAAP,CAAe0H,YAAf,EAAD,EAAgC,IAAhC,CAAV;AACD;AACF,GA7DyB,EA6DvB,CAACjI,MAAD,EAASoF,wBAAT,EAAmCrB,UAAnC,EAA+CxC,WAAW,CAACuG,IAA3D,EAAiExG,wBAAjE,CA7DuB,CAA1B;AA8DApD,EAAAA,sBAAsB,CAAC8B,MAAD,EAAS,eAAT,EAA0BE,0BAA0B,CAAC6E,uBAAD,CAApD,CAAtB;AACA7G,EAAAA,sBAAsB,CAAC8B,MAAD,EAAS,UAAT,EAAqBE,0BAA0B,CAACwF,cAAD,CAA/C,CAAtB;AACAxH,EAAAA,sBAAsB,CAAC8B,MAAD,EAAS,4BAAT,EAAuCE,0BAA0B,CAACwG,gCAAD,CAAjE,CAAtB;AACAxI,EAAAA,sBAAsB,CAAC8B,MAAD,EAAS,+BAAT,EAA0C6G,mCAA1C,CAAtB;AACA3I,EAAAA,sBAAsB,CAAC8B,MAAD,EAAS,eAAT,EAA0BE,0BAA0B,CAACmG,uBAAD,CAApD,CAAtB;AACAnI,EAAAA,sBAAsB,CAAC8B,MAAD,EAAS,aAAT,EAAwBE,0BAA0B,CAACgH,iBAAD,CAAlD,CAAtB;AAEA;AACF;AACA;;AACElJ,EAAAA,KAAK,CAACkK,SAAN,CAAgB,MAAM;AACpB,QAAI7H,qBAAqB,KAAK8H,SAA9B,EAAyC;AACvCnI,MAAAA,MAAM,CAACO,OAAP,CAAe+B,oBAAf,CAAoCjC,qBAApC;AACD;AACF,GAJD,EAIG,CAACL,MAAD,EAASK,qBAAT,EAAgCV,KAAK,CAACE,YAAtC,CAJH;AAKA7B,EAAAA,KAAK,CAACkK,SAAN,CAAgB,MAAM;AACpB,QAAI,CAACvI,KAAK,CAACE,YAAX,EAAyB;AACvBG,MAAAA,MAAM,CAACO,OAAP,CAAe+B,oBAAf,CAAoC,EAApC;AACD;AACF,GAJD,EAIG,CAACtC,MAAD,EAASL,KAAK,CAACE,YAAf,CAJH;AAKA,QAAMuI,iBAAiB,GAAG/H,qBAAqB,IAAI,IAAnD;AACArC,EAAAA,KAAK,CAACkK,SAAN,CAAgB,MAAM;AACpB,QAAIE,iBAAiB,IAAI,CAACzI,KAAK,CAACE,YAAhC,EAA8C;AAC5C;AACD,KAHmB,CAKpB;;;AACA,UAAMoF,gBAAgB,GAAG3G,6BAA6B,CAAC0B,MAAM,CAACO,OAAP,CAAeb,KAAhB,CAAtD;;AACA,QAAI0B,eAAJ,EAAqB;AACnB,YAAMsC,YAAY,GAAGuB,gBAAgB,CAACtB,MAAjB,CAAwBjC,EAAE,IAAIN,eAAe,CAACM,EAAD,CAA7C,CAArB;;AACA,UAAIgC,YAAY,CAAChB,MAAb,GAAsBuC,gBAAgB,CAACvC,MAA3C,EAAmD;AACjD1C,QAAAA,MAAM,CAACO,OAAP,CAAe+B,oBAAf,CAAoCoB,YAApC;AACD;AACF;AACF,GAbD,EAaG,CAAC1D,MAAD,EAASoB,eAAT,EAA0BgH,iBAA1B,EAA6CzI,KAAK,CAACE,YAAnD,CAbH;AAcA7B,EAAAA,KAAK,CAACkK,SAAN,CAAgB,MAAM;AACpB,QAAI,CAACvI,KAAK,CAACE,YAAP,IAAuBuI,iBAA3B,EAA8C;AAC5C;AACD;;AACD,UAAMnD,gBAAgB,GAAG3G,6BAA6B,CAAC0B,MAAM,CAACO,OAAP,CAAeb,KAAhB,CAAtD;;AACA,QAAI,CAAC4B,wBAAD,IAA6B2D,gBAAgB,CAACvC,MAAjB,GAA0B,CAA3D,EAA8D;AAC5D;AACA1C,MAAAA,MAAM,CAACO,OAAP,CAAe+B,oBAAf,CAAoC,EAApC;AACD;AACF,GATD,EASG,CAACtC,MAAD,EAASsB,wBAAT,EAAmCL,iBAAnC,EAAsDmH,iBAAtD,EAAyEzI,KAAK,CAACE,YAA/E,CATH;AAUD,CA7VM","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowsLookupSelector } from '../rows/gridRowsSelector';\nimport { gridRowSelectionStateSelector, selectedGridRowsSelector, selectedIdsLookupSelector } from './gridRowSelectionSelector';\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from '../pagination';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { gridExpandedSortedRowIdsSelector } from '../filter/gridFilterSelector';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from '../../../colDef';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isKeyboardEvent, isNavigationKey } from '../../../utils/keyboardUtils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridClasses } from '../../../constants/gridClasses';\nconst getSelectionModelPropValue = (selectionModelProp, prevSelectionModel) => {\n  if (selectionModelProp == null) {\n    return selectionModelProp;\n  }\n  if (Array.isArray(selectionModelProp)) {\n    return selectionModelProp;\n  }\n  if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {\n    return prevSelectionModel;\n  }\n  return [selectionModelProp];\n};\nexport const rowSelectionStateInitializer = (state, props) => {\n  var _getSelectionModelPro;\n  return _extends({}, state, {\n    rowSelection: props.rowSelection ? (_getSelectionModelPro = getSelectionModelPropValue(props.rowSelectionModel)) != null ? _getSelectionModelPro : [] : []\n  });\n};\n\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\nexport const useGridRowSelection = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n  const runIfRowSelectionIsEnabled = callback => (...args) => {\n    if (props.rowSelection) {\n      callback(...args);\n    }\n  };\n  const propRowSelectionModel = React.useMemo(() => {\n    return getSelectionModelPropValue(props.rowSelectionModel, gridRowSelectionStateSelector(apiRef.current.state));\n  }, [apiRef, props.rowSelectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.registerControlState({\n    stateId: 'rowSelection',\n    propModel: propRowSelectionModel,\n    propOnChange: props.onRowSelectionModelChange,\n    stateSelector: gridRowSelectionStateSelector,\n    changeEvent: 'rowSelectionChange'\n  });\n  const {\n    checkboxSelection,\n    disableMultipleRowSelection,\n    disableRowSelectionOnClick,\n    isRowSelectable: propIsRowSelectable\n  } = props;\n  const canHaveMultipleSelection = !disableMultipleRowSelection || checkboxSelection;\n  const visibleRows = useGridVisibleRows(apiRef, props);\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    var _lastRowToggled$curre;\n    let endId = id;\n    const startId = (_lastRowToggled$curre = lastRowToggled.current) != null ? _lastRowToggled$curre : id;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (isSelected) {\n      const visibleRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n      if (startIndex === endIndex) {\n        return;\n      }\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n\n  /**\n   * API METHODS\n   */\n  const setRowSelectionModel = React.useCallback(model => {\n    if (props.signature === GridSignature.DataGrid && !props.checkboxSelection && Array.isArray(model) && model.length > 1) {\n      throw new Error(['MUI: `rowSelectionModel` can only contain 1 item in DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection.'].join('\\n'));\n    }\n    const currentModel = gridRowSelectionStateSelector(apiRef.current.state);\n    if (currentModel !== model) {\n      logger.debug(`Setting selection model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        rowSelection: props.rowSelection ? model : []\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger, props.rowSelection, props.signature, props.checkboxSelection]);\n  const isRowSelected = React.useCallback(id => gridRowSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);\n  const isRowSelectable = React.useCallback(id => {\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n    const rowNode = apiRef.current.getRowNode(id);\n    if ((rowNode == null ? void 0 : rowNode.type) === 'footer' || (rowNode == null ? void 0 : rowNode.type) === 'pinnedRow') {\n      return false;\n    }\n    return true;\n  }, [apiRef, propIsRowSelectable]);\n  const getSelectedRows = React.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback((id, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n    lastRowToggled.current = id;\n    if (resetSelection) {\n      logger.debug(`Setting selection for row ${id}`);\n      apiRef.current.setRowSelectionModel(isSelected ? [id] : []);\n    } else {\n      logger.debug(`Toggling selection for row ${id}`);\n      const selection = gridRowSelectionStateSelector(apiRef.current.state);\n      const newSelection = selection.filter(el => el !== id);\n      if (isSelected) {\n        newSelection.push(id);\n      }\n      const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n      if (isSelectionValid) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRows = React.useCallback((ids, isSelected = true, resetSelection = false) => {\n    logger.debug(`Setting selection for several rows`);\n    const selectableIds = ids.filter(id => apiRef.current.isRowSelectable(id));\n    let newSelection;\n    if (resetSelection) {\n      newSelection = isSelected ? selectableIds : [];\n    } else {\n      // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n      const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n      selectableIds.forEach(id => {\n        if (isSelected) {\n          selectionLookup[id] = id;\n        } else {\n          delete selectionLookup[id];\n        }\n      });\n      newSelection = Object.values(selectionLookup);\n    }\n    const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;\n    if (isSelectionValid) {\n      apiRef.current.setRowSelectionModel(newSelection);\n    }\n  }, [apiRef, logger, canHaveMultipleSelection]);\n  const selectRowRange = React.useCallback(({\n    startId,\n    endId\n  }, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n    logger.debug(`Expanding selection from row ${startId} to row ${endId}`);\n\n    // Using rows from all pages allow to select a range across several pages\n    const allPagesRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionPublicApi = {\n    selectRow,\n    setRowSelectionModel,\n    getSelectedRows,\n    isRowSelected,\n    isRowSelectable\n  };\n  const selectionPrivateApi = {\n    selectRows,\n    selectRowRange\n  };\n  useGridApiMethod(apiRef, selectionPublicApi, 'public');\n  useGridApiMethod(apiRef, selectionPrivateApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /**\n   * EVENTS\n   */\n  const removeOutdatedSelection = React.useCallback(() => {\n    if (props.keepNonExistentRowsSelected) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    const rowsLookup = gridRowsLookupSelector(apiRef);\n\n    // We clone the existing object to avoid mutating the same object returned by the selector to others part of the project\n    const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));\n    let hasChanged = false;\n    currentSelection.forEach(id => {\n      if (!rowsLookup[id]) {\n        delete selectionLookup[id];\n        hasChanged = true;\n      }\n    });\n    if (hasChanged) {\n      apiRef.current.setRowSelectionModel(Object.values(selectionLookup));\n    }\n  }, [apiRef, props.keepNonExistentRowsSelected]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey;\n\n    // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (resetSelection) {\n      apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);\n    } else {\n      apiRef.current.selectRow(id, !isSelected, false);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleRowClick = React.useCallback((params, event) => {\n    var _closest;\n    if (disableRowSelectionOnClick) {\n      return;\n    }\n    const field = (_closest = event.target.closest(`.${gridClasses.cell}`)) == null ? void 0 : _closest.getAttribute('data-field');\n    if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n    if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n    if (field) {\n      const column = apiRef.current.getColumn(field);\n      if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    const rowNode = apiRef.current.getRowNode(params.id);\n    if (rowNode.type === 'pinnedRow') {\n      return;\n    }\n    if (event.shiftKey && (canHaveMultipleSelection || checkboxSelection)) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableRowSelectionOnClick, canHaveMultipleSelection, checkboxSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      var _window$getSelection;\n      (_window$getSelection = window.getSelection()) == null ? void 0 : _window$getSelection.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value);\n    }\n  }, [apiRef, expandMouseRowRangeSelection]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    const shouldLimitSelectionToCurrentPage = props.checkboxSelectionVisibleOnly && props.pagination;\n    const rowsToBeSelected = shouldLimitSelectionToCurrentPage ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridExpandedSortedRowIdsSelector(apiRef);\n    apiRef.current.selectRows(rowsToBeSelected, params.value);\n  }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    }\n\n    // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = gridFocusCellSelector(apiRef);\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n        const rowsBetweenStartAndEnd = visibleRows.rows.slice(start, end + 1).map(row => row.id);\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n    if (event.key === 'a' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      selectRows(apiRef.current.getAllRowIds(), true);\n    }\n  }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);\n  useGridApiEventHandler(apiRef, 'sortedRowsSet', runIfRowSelectionIsEnabled(removeOutdatedSelection));\n  useGridApiEventHandler(apiRef, 'rowClick', runIfRowSelectionIsEnabled(handleRowClick));\n  useGridApiEventHandler(apiRef, 'rowSelectionCheckboxChange', runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange));\n  useGridApiEventHandler(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  useGridApiEventHandler(apiRef, 'cellMouseDown', runIfRowSelectionIsEnabled(preventSelectionOnShift));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfRowSelectionIsEnabled(handleCellKeyDown));\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    if (propRowSelectionModel !== undefined) {\n      apiRef.current.setRowSelectionModel(propRowSelectionModel);\n    }\n  }, [apiRef, propRowSelectionModel, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection) {\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, props.rowSelection]);\n  const isStateControlled = propRowSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled || !props.rowSelection) {\n      return;\n    }\n\n    // props.isRowSelectable changed\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    if (isRowSelectable) {\n      const newSelection = currentSelection.filter(id => isRowSelectable(id));\n      if (newSelection.length < currentSelection.length) {\n        apiRef.current.setRowSelectionModel(newSelection);\n      }\n    }\n  }, [apiRef, isRowSelectable, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection || isStateControlled) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);\n    if (!canHaveMultipleSelection && currentSelection.length > 1) {\n      // See https://github.com/mui/mui-x/issues/8455\n      apiRef.current.setRowSelectionModel([]);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, isStateControlled, props.rowSelection]);\n};"]},"metadata":{},"sourceType":"module"}