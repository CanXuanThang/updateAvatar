{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"groupId\", \"children\"];\nimport * as React from 'react';\nimport { isLeaf } from '../../../models/gridColumnGrouping';\nimport { gridColumnGroupsLookupSelector, gridColumnGroupsUnwrappedModelSelector } from './gridColumnGroupsSelector';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { getColumnGroupsHeaderStructure, unwrapGroupingColumnModel } from './gridColumnGroupsUtils';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { gridColumnFieldsSelector, gridVisibleColumnFieldsSelector } from '../columns';\n\nconst createGroupLookup = columnGroupingModel => {\n  let groupLookup = {};\n  columnGroupingModel.forEach(node => {\n    if (isLeaf(node)) {\n      return;\n    }\n\n    const {\n      groupId,\n      children\n    } = node,\n          other = _objectWithoutPropertiesLoose(node, _excluded);\n\n    if (!groupId) {\n      throw new Error('MUI: An element of the columnGroupingModel does not have either `field` or `groupId`.');\n    }\n\n    if (!children) {\n      console.warn(`MUI: group groupId=${groupId} has no children.`);\n    }\n\n    const groupParam = _extends({}, other, {\n      groupId\n    });\n\n    const subTreeLookup = createGroupLookup(children);\n\n    if (subTreeLookup[groupId] !== undefined || groupLookup[groupId] !== undefined) {\n      throw new Error(`MUI: The groupId ${groupId} is used multiple times in the columnGroupingModel.`);\n    }\n\n    groupLookup = _extends({}, groupLookup, subTreeLookup, {\n      [groupId]: groupParam\n    });\n  });\n  return _extends({}, groupLookup);\n};\n\nexport const columnGroupsStateInitializer = (state, props, apiRef) => {\n  var _props$experimentalFe, _props$columnGrouping, _props$columnGrouping2;\n\n  if (!((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.columnGrouping)) {\n    return state;\n  }\n\n  const columnFields = gridColumnFieldsSelector(apiRef);\n  const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef);\n  const groupLookup = createGroupLookup((_props$columnGrouping = props.columnGroupingModel) != null ? _props$columnGrouping : []);\n  const unwrappedGroupingModel = unwrapGroupingColumnModel((_props$columnGrouping2 = props.columnGroupingModel) != null ? _props$columnGrouping2 : []);\n  const columnGroupsHeaderStructure = getColumnGroupsHeaderStructure(columnFields, unwrappedGroupingModel);\n  const maxDepth = visibleColumnFields.length === 0 ? 0 : Math.max(...visibleColumnFields.map(field => {\n    var _unwrappedGroupingMod, _unwrappedGroupingMod2;\n\n    return (_unwrappedGroupingMod = (_unwrappedGroupingMod2 = unwrappedGroupingModel[field]) == null ? void 0 : _unwrappedGroupingMod2.length) != null ? _unwrappedGroupingMod : 0;\n  }));\n  return _extends({}, state, {\n    columnGrouping: {\n      lookup: groupLookup,\n      unwrappedGroupingModel,\n      headerStructure: columnGroupsHeaderStructure,\n      maxDepth\n    }\n  });\n};\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n */\n\nexport const useGridColumnGrouping = (apiRef, props) => {\n  var _props$experimentalFe3;\n  /**\n   * API METHODS\n   */\n\n\n  const getColumnGroupPath = React.useCallback(field => {\n    var _unwrappedGroupingMod3;\n\n    const unwrappedGroupingModel = gridColumnGroupsUnwrappedModelSelector(apiRef);\n    return (_unwrappedGroupingMod3 = unwrappedGroupingModel[field]) != null ? _unwrappedGroupingMod3 : [];\n  }, [apiRef]);\n  const getAllGroupDetails = React.useCallback(() => {\n    const columnGroupLookup = gridColumnGroupsLookupSelector(apiRef);\n    return columnGroupLookup;\n  }, [apiRef]);\n  const columnGroupingApi = {\n    unstable_getColumnGroupPath: getColumnGroupPath,\n    unstable_getAllGroupDetails: getAllGroupDetails\n  };\n  useGridApiMethod(apiRef, columnGroupingApi, 'public');\n  const handleColumnIndexChange = React.useCallback(() => {\n    var _props$columnGrouping3;\n\n    const unwrappedGroupingModel = unwrapGroupingColumnModel((_props$columnGrouping3 = props.columnGroupingModel) != null ? _props$columnGrouping3 : []);\n    apiRef.current.setState(state => {\n      var _state$columns$ordere, _state$columns;\n\n      const orderedFields = (_state$columns$ordere = (_state$columns = state.columns) == null ? void 0 : _state$columns.orderedFields) != null ? _state$columns$ordere : [];\n      const columnGroupsHeaderStructure = getColumnGroupsHeaderStructure(orderedFields, unwrappedGroupingModel);\n      return _extends({}, state, {\n        columnGrouping: _extends({}, state.columnGrouping, {\n          headerStructure: columnGroupsHeaderStructure\n        })\n      });\n    });\n  }, [apiRef, props.columnGroupingModel]);\n  const updateColumnGroupingState = React.useCallback(columnGroupingModel => {\n    var _props$experimentalFe2;\n\n    if (!((_props$experimentalFe2 = props.experimentalFeatures) != null && _props$experimentalFe2.columnGrouping)) {\n      return;\n    }\n\n    const columnFields = gridColumnFieldsSelector(apiRef);\n    const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef);\n    const groupLookup = createGroupLookup(columnGroupingModel != null ? columnGroupingModel : []);\n    const unwrappedGroupingModel = unwrapGroupingColumnModel(columnGroupingModel != null ? columnGroupingModel : []);\n    const columnGroupsHeaderStructure = getColumnGroupsHeaderStructure(columnFields, unwrappedGroupingModel);\n    const maxDepth = visibleColumnFields.length === 0 ? 0 : Math.max(...visibleColumnFields.map(field => {\n      var _unwrappedGroupingMod4, _unwrappedGroupingMod5;\n\n      return (_unwrappedGroupingMod4 = (_unwrappedGroupingMod5 = unwrappedGroupingModel[field]) == null ? void 0 : _unwrappedGroupingMod5.length) != null ? _unwrappedGroupingMod4 : 0;\n    }));\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        columnGrouping: {\n          lookup: groupLookup,\n          unwrappedGroupingModel,\n          headerStructure: columnGroupsHeaderStructure,\n          maxDepth\n        }\n      });\n    });\n  }, [apiRef, (_props$experimentalFe3 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe3.columnGrouping]);\n  useGridApiEventHandler(apiRef, 'columnIndexChange', handleColumnIndexChange);\n  useGridApiEventHandler(apiRef, 'columnsChange', () => {\n    updateColumnGroupingState(props.columnGroupingModel);\n  });\n  useGridApiEventHandler(apiRef, 'columnVisibilityModelChange', () => {\n    updateColumnGroupingState(props.columnGroupingModel);\n  });\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    updateColumnGroupingState(props.columnGroupingModel);\n  }, [updateColumnGroupingState, props.columnGroupingModel]);\n};","map":{"version":3,"sources":["C:/Users/thang/Downloads/Code structure/node_modules/@mui/x-data-grid/hooks/features/columnGrouping/useGridColumnGrouping.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","isLeaf","gridColumnGroupsLookupSelector","gridColumnGroupsUnwrappedModelSelector","useGridApiMethod","getColumnGroupsHeaderStructure","unwrapGroupingColumnModel","useGridApiEventHandler","gridColumnFieldsSelector","gridVisibleColumnFieldsSelector","createGroupLookup","columnGroupingModel","groupLookup","forEach","node","groupId","children","other","Error","console","warn","groupParam","subTreeLookup","undefined","columnGroupsStateInitializer","state","props","apiRef","_props$experimentalFe","_props$columnGrouping","_props$columnGrouping2","experimentalFeatures","columnGrouping","columnFields","visibleColumnFields","unwrappedGroupingModel","columnGroupsHeaderStructure","maxDepth","length","Math","max","map","field","_unwrappedGroupingMod","_unwrappedGroupingMod2","lookup","headerStructure","useGridColumnGrouping","_props$experimentalFe3","getColumnGroupPath","useCallback","_unwrappedGroupingMod3","getAllGroupDetails","columnGroupLookup","columnGroupingApi","unstable_getColumnGroupPath","unstable_getAllGroupDetails","handleColumnIndexChange","_props$columnGrouping3","current","setState","_state$columns$ordere","_state$columns","orderedFields","columns","updateColumnGroupingState","_props$experimentalFe2","_unwrappedGroupingMod4","_unwrappedGroupingMod5","useEffect"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"groupId\", \"children\"];\nimport * as React from 'react';\nimport { isLeaf } from '../../../models/gridColumnGrouping';\nimport { gridColumnGroupsLookupSelector, gridColumnGroupsUnwrappedModelSelector } from './gridColumnGroupsSelector';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { getColumnGroupsHeaderStructure, unwrapGroupingColumnModel } from './gridColumnGroupsUtils';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { gridColumnFieldsSelector, gridVisibleColumnFieldsSelector } from '../columns';\nconst createGroupLookup = columnGroupingModel => {\n  let groupLookup = {};\n  columnGroupingModel.forEach(node => {\n    if (isLeaf(node)) {\n      return;\n    }\n    const {\n        groupId,\n        children\n      } = node,\n      other = _objectWithoutPropertiesLoose(node, _excluded);\n    if (!groupId) {\n      throw new Error('MUI: An element of the columnGroupingModel does not have either `field` or `groupId`.');\n    }\n    if (!children) {\n      console.warn(`MUI: group groupId=${groupId} has no children.`);\n    }\n    const groupParam = _extends({}, other, {\n      groupId\n    });\n    const subTreeLookup = createGroupLookup(children);\n    if (subTreeLookup[groupId] !== undefined || groupLookup[groupId] !== undefined) {\n      throw new Error(`MUI: The groupId ${groupId} is used multiple times in the columnGroupingModel.`);\n    }\n    groupLookup = _extends({}, groupLookup, subTreeLookup, {\n      [groupId]: groupParam\n    });\n  });\n  return _extends({}, groupLookup);\n};\nexport const columnGroupsStateInitializer = (state, props, apiRef) => {\n  var _props$experimentalFe, _props$columnGrouping, _props$columnGrouping2;\n  if (!((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.columnGrouping)) {\n    return state;\n  }\n  const columnFields = gridColumnFieldsSelector(apiRef);\n  const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef);\n  const groupLookup = createGroupLookup((_props$columnGrouping = props.columnGroupingModel) != null ? _props$columnGrouping : []);\n  const unwrappedGroupingModel = unwrapGroupingColumnModel((_props$columnGrouping2 = props.columnGroupingModel) != null ? _props$columnGrouping2 : []);\n  const columnGroupsHeaderStructure = getColumnGroupsHeaderStructure(columnFields, unwrappedGroupingModel);\n  const maxDepth = visibleColumnFields.length === 0 ? 0 : Math.max(...visibleColumnFields.map(field => {\n    var _unwrappedGroupingMod, _unwrappedGroupingMod2;\n    return (_unwrappedGroupingMod = (_unwrappedGroupingMod2 = unwrappedGroupingModel[field]) == null ? void 0 : _unwrappedGroupingMod2.length) != null ? _unwrappedGroupingMod : 0;\n  }));\n  return _extends({}, state, {\n    columnGrouping: {\n      lookup: groupLookup,\n      unwrappedGroupingModel,\n      headerStructure: columnGroupsHeaderStructure,\n      maxDepth\n    }\n  });\n};\n\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n */\nexport const useGridColumnGrouping = (apiRef, props) => {\n  var _props$experimentalFe3;\n  /**\n   * API METHODS\n   */\n  const getColumnGroupPath = React.useCallback(field => {\n    var _unwrappedGroupingMod3;\n    const unwrappedGroupingModel = gridColumnGroupsUnwrappedModelSelector(apiRef);\n    return (_unwrappedGroupingMod3 = unwrappedGroupingModel[field]) != null ? _unwrappedGroupingMod3 : [];\n  }, [apiRef]);\n  const getAllGroupDetails = React.useCallback(() => {\n    const columnGroupLookup = gridColumnGroupsLookupSelector(apiRef);\n    return columnGroupLookup;\n  }, [apiRef]);\n  const columnGroupingApi = {\n    unstable_getColumnGroupPath: getColumnGroupPath,\n    unstable_getAllGroupDetails: getAllGroupDetails\n  };\n  useGridApiMethod(apiRef, columnGroupingApi, 'public');\n  const handleColumnIndexChange = React.useCallback(() => {\n    var _props$columnGrouping3;\n    const unwrappedGroupingModel = unwrapGroupingColumnModel((_props$columnGrouping3 = props.columnGroupingModel) != null ? _props$columnGrouping3 : []);\n    apiRef.current.setState(state => {\n      var _state$columns$ordere, _state$columns;\n      const orderedFields = (_state$columns$ordere = (_state$columns = state.columns) == null ? void 0 : _state$columns.orderedFields) != null ? _state$columns$ordere : [];\n      const columnGroupsHeaderStructure = getColumnGroupsHeaderStructure(orderedFields, unwrappedGroupingModel);\n      return _extends({}, state, {\n        columnGrouping: _extends({}, state.columnGrouping, {\n          headerStructure: columnGroupsHeaderStructure\n        })\n      });\n    });\n  }, [apiRef, props.columnGroupingModel]);\n  const updateColumnGroupingState = React.useCallback(columnGroupingModel => {\n    var _props$experimentalFe2;\n    if (!((_props$experimentalFe2 = props.experimentalFeatures) != null && _props$experimentalFe2.columnGrouping)) {\n      return;\n    }\n    const columnFields = gridColumnFieldsSelector(apiRef);\n    const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef);\n    const groupLookup = createGroupLookup(columnGroupingModel != null ? columnGroupingModel : []);\n    const unwrappedGroupingModel = unwrapGroupingColumnModel(columnGroupingModel != null ? columnGroupingModel : []);\n    const columnGroupsHeaderStructure = getColumnGroupsHeaderStructure(columnFields, unwrappedGroupingModel);\n    const maxDepth = visibleColumnFields.length === 0 ? 0 : Math.max(...visibleColumnFields.map(field => {\n      var _unwrappedGroupingMod4, _unwrappedGroupingMod5;\n      return (_unwrappedGroupingMod4 = (_unwrappedGroupingMod5 = unwrappedGroupingModel[field]) == null ? void 0 : _unwrappedGroupingMod5.length) != null ? _unwrappedGroupingMod4 : 0;\n    }));\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        columnGrouping: {\n          lookup: groupLookup,\n          unwrappedGroupingModel,\n          headerStructure: columnGroupsHeaderStructure,\n          maxDepth\n        }\n      });\n    });\n  }, [apiRef, (_props$experimentalFe3 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe3.columnGrouping]);\n  useGridApiEventHandler(apiRef, 'columnIndexChange', handleColumnIndexChange);\n  useGridApiEventHandler(apiRef, 'columnsChange', () => {\n    updateColumnGroupingState(props.columnGroupingModel);\n  });\n  useGridApiEventHandler(apiRef, 'columnVisibilityModelChange', () => {\n    updateColumnGroupingState(props.columnGroupingModel);\n  });\n\n  /**\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    updateColumnGroupingState(props.columnGroupingModel);\n  }, [updateColumnGroupingState, props.columnGroupingModel]);\n};"]},"metadata":{},"sourceType":"module"}